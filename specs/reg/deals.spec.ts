import { test , expect, webkit, chromium, Browser, BrowserContext, Page } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { Pagination } from '../../framework'
import { DashboardPage } from '../../framework'
import { TemplatesPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { ViewTemplatePage } from '../../framework'
import { NewEditCopyModelPage } from '../../framework'
import { DealsPage } from '../../framework'
import { NewEditTermPage } from '../../framework'
import { ViewingModelPage } from '../../framework'
import { NewEditDealPage } from '../../framework'
import { DealAnalysisPage } from '../../framework'
import { ExistingModelPage } from '../../framework'
import { ContractsPage } from '../../framework'
import { NewEditContractPage } from '../../framework'
import { ModelPage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'


test.beforeEach(async ({ page }) => {
    await page.goto('');
});

test('redirectionToTheDealsPage @regChecklistNewLow @dealssPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const pageTitle = page.locator('.section__title');
    console.log('dealssPage Redirection To The Deals Page');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await sideBarMenu.sideBarDealsClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
});

test('validationAddDealButton @regChecklistNewHigh @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const deals = new DealsPage(page);
    const addDealButton = page.locator('#deals-list-add-deal');
    const pageTitle = page.locator('.section__title');
    const addDealPopup = page.locator('.mat-dialog-container');
    const addDealPopupText = page.locator('.modal-header');
    const addDealPopupChooseContractButton = page.locator('#confirm-create-deal-choose-a-contract');
    const addDealPopupNewDealButton = page.locator('#confirm-create-deal-new-deal');
    const addDealPopupCancelButton = page.locator('#confirm-create-deal-cancel');
    console.log('modelsPage Validation Add Deal Button');
    await users.AA4();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(addDealButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await deals.addDealButtonClick();
    await expect(page).toHaveURL('/deals/add-deal');
    await expect(pageTitle).toHaveText('New Deal');
    await expect(addDealPopup).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(addDealPopup).toBeVisible();
    await expect(addDealPopupText).toBeVisible();
    await expect(addDealPopupText).toHaveText(' Would you like to create deal for an existing contract? ');
    await expect(addDealPopupChooseContractButton).toBeVisible();
    await expect(addDealPopupNewDealButton).toBeVisible();
    await expect(addDealPopupCancelButton).toBeVisible();
});

test('checkingChooseAContractProcess @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const deals = new DealsPage(page);
    const pageTitle = page.locator('.section__title');
    const pageSubtitle = page.locator('.card-subtitle');
    const clientFieldDisabledSA = page.locator('#form-control-account_id .mat-select');
    const clientFieldValueSA = page.locator('#form-control-account_id .mat-select-value-text');
    const modelFieldDisabled = page.locator('#form-control-model_id .mat-select');
    const modelFieldValue = page.locator('#form-control-model_id .mat-select-value-text');
    const contractNameField = page.locator('#form-control-contract_name .mat-input-element');
    const subsidaryField = page.locator('#form-control-company_name .mat-input-element');
    const nameOfTheOtherPartyField = page.locator('#form-control-name_of_the_other_party .mat-input-element');
    const estimatedValueField = page.locator('#form-control-estimated_value .mat-input-element');
    const overviewField = page.locator('#form-control-description .mat-input-element');
    const notesField = page.locator('#form-control-notes .mat-input-element');
    const crmId = page.locator('#form-control-sf_contract_id .mat-input-element');
    console.log('modelsPage Templates Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await expect(pageTitle).toHaveText(' Choose a Contract ');
    await expect(pageSubtitle).toHaveText(' Select an existing contract from the available contracts below ');
    await page.locator('.mat-radio-label-content >> text= test100testContract4 ').click();
    await deals.chooseContractPageNextButtonClick();
    await expect(modelFieldDisabled).toHaveAttribute('aria-disabled', 'true');
    await expect(modelFieldValue).toHaveText('MODEL cloned 22222');
    await expect(contractNameField).toHaveAttribute('disabled', '');
    await expect(contractNameField).toHaveValue('test100testContract4');
    await expect(subsidaryField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(subsidaryField).toHaveValue('Client 1HT(test)');
    await expect(nameOfTheOtherPartyField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(nameOfTheOtherPartyField).toHaveValue('');
    await expect(estimatedValueField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(estimatedValueField).toHaveValue('');
    await expect(overviewField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(overviewField).toHaveValue('');
    await expect(notesField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(notesField).toHaveValue('');
    await expect(crmId).not.toHaveAttribute('aria-disabled', 'true');
    await expect(crmId).toHaveValue('');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await page.locator('.mat-radio-button >> nth=0').click();
    await deals.chooseContractPageNextButtonClick();
    await expect(clientFieldDisabledSA).toHaveAttribute('aria-disabled', 'true');
    await expect(clientFieldValueSA).toHaveText('W Client 2 test test test test test test');
    await expect(modelFieldDisabled).toHaveAttribute('aria-disabled', 'true');
    await expect(modelFieldValue).toHaveText('2222 Regress model 09/01');
    await expect(contractNameField).toHaveAttribute('disabled', '');
    await expect(contractNameField).toHaveValue('01 test');
    await expect(nameOfTheOtherPartyField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(nameOfTheOtherPartyField).toHaveValue('');
    await expect(estimatedValueField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(estimatedValueField).toHaveValue('');
    await expect(overviewField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(overviewField).toHaveValue('');
    await expect(notesField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(notesField).toHaveValue('');
    await expect(crmId).not.toHaveAttribute('aria-disabled', 'true');
    await expect(crmId).toHaveValue('');
});

test('newDealButtonAddDealPopup @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const pageTitle = page.locator('.section__title');
    console.log('modelsPage New Deal Button Add Deal Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupNewDealButtonClick();
    await expect(page).toHaveURL('/deals/add-deal');
    await expect(pageTitle).toHaveText('New Deal');
});

test('cancelButtonAddDealPopup @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const addDealPopup = page.locator('.mat-dialog-container');
    console.log('modelsPage Cancel Button Add Deal Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupCancelButtonClick();
    await expect(addDealPopup).toBeHidden();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
});

test('notDisplayingSomePublishContractsOnChooseContractPage @regChecklistNewHigh @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const existingContract = page.locator('.mat-radio-label-content >> text= autotestContract1 ');
    console.log('modelsPage Not Displaying Some Publish Contracts On Choose Contract Page');
    await signIn.email.fill('alexey.banshykov@mobindustry.net');
    await signIn.password.fill('Qwerty123!');
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await expect(existingContract).toBeHidden();
});

test('addDealSubscriptionLimits @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const deals = new DealsPage(page);
    const newDeal = new NewEditDealPage(page);
    const pageTitle = page.locator('.section__title');
    const updateSubscriptionPopup = page.locator('.mat-dialog-container');
    const updateSubscriptionPopupText = page.locator('.modal-header');
    const updateSubscriptionPopupUpdateSubscriptionButton= page.locator('#not-available-popup-update-subscription');
    const updateSubscriptionPopupCloseButton = page.locator('#not-available-popup-close');
    const updateSubscriptionContactAAPopup = page.locator('.mat-dialog-container');
    const updateSubscriptionContactAAPopupText = page.locator('.modal-header');
    const updateSubscriptionContactAAPopupCloseButton = page.locator('#not-available-popup-close');
    console.log('modelsPage Add Deal Subscription Limits');
    await users.AASubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await expect(updateSubscriptionPopup).toBeVisible();
    await expect(updateSubscriptionPopupText).toBeVisible();
    await expect(updateSubscriptionPopupText).toHaveText('Please update your subscription to add more deals.');
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toBeVisible();
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(updateSubscriptionPopupCloseButton).toBeVisible();
    await deals.updateSubscriptionPopupUpdateSubscriptionButtonClick();
    await expect(page).toHaveURL('/clients/edit-client/383?update_plan=true');
    await expect(pageTitle).toHaveText('Edit Client');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await deals.updateSubscriptionPopupCloseButtonClick();
    await expect(updateSubscriptionPopup).toBeHidden();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await deals.addDealButtonClick();
    await deals.addDealPopupNewDealButtonClick();
    await expect(updateSubscriptionPopup).toBeVisible();
    await expect(updateSubscriptionPopupText).toBeVisible();
    await expect(updateSubscriptionPopupText).toHaveText('Please update your subscription to add more deals.');
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toBeVisible();
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(updateSubscriptionPopupCloseButton).toBeVisible();
    await deals.updateSubscriptionPopupUpdateSubscriptionButtonClick();
    await expect(page).toHaveURL('/clients/edit-client/383?update_plan=true');
    await expect(pageTitle).toHaveText('Edit Client');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupNewDealButtonClick();
    await deals.updateSubscriptionPopupCloseButtonClick();
    await expect(updateSubscriptionPopup).toBeHidden();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AUSubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/clients/383');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupChooseContractButtonClick();
    await expect(updateSubscriptionContactAAPopup).toBeVisible();
    await expect(updateSubscriptionContactAAPopupText).toBeVisible();
    await expect(updateSubscriptionContactAAPopupText).toHaveText('Please contact your Account Admin to update your subscription and add more deals.');
    await expect(updateSubscriptionContactAAPopupCloseButton).toBeVisible();
    await deals.updateSubscriptionPopupContactAACloseButtonClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await deals.addDealButtonClick();
    await deals.addDealPopupNewDealButtonClick();
    await expect(updateSubscriptionContactAAPopup).toBeVisible();
    await expect(updateSubscriptionContactAAPopupText).toBeVisible();
    await expect(updateSubscriptionContactAAPopupText).toHaveText('Please contact your Account Admin to update your subscription and add more deals.');
    await expect(updateSubscriptionContactAAPopupCloseButton).toBeVisible();
    await deals.updateSubscriptionPopupContactAACloseButtonClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(pageTitle).toHaveText(' Deals ');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.addDealButtonClick();
    await deals.addDealPopupNewDealButtonClick();
    await page.waitForTimeout(1000);
    await newDeal.clientDropDown.click();
    await page.waitForTimeout(500);
    await page.locator('.mat-option >> text= Iryna MI ').focus();
    await page.locator('.mat-option >> text= Iryna MI ').click();
    await page.waitForTimeout(500);
    await newDeal.modelDropDown.click();
    await page.waitForTimeout(500);
    await page.locator('.mat-option >> text= test11test ').click();
    await page.waitForTimeout(500);
    await newDeal.contractNameField.fill('test');
    await newDeal.nameOfTheOtherPartyField.fill('test');
    await newDeal.esimatedValueField.type('444')
    await newDeal.createButtonClick();
    await expect(updateSubscriptionPopup).toBeVisible();
    await expect(updateSubscriptionPopupText).toBeVisible();
    await expect(updateSubscriptionPopupText).toHaveText('Please update your subscription to add more deals.');
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toBeVisible();
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(updateSubscriptionPopupCloseButton).toBeVisible();
    await deals.updateSubscriptionPopupCloseButtonClick();
    await expect(page).toHaveURL('/deals/add-deal');
    await expect(pageTitle).toHaveText('New Deal');
    await newDeal.createButtonClick();
    await deals.updateSubscriptionPopupUpdateSubscriptionButtonClick();
    await expect(page).toHaveURL('/clients/edit-client/383?update_plan=true');
    await expect(pageTitle).toHaveText('Edit Client');
});

test('activationExportButtonDealsPage @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const deals = new DealsPage(page);
    const exportButton = page.locator('#deals-list-export');
    console.log('modelsPage Activation Export Button Deals Page');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'true');
    await deals.checkboxSelectAllClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
    await expect(exportButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelect0Click();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await expect(page).toHaveURL('/clients/265');
    await sideBarMenu.sideBarDealsClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'true');
    await deals.checkboxSelectAllClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
    await expect(exportButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelect0Click();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'true');
    await deals.checkboxSelectAllClick();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
    await expect(exportButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelect0Click();
    await expect(exportButton).toBeVisible();
    await expect(exportButton).toHaveAttribute('aria-disabled', 'false');
});

test('check/UncheckDealsOnAllPages @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const pagination = new Pagination(page);
    const checkbox0 = page.locator('.deals-list-select >> nth=0');
    const checkbox1 = page.locator('.deals-list-select >> nth=4');
    const checkbox2 = page.locator('.deals-list-select >> nth=9');
    console.log('modelsPage Check/Uncheck Deals On All Pages');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelect0Click();
    await expect(checkbox0).toHaveClass('deals-list-select mat-checkbox mat-primary mat-checkbox-checked');
    await pagination.paginationPage2Click();
    await page.waitForTimeout(1000);
    await deals.checkboxSelect4Click();
    await expect(checkbox1).toHaveClass('deals-list-select mat-checkbox mat-primary mat-checkbox-checked');
    await pagination.paginationPage3Click();
    await page.waitForTimeout(1000);
    await deals.checkboxSelect9Click();
    await expect(checkbox2).toHaveClass('deals-list-select mat-checkbox mat-primary mat-checkbox-checked');
});

test('chceckboxAllIfCustomCheckboxesApplied @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const checkboxSelectAll = page.locator('#deals-list-select-all');
    console.log('modelsPage Chceckbox All If Custom Checkboxes Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelect0Click();
    await expect(checkboxSelectAll).toHaveClass('mat-checkbox mat-primary mat-checkbox-indeterminate');
});

test('deselectAllDealsOnAllPages @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const pagination = new Pagination(page);
    const checkbox0 = page.locator('.deals-list-select >> nth=0');
    const checkbox1 = page.locator('.deals-list-select >> nth=4');
    const checkbox2 = page.locator('.deals-list-select >> nth=9');
    console.log('modelsPage Deselect All Deals On All Pages');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelectAllClick();
    await expect(checkbox0).toHaveClass('deals-list-select mat-checkbox mat-primary');
    await pagination.paginationPage2Click();
    await page.waitForTimeout(1000);
    await expect(checkbox1).toHaveClass('deals-list-select mat-checkbox mat-primary');
    await pagination.paginationPage3Click();
    await page.waitForTimeout(1000);
    await expect(checkbox2).toHaveClass('deals-list-select mat-checkbox mat-primary');
});

test('validationExportButtonDealsCheckboxesManuallyChecked @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const exportPopup = page.locator('.mat-dialog-container');
    console.log('modelsPage Validation Export Button Deals Checkboxes Manually Checked');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelect0Click();
    const [ download ] = await Promise.all([
        page.waitForEvent('download'),
    await deals.exportButtonClick(),
    await expect(exportPopup).toBeHidden()
    ]);
    await expect(await download.suggestedFilename()).toContain('Deals_');
    await download.delete();
});

test('displayingConfirmExportPopup @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const pagination = new Pagination(page);
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.modal-header');
    console.log('modelsPage Displaying Confirm Export Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all deals of Client 1HT(test)? ');
    await deals.exportPopupXbuttonClick();
    await deals.checkboxSelect0Click();
    await deals.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all deals of Client 1HT(test)? ');
    await deals.exportPopupXbuttonClick();
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelectAllClick();
    await deals.checkboxSelect0Click();
    await deals.checkboxSelect2Click();
    await pagination.paginationPage2Click();
    await page.waitForTimeout(1000);
    await deals.checkboxSelect4Click();
    await deals.checkboxSelect5Click();
    await pagination.paginationPage3Click();
    await page.waitForTimeout(1000);
    await deals.checkboxSelect7Click();
    await deals.checkboxSelect8Click();
    await deals.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all deals of Client 1HT(test)? ');
});

test('validationExportButtonSelectAllApplied @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.modal-header');
    console.log('modelsPage Validation Export Button Select All Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all deals of Client 1HT(test)? ');
});

test('displayingInfoConfirmExportPopup @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.modal-header');
    const exportPopupXButton = page.locator('#export-deals-cross-cancel');
    const exportPopupXExportAllRadioButton = page.locator('.mat-radio-button >> nth=0');
    const exportPopupXExportAllRadioButtonText = page.locator('.mat-radio-label-content >> nth=0');
    const exportPopupXExportOnlySelectedRadiButton = page.locator('.mat-radio-button >> nth=1');
    const exportPopupXExportOnlySelectedRadiButtonText = page.locator('.mat-radio-label-content >> nth=1');
    const exportPopupCancelButton = page.locator('#export-deals-cancel');
    const exportPopupExportButton = page.locator('#export-deals-export');
    console.log('modelsPage Displaying Info Confirm Export Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all deals of Client 1HT(test)? ');
    await expect(exportPopupXButton).toBeVisible();
    await expect(exportPopupXExportAllRadioButton).toBeVisible();
    await expect(exportPopupXExportAllRadioButtonText).toBeVisible();
    await expect(exportPopupXExportAllRadioButtonText).toHaveText('Export All selected deals (background batch - *.csv file send to email)');
    await expect(exportPopupXExportOnlySelectedRadiButton).toBeVisible();
    await expect(exportPopupXExportOnlySelectedRadiButtonText).toBeVisible();
    await expect(exportPopupXExportOnlySelectedRadiButtonText).toHaveText('Export only selected deals from current page (*.csv file download now)');
    await expect(exportPopupCancelButton).toBeVisible();
    await expect(exportPopupExportButton).toBeVisible();
});

test('validationExportButtonOnTheConfirmExportPopup @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const emailSentPopup = page.locator('.mat-dialog-container');
    const emailSentPopupText = page.locator('.modal-header');
    console.log('modelsPage Validation Export Button On The Confirm Export Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await deals.exportPopupExportAllRadioButtonClick();
    await deals.exportPopupExportbuttonClick();
    await expect(emailSentPopup).toBeVisible();
    await expect(emailSentPopupText).toBeVisible();
    await expect(emailSentPopupText).toHaveText('We will send you an email to iryna.nema+1111@mobindustry.net with the CSV file requested.Depending on the number of deals it might take some time.');
    await deals.emailSentPopupXButtonClick();
    await deals.exportButtonClick();
    await deals.exportPopupExportOnlySelectedRadioButtonClick();
    const [ download ] = await Promise.all([
        page.waitForEvent('download'),
        await deals.exportPopupExportbuttonClick(),
    await expect(emailSentPopup).toBeHidden()
    ]);
    await expect(await download.suggestedFilename()).toContain('Deals_');
    await download.delete();
});

test('displayingInfoOnTheEmailSentPopup @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const emailSentPopup = page.locator('.mat-dialog-container');
    const emailSentPopupText = page.locator('.modal-header');
    const emailSentPopupXButton = page.locator('.close-ic');
    const emailSentPopupDoneButton = page.locator('.mat-button >> text=Done');
    console.log('modelsPage Displaying Info On The Email Sent Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await deals.exportPopupExportAllRadioButtonClick();
    await deals.exportPopupExportbuttonClick();
    await expect(emailSentPopup).toBeVisible();
    await expect(emailSentPopupText).toBeVisible();
    await expect(emailSentPopupText).toHaveText('We will send you an email to iryna.nema+1111@mobindustry.net with the CSV file requested.Depending on the number of deals it might take some time.');
    await expect(emailSentPopupXButton).toBeVisible();
    await expect(emailSentPopupDoneButton).toBeVisible();
});

test('gettingEmailWithCsvFile @regChecklistNewMedium @modelsPage', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const userBar = new UserBar(page);
    const deals = new DealsPage(page);
    const iframeHeader = page.frameLocator('.messagedata-iframe').locator('.header');
    const iframeResetLogo = page.frameLocator('.messagedata-iframe').locator('.logo');
    const iframeResetBody = page.frameLocator('.messagedata-iframe').locator('.content');
    const iframeResetFooter = page.frameLocator('.messagedata-iframe').locator('.footer');
    const csvFile = page.locator('.aSH');
    console.log('modelsPage Getting Email With Csv File');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await deals.exportPopupExportAllRadioButtonClick();
    await deals.exportPopupExportbuttonClick();
    await deals.emailSentPopupDoneButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await signIn.email.fill('alexey.banshykov@mobindustry.net');
    await signIn.password.fill('Qwerty123!');
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.checkboxSelectAllClick();
    await deals.exportButtonClick();
    await deals.exportPopupExportAllRadioButtonClick();
    await deals.exportPopupExportbuttonClick();
    await deals.emailSentPopupDoneButtonClick();
    await page.waitForTimeout(20000);
    await page.goto('https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&service=mail&sacu=1&rip=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin');
    await page.waitForSelector('input[type="email"]');
    await page.type('input[type="email"]', "alexey.banshykov@mobindustry.net");
    await page.click("#identifierNext");
    await page.waitForSelector('input[type="password"]');
    await page.type('input[type="password"]', "69563863ban");
    await page.waitForSelector("#passwordNext");
    await page.click("#passwordNext");
    await page.locator('text=MARQUP robot >> nth=1').click();
    await expect(csvFile).toBeVisible();
    await page.goto('https://maildrop.cc/inbox/accountadmin4');
    await page.locator('.messagelist-row-link >> nth=0').click();
    await expect(iframeHeader).toBeVisible();
    await expect(iframeHeader).toHaveText('Export all deals');
    await expect(iframeResetLogo).toBeVisible();
    await expect(iframeResetBody).toBeVisible();
    await expect(iframeResetBody).toContainText('Hello AccountAdimnThird,');
    await expect(iframeResetBody).toContainText('Please find the list of exported ContractsRx deals in attachment.');
    await expect(iframeResetFooter).toBeVisible();
    await expect(iframeResetFooter).toContainText(' If you have questions, please visit ');
    await expect(iframeResetFooter).toContainText('www.marqup.noredlines.com');
});

test('sortingOnTheDealsPage @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const dealField = page.locator('.mat-column-deal >> nth=1');
    const modelField = page.locator('.mat-column-models >> nth=1');
    const effectiveDateField = page.locator('.mat-column-effectiveDate >> nth=1');
    const expirationDateField = page.locator('.mat-column-expirationDate >> nth=1');
    const statusField = page.locator('.mat-column-status >> nth=1');
    const scoreField = page.locator('.mat-column-score >> nth=1');
    const contractField = page.locator('.mat-column-score >> nth=1');
    const createdField = page.locator('.mat-column-created >> nth=1');
    const editedField = page.locator('.mat-column-edited >> nth=1');
    console.log('modelsPage Sorting On The Deals Page');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.dealFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-contract_name');
    await expect(dealField).toHaveText('zzzz - aaaa');
    await deals.dealFilterClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await expect(dealField).toHaveText('123123 - wqeqwe');
    await deals.modelFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-model_name');
    await expect(modelField).toHaveText('test100testModelDoNotRemove1');
    await deals.modelFilterClick();
    await expect(page).toHaveURL('/deals?&sort=model_name');
    await expect(modelField).toHaveText('Configuration test1');
    await deals.effectiveDateFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-effective_date');
    await expect(effectiveDateField).toHaveText('-');
    await deals.effectiveDateFilterClick();
    await expect(page).toHaveURL('/deals?&sort=effective_date');
    await expect(effectiveDateField).toHaveText('-');
    await deals.expirationDateFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-expiration_date');
    await expect(expirationDateField).toHaveText('-');
    await deals.expirationDateFilterClick();
    await expect(page).toHaveURL('/deals?&sort=expiration_date');
    await expect(expirationDateField).toHaveText('-');
    await deals.statusFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-completion_status');
    await expect(statusField).toHaveText(' 100% ');
    await deals.statusFilterClick();
    await expect(page).toHaveURL('/deals?&sort=completion_status');
    await expect(statusField).toHaveText(' 20% ');
    await deals.rightArrowClick();
    await deals.scoreFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-final_draft_score');
    await expect(scoreField).toHaveText('-');
    await deals.scoreFilterClick();
    await expect(page).toHaveURL('/deals?&sort=final_draft_score');
    await expect(scoreField).toHaveText('-183');
    await deals.contractFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-contract.title');
    await expect(contractField).toHaveText('-');
    await deals.contractFilterClick();
    await expect(page).toHaveURL('/deals?&sort=contract.title');
    await expect(contractField).toHaveText('-');
    await deals.createFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-created_at');
    await expect(createdField).toHaveText(' 07/15/22 AccountAdimnThird AOThird ');
    await deals.createFilterClick();
    await expect(page).toHaveURL('/deals?&sort=created_at');
    await expect(createdField).toHaveText(' 11/30/21 AccountAdimnThird AOThird ');
    await deals.editedFilterClick();
    await expect(page).toHaveURL('/deals?&sort=-updated_at');
    await expect(editedField).toHaveText(' 08/04/22 AccountAdimnThird AOThird ');
    await deals.editedFilterClick();
    await expect(page).toHaveURL('/deals?&sort=updated_at');
    await expect(editedField).toHaveText('');
});

test('displayingAutoRenewIcon @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const autoRenewIcon = page.locator('.auto-renew >> nth=0');
    const autoRenewIconToltip = page.locator('.mat-tooltip');
    console.log('modelsPage Displaying Auto Renew Icon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await expect(autoRenewIcon).toBeVisible();
    await autoRenewIcon.click();
    await expect(autoRenewIconToltip).toBeVisible();
    await expect(autoRenewIconToltip).toHaveText('Auto renew');
});

test('dealNameColumn @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const dealColumn = page.locator('.deal-column-link >> nth=0');
    console.log('modelsPage Deal Name Column');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(dealColumn).toHaveText('123123 - wqeqwe');
    await expect(dealColumn).toHaveAttribute('href', '/deals/analysis-deal/886');
    await dealColumn.click();
    await expect(page).toHaveURL('/deals/analysis-deal/886');
});

test('modelNameColumn @regChecklistNewMeduim @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const modelColumn = page.locator('.models-column-link >> nth=0');
    console.log('modelsPage Deal Name Column');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(modelColumn).toHaveText('ConfigurationDeal5');
    await expect(modelColumn).toHaveAttribute('href', '/models/856/terms');
    await modelColumn.click();
    await expect(page).toHaveURL('/models/856/terms?&sort=term');
});

test('updatingModelNameInTheModelColumn @regChecklistNewMedium @modelsPage', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const modelColumn = page.locator('.mat-column-models >> nth=2');
    console.log('modelsPage Updating Model Name In The Model Column');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(modelColumn).toHaveText('Configuration test1');
    await page.goto('/models/edit-model/852');
    await page.locator('[formcontrolname="name"]').fill('Configuration test12');
    await page.click('#model-details-save-changes');
    await page.waitForTimeout(1500);
    await sideBarMenu.sideBarDealsClick();
    await expect(modelColumn).toHaveText('Configuration test12');
    await page.goto('/models/edit-model/852');
    await page.locator('[formcontrolname="name"]').fill('Configuration test1');
    await page.click('#model-details-save-changes');
});

test('behaviorModelNameColumnModelActive/Archived/Deleted @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const activeModel = page.locator('.models-column-link >> nth=0');
    const archiveModel = page.locator('.models-column-link >> nth=1');
    const deletedModel = page.locator('text=Configuration test2 >> nth=1');
    const tooltip = page.locator('.mat-tooltip');
    console.log('modelsPage Behavior Model Name Column Model Active/Archived/Deleted');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await expect(activeModel).toHaveCSS('color', 'rgb(69, 119, 210)');
    await activeModel.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Model Active');
    await activeModel.click();
    await expect(page).toHaveURL('/models/856/terms?&sort=term');
    await sideBarMenu.sideBarDealsClick();
    await expect(archiveModel).toHaveCSS('color', 'rgb(128, 136, 146)');
    await archiveModel.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Model Archived');
    await archiveModel.click();
    await expect(page).toHaveURL('/models/852/terms?&sort=term');
    await sideBarMenu.sideBarDealsClick();
    await expect(deletedModel).toHaveCSS('color', 'rgb(128, 136, 146)');
    await deletedModel.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Model Deleted');
    await deletedModel.click();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
});

test('contractsColumn @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const contractFieldWithValue = page.locator('.mat-column-contract .model-column-link >> nth=0');
    const contractFieldWithoutValue = page.locator('.mat-column-contract >> nth=1');
    const tooltip = page.locator('.mat-tooltip');
    console.log('modelsPage Contracts Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.rightArrowClick();
    await deals.contractFilterClick();
    await expect(contractFieldWithValue).toHaveText('test100testContract5');
    await expect(contractFieldWithValue).toHaveCSS('color', 'rgb(69, 119, 210)');
    await expect(contractFieldWithValue).toHaveAttribute('href', '/contract/3199');
    await contractFieldWithValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('test100testContract5');
    await contractFieldWithValue.click();
    await expect(page).toHaveURL('/contract/3199');
    await sideBarMenu.sideBarDealsClick();
    await deals.rightArrowClick();
    await deals.contractFilterClick();
    await deals.contractFilterClick();
    await expect(contractFieldWithoutValue).toHaveText('-');
});

test('effective/ExpirationDateColumn @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const effectiveWithValue = page.locator('.mat-column-effectiveDate >> nth=3');
    const effectiveWithoutValue = page.locator('.mat-column-effectiveDate >> nth=1');
    const expirationWithValue = page.locator('.mat-column-expirationDate >> nth=1');
    const expirationWithoutValue = page.locator('.mat-column-expirationDate >> nth=2');
    console.log('modelsPage Effective/Expiration Date Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.effectiveDateFilterClick();
    await expect(effectiveWithValue).toHaveText('07/12/22');
    await expect(effectiveWithoutValue).toHaveText('-');
    await deals.expirationDateFilterClick();
    await expect(expirationWithValue).toHaveText('09/07/22');
    await expect(expirationWithoutValue).toHaveText('-');
});

test('statusColumn @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const statusText = page.locator('.mat-column-status >> nth=1');
    const statusColor = page.locator('.status-progress__color-bar >> nth=0');
    const statusPrliminaryText = page.locator('.mat-column-status >> nth=9');
    const statusPrliminaryColor = page.locator('.status-progress__color-bar >> nth=8');
    console.log('modelsPage Status Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await expect(statusText).toHaveText(' 100% ');
    await expect(statusColor).toHaveCSS('background-color', 'rgb(126, 211, 33)');
    await expect(statusPrliminaryText).toHaveText(' 95% ');
    await expect(statusPrliminaryColor).toHaveCSS('background-color', 'rgb(255, 242, 84)');
});

test('scoreColumn @regChecklistNewHigh @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const scoreWithoutValue = page.locator('.mat-column-score >> nth=1');
    const scorePoitive = page.locator('.mat-column-score >> nth=3');
    const scoreNegative = page.locator('.mat-column-score >> nth=4');
    console.log('modelsPage Score Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.rightArrowClick();
    await deals.scoreFilterClick();
    await expect(scoreWithoutValue).toHaveText('-');
    await expect(scorePoitive).toHaveText('700');
    await expect(scorePoitive).toHaveCSS('color', 'rgb(20, 35, 54)');
    await deals.scoreFilterClick();
    await expect(scoreNegative).toHaveText('-233');
    await expect(scoreNegative).toHaveCSS('color', 'rgb(20, 35, 54)');
});

test('created/EditedColumn @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const createdField = page.locator('.mat-column-created >> nth=1');
    const createdFieldLongValue = page.locator('.mat-column-created >> nth=2');
    const editedField = page.locator('.mat-column-edited >> nth=1');
    const editedFieldLongValue = page.locator('.mat-column-edited >> nth=5');
    const tooltip = page.locator('.mat-tooltip');
    console.log('modelsPage Created/Edited Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.rightArrowClick();
    await deals.createFilterClick();
    await expect(createdField).toHaveText(' 07/23/22 AA Client HT ');
    await createdField.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('AA Client HT');
    await deals.createFilterClick();
    await expect(createdFieldLongValue).toHaveText('  05/19/20 sAdmin1 sAdmin ');
    await createdFieldLongValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('sAdmin1 sAdmin');
    await deals.editedFilterClick();
    await expect(editedField).toHaveText(' 07/23/22 AA Client HT ');
    await editedField.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('AA Client HT');
    await expect(editedFieldLongValue).toHaveText(' 07/07/22 sAdmin1 sAdmin ');
    await editedFieldLongValue.hover();
    await page.waitForTimeout(500);
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('sAdmin1 sAdmin');
    await deals.editedFilterClick();
    await expect(editedField).toHaveText('');
});

test('editButtonThreeDotsMenu @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const pageTitle = page.locator('.section__title');
    console.log('modelsPage Edit Button Three Dots Menu');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await deals.rightArrowClick();
    await deals.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/deals/edit-deal/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit Deal');
});

test('viewSummaryButtonThreeDotsMenu @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const viewSummaryButton = page.locator('.context-menu-view-summary');
    const pageTitle = page.locator('.section__title');
    console.log('modelsPage View Summary Button Three Dots Menu');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await deals.statusFilterClick();
    await deals.threeDotsMenuButton.click();
    await expect(viewSummaryButton).toBeHidden();
    await page.locator('.cdk-overlay-backdrop').click();
    await deals.statusFilterClick();
    await deals.threeDotsMenuButton.click();
    await expect(viewSummaryButton).toBeVisible();
    await viewSummaryButton.click();
    await expect(page.url()).toContain('/deals/summary-report/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toContainText('Summary');
});

test('saveAsNewButtonThreeDotsMenu @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const pageTitle = page.locator('.section__title');
    const modelFieldDisabled = page.locator('#form-control-model_id .mat-select');
    const modelFieldValue = page.locator('#form-control-model_id .mat-select-value-text');
    const contractNameField = page.locator('#form-control-contract_name .mat-input-element');
    const subsidaryField = page.locator('#form-control-company_name .mat-input-element');
    const nameOfTheOtherPartyField = page.locator('#form-control-name_of_the_other_party .mat-input-element');
    const estimatedValueField = page.locator('#form-control-estimated_value .mat-input-element');
    const overviewField = page.locator('#form-control-description .mat-input-element');
    const notesField = page.locator('#form-control-notes .mat-input-element');
    const crmId = page.locator('#form-control-sf_contract_id .mat-input-element');
    console.log('modelsPage Save As New Button Three Dots Menu');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await deals.statusFilterClick();
    await deals.threeDotsMenuButton.click();
    await expect(saveAsNewButton).toBeHidden();
    await page.locator('.cdk-overlay-backdrop').click();
    await deals.statusFilterClick();
    await deals.threeDotsMenuButton.click();
    await expect(saveAsNewButton).toBeVisible();
    await saveAsNewButton.click();
    await page.waitForTimeout(1000);
    await expect(page.url()).toContain('/deals/clone-deal/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('New Deal');
    await expect(modelFieldDisabled).toHaveAttribute('aria-disabled', 'true');
    await expect(modelFieldValue).toHaveText('Configuration test4');
    await expect(contractNameField).toHaveValue('dfssfsd');
    await expect(subsidaryField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(subsidaryField).toHaveValue('BanCompany4');
    await expect(nameOfTheOtherPartyField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(nameOfTheOtherPartyField).toHaveValue('dsfsdf');
    await expect(estimatedValueField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(estimatedValueField).toHaveValue('212,121');
    await expect(overviewField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(overviewField).toHaveValue('dasdsad');
    await expect(notesField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(notesField).toHaveValue('sadasd');
    await expect(crmId).not.toHaveAttribute('aria-disabled', 'true');
    await expect(crmId).toHaveValue('213`');
});

test('saveAsNewButtonSubscriptionLimitsThreeDotsMenu @regChecklistNewMedium @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const sideBarMenu = new SideBar(page);
    const deals = new DealsPage(page);
    const subscriptionLimitsPopup = page.locator('.mat-dialog-container');
    const subscriptionLimitsPopupText = page.locator('.modal-header');
    const subscriptionLimitsPopupUpgradeButton = page.locator('#not-available-popup-update-subscription');
    const subscriptionLimitsPopupCancelButton = page.locator('#not-available-popup-close');
    const contactAAPopup = page.locator('.mat-dialog-container');
    const contactAAPopupText = page.locator('.modal-header');
    const contactAAPopupCloseButton = page.locator('#not-available-popup-close');
    const pageTitle = page.locator('.section__title');
    console.log('modelsPage Save As New Button Subscription Limits Three Dots Menu');
    await users.AASubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await deals.threeDotsMenuSaveAsNewButtonClick();
    await expect(subscriptionLimitsPopup).toBeVisible();
    await expect(subscriptionLimitsPopupText).toBeVisible();
    await expect(subscriptionLimitsPopupText).toHaveText('Please update your subscription to add more deals.');
    await expect(subscriptionLimitsPopupUpgradeButton).toBeVisible();
    await expect(subscriptionLimitsPopupCancelButton).toBeVisible();
    await subscriptionLimitsPopupCancelButton.click();
    await expect(page).toHaveURL('/deals?&sort=-completion_status');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Deals');
    await deals.threeDotsMenuSaveAsNewButtonClick();
    await subscriptionLimitsPopupUpgradeButton.click();
    await expect(page).toHaveURL('/clients/edit-client/383?update_plan=true');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit Client');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AUSubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/clients/383');
    await sideBarMenu.sideBarDealsClick();
    await deals.statusFilterClick();
    await deals.threeDotsMenuSaveAsNewButtonClick();
    await expect(contactAAPopup).toBeVisible();
    await expect(contactAAPopupText).toBeVisible();
    await expect(contactAAPopupText).toHaveText('Please contact your Account Admin to update your subscription and add more deals.');
    await expect(contactAAPopupCloseButton).toBeVisible();
    await contactAAPopupCloseButton.click();
    await expect(page).toHaveURL('/deals?&sort=-completion_status');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Deals');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/deals/clone-deal/8585');
    await page.locator('#deal-details-save').click();
    await expect(subscriptionLimitsPopup).toBeVisible();
    await expect(subscriptionLimitsPopupText).toBeVisible();
    await expect(subscriptionLimitsPopupText).toHaveText('Please update your subscription to add more deals.');
    await expect(subscriptionLimitsPopupUpgradeButton).toBeVisible();
    await expect(subscriptionLimitsPopupCancelButton).toBeVisible();
    await subscriptionLimitsPopupCancelButton.click();
    await expect(page).toHaveURL('/deals/clone-deal/8585');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('New Deal');
    await page.locator('#deal-details-save').click();
    await subscriptionLimitsPopupUpgradeButton.click();
    await expect(page).toHaveURL('/clients/edit-client/383?update_plan=true');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit Client');
});

test('paginationOnTheDealsPage @regChecklistNewLow @modelsPage', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sideBarMenu = new SideBar(page);
    const pagination = new Pagination(page);
    console.log('modelsPage Pagination On The Deals Page');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sideBarMenu.sideBarDealsClick();
    await pagination.paginationLastPageClick();
    const lastPageReturnValue = await page.url();
    await expect(page).toHaveURL(lastPageReturnValue);
    await pagination.paginationPrevPageClick();
    const prevPageReturnValue = await page.url();
    await expect(page).toHaveURL(prevPageReturnValue);
    await pagination.paginationNextPageClick();
    const nextPageReturnValue = await page.url();
    await expect(page).toHaveURL(nextPageReturnValue);
    await pagination.paginationFirstPageClick();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await pagination.paginationPage2Click();
    await expect(page).toHaveURL('/deals?page=2&sort=contract_name');
    await pagination.paginationPage1Click();
    await expect(page).toHaveURL('/deals?&sort=contract_name');
    await pagination.paginationPage3Click();
    await expect(page).toHaveURL('/deals?page=3&sort=contract_name');
});