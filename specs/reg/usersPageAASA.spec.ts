import { test , expect} from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { Search } from '../../framework'
import { SignInPage } from '../../framework'
import { Pagination } from '../../framework'
import { UsersPageAASA } from '../../framework'
import { AddEditUserPage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'




test.beforeEach(async ({ page }, testInfo) => {
    await page.goto('');
});

test('displayingTheUsersPageForAA/SA @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const manageUseresButton = page.locator('#dashboard-manage-users');
    const addUserBUtton = page.locator('#users-list-add-user');
    console.log('usersPageAASA Displaying The Users Page For AA/SA');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await expect(manageUseresButton).toBeVisible();
    await manageUseresButton.click();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(addUserBUtton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await expect(manageUseresButton).toBeVisible();
    await manageUseresButton.click();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(addUserBUtton).toBeVisible();
    await userBar.logOutAction();
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await expect(manageUseresButton).toBeHidden();
});

test('displayingTheListOfUsers @regChecklistNewMedium @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const userColumn = page.locator('.mat-column-user >> nth=0');
    const userRoleColumn = page.locator('.mat-column-role >> nth=0');
    const statusColumn = page.locator('.mat-column-status >> nth=0');
    const clientColumn = page.locator('.mat-column-client >> nth=0');
    const createdColumn = page.locator('.mat-column-created >> nth=0');
    const createdByColumn = page.locator('.mat-column-createdBy >> nth=0');
    const lastLoginColumn = page.locator('.mat-column-lastLogIn >> nth=0');
    console.log('usersPageAASA Displaying The List Of Users');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await expect(userColumn).toBeVisible();
    await expect(userRoleColumn).toBeVisible();
    await expect(statusColumn).toBeVisible();
    await expect(clientColumn).toBeVisible();
    await expect(createdColumn).toBeVisible();
    await expect(createdByColumn).toBeVisible();
    await expect(lastLoginColumn).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await expect(userColumn).toBeVisible();
    await expect(userRoleColumn).toBeVisible();
    await expect(statusColumn).toBeVisible();
    await expect(clientColumn).toBeHidden();
    await expect(createdColumn).toBeVisible();
    await expect(createdByColumn).toBeVisible();
    await expect(lastLoginColumn).toBeVisible();
});

test('sortingOfTheListOfUsers @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    console.log('usersPageAASA Sorting Of The List Of Users');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.userFilterClick();
    await expect(page).toHaveURL('/users?&sort=-first_name');
    await usersPage.userFilterClick();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await usersPage.userRoleFilterClick();
    await expect(page).toHaveURL('/users?&sort=-group');
    await usersPage.userRoleFilterClick();
    await expect(page).toHaveURL('/users?&sort=group');
    await usersPage.statusFilterClick();
    await expect(page).toHaveURL('/users?&sort=-status');
    await usersPage.statusFilterClick();
    await expect(page).toHaveURL('/users?&sort=status');
    await usersPage.clientFilterClick();
    await expect(page).toHaveURL('/users?&sort=-account.name');
    await usersPage.clientFilterClick();
    await expect(page).toHaveURL('/users?&sort=account.name');
    await usersPage.createdFilterClick();
    await expect(page).toHaveURL('/users?&sort=-created_at');
    await usersPage.createdFilterClick();
    await expect(page).toHaveURL('/users?&sort=created_at');
    await usersPage.createdByFilterClick();
    await expect(page).toHaveURL('/users?&sort=-createdBy.first_name');
    await usersPage.createdByFilterClick();
    await expect(page).toHaveURL('/users?&sort=createdBy.first_name');
    await usersPage.lastLoginFilterClick();
    await expect(page).toHaveURL('/users?&sort=-last_log_in_at');
    await usersPage.lastLoginFilterClick();
    await expect(page).toHaveURL('/users?&sort=last_log_in_at');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.userFilterClick();
    await expect(page).toHaveURL('/users?&sort=-first_name');
    await usersPage.userFilterClick();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await usersPage.userRoleFilterClick();
    await expect(page).toHaveURL('/users?&sort=-group');
    await usersPage.userRoleFilterClick();
    await expect(page).toHaveURL('/users?&sort=group');
    await usersPage.statusFilterClick();
    await expect(page).toHaveURL('/users?&sort=-status');
    await usersPage.statusFilterClick();
    await expect(page).toHaveURL('/users?&sort=status');
    await usersPage.createdFilterClick();
    await expect(page).toHaveURL('/users?&sort=-created_at');
    await usersPage.createdFilterClick();
    await expect(page).toHaveURL('/users?&sort=created_at');
    await usersPage.createdByFilterClick();
    await expect(page).toHaveURL('/users?&sort=-createdBy.first_name');
    await usersPage.createdByFilterClick();
    await expect(page).toHaveURL('/users?&sort=createdBy.first_name');
    await usersPage.lastLoginFilterClick();
    await expect(page).toHaveURL('/users?&sort=-last_log_in_at');
    await usersPage.lastLoginFilterClick();
    await expect(page).toHaveURL('/users?&sort=last_log_in_at');
});

test('userColumn @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const resetPasswordButton = page.locator('#user-details-reset-password');
    const pageTitle = page.locator('.section__title');
    console.log('usersPageAASA User Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(userLink).toHaveAttribute('href', '/users/edit-user/717');
    await expect(userLink).toHaveText('test100test AutotestUser ');
    await userLink.click();
    await expect(page).toHaveURL('/users/edit-user/717');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(resetPasswordButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(userLink).toHaveAttribute('href', '/users/edit-user/717');
    await expect(userLink).toHaveText('test100test AutotestUser ');
    await userLink.click();
    await expect(page).toHaveURL('/users/edit-user/717');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(resetPasswordButton).toBeVisible();
});

test('userRoleColumn @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const userRoleColumnValue = page.locator('.mat-column-role >> nth=1');
    console.log('usersPageAASA User Role Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.userRoleFilterClick();
    await expect(userRoleColumnValue).toHaveText('Solution Admin');
    await usersPage.userRoleFilterClick();
    await expect(userRoleColumnValue).toHaveText('Account User');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.userRoleFilterClick();
    await expect(userRoleColumnValue).toHaveText('Account Admin');
    await usersPage.userRoleFilterClick();
    await expect(userRoleColumnValue).toHaveText('Account User');
});

test('statusColumn @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const statusColumnValue = page.locator('.mat-column-status >> nth=1');
    console.log('usersPageAASA Status Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await expect(statusColumnValue).toHaveText('Deactivated');
    await expect(statusColumnValue).toHaveCSS('color', 'rgb(20, 35, 54)');
    await usersPage.statusFilterClick();
    await expect(statusColumnValue).toHaveText('Pending');
    await expect(statusColumnValue).toHaveCSS('color', 'rgb(225, 146, 16)');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await expect(statusColumnValue).toHaveText('Active');
    await expect(statusColumnValue).toHaveCSS('color', 'rgb(92, 168, 8)');
});

test('clientColumn @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const clientColumn = page.locator('.mat-column-client >> nth=0');
    const userLink = page.locator('.link-name >> nth=0');
    const clientColumnValue = page.locator('.mat-column-client >> nth=1');
    console.log('usersPageAASA Client Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(clientColumn).toBeVisible();
    await expect(clientColumnValue).toHaveText('Client 1HT(test) active');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await expect(clientColumn).toBeHidden();
});

test('created/CreatedByColumn @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const createdColumnValue = page.locator('.mat-column-created >> nth=1');
    const createdByColumnValue = page.locator('.mat-column-createdBy >> nth=1');
    console.log('usersPageAASA Created/Created By Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(createdColumnValue).toHaveText(' 10/03/22 ');
    await expect(createdByColumnValue).toHaveText(' AA Client HT ');

    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(createdColumnValue).toHaveText(' 10/03/22 ');
    await expect(createdByColumnValue).toHaveText(' AA Client HT ');
});

test('lastLoginColumn @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const lastLoginColumnValue = page.locator('.mat-column-lastLogIn >> nth=1');
    console.log('usersPageAASA Last Login Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.lastLoginFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('AA Client HT ')) {
        await search.searchField.fill('iryna.nema+1111');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(lastLoginColumnValue).toHaveText(Helpers.currentDateAndTimeForSignatures());
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.lastLoginFilterClick();
    if (!getUserLinkValue.includes('AA Client HT ')) {
        await search.searchField.fill('iryna.nema+1111');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(lastLoginColumnValue).toHaveText(Helpers.currentDateAndTimeForSignatures());
    await page.goto('/users?&sort=first_name');
    await usersPage.lastLoginFilterClick();
    await usersPage.lastLoginFilterClick();
    await expect(lastLoginColumnValue).toHaveText('');
});

test('threeDotsMenu @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const editButton = page.locator('.action-edit');
    const deleteButton = page.locator('.action-remove');
    const reactivateButton = page.locator('.action-active');
    console.log('usersPageAASA Three Dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await usersPage.threeDotsMenuClick();
    await expect(reactivateButton).toBeVisible();
    await expect(editButton).toBeHidden();
    await expect(deleteButton).toBeHidden();
    await usersPage.threeDotsMenuCloseAction();
    await usersPage.statusFilterClick();
    await usersPage.threeDotsMenuClick();
    await expect(editButton).toBeVisible();
    await expect(deleteButton).toBeVisible();
    await expect(reactivateButton).toBeHidden();
    await usersPage.threeDotsMenuCloseAction();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await usersPage.threeDotsMenuClick();
    await expect(editButton).toBeVisible();
    await expect(deleteButton).toBeVisible();
    await expect(reactivateButton).toBeHidden();
});

test('validationOfTheEditButtonThreeDotsMenu @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const resetPasswordButton = page.locator('#user-details-reset-password');
    const pageTitle = page.locator('.section__title');
    console.log('usersPageAASA Validation Of The Edit Button Three Dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await usersPage.statusFilterClick();
    await usersPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/users/edit-user/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(resetPasswordButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.statusFilterClick();
    await usersPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/users/edit-user/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(resetPasswordButton).toBeVisible();
});

test('validationOfTheDelete/ReactivateButtonThreeDotsMenu @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const deletePopup = page.locator('.mat-dialog-container');
    const deletePopupText = page.locator('.modal-header');
    const deletePopupCancelButton = page.locator('#confirm-modal-cancel');
    const deletePopupDeleteButton = page.locator('#confirm-modal-delete');
    const userStatus = page.locator('.mat-column-status >> nth=1');
    const reactivateButton = page.locator('.action-active');
    const pageTitle = page.locator('.section__title');
    console.log('usersPageAASA Validation Of The Delete/Reactivate Button Three Dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(userStatus).toHaveText('Pending');
    await usersPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText(' Are you sure you want to delete this user?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(userStatus).toHaveText('Pending');
    await usersPage.threeDotsMenuDeleteButtonClick();
    await usersPage.deleteUsersPopupDeleteButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(page).toHaveURL('/users?&sort=-created_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(userStatus).toHaveText('Deactivated');
    await usersPage.threeDotsMenuClick();
    await expect(reactivateButton).toBeVisible();
    await usersPage.threeDotsMenuCloseAction();
    await usersPage.threeDotsMenuReactivateButtonClick();
    await expect(page).toHaveURL('/users?&sort=-created_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(userStatus).toHaveText('Pending');
});

test('validationOfTheAddUserButton @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const createButton = page.locator('#user-details-save');
    const pageTitle = page.locator('.section__title');
    console.log('usersPageAASA Validation Of The Add User Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.addUserButtonClick();
    await expect(page).toHaveURL('/users/add-user');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('New User');
    await expect(createButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.addUserButtonClick();
    await expect(page).toHaveURL('/users/add-user');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('New User');
    await expect(createButton).toBeVisible();
});

   //to be refactored
test.skip('displayingTheDeleteUsersButton @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const deletePopup = page.locator('.mat-dialog-container');
    console.log('usersPageAASA Displaying The Delete Users Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeHidden();
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeVisible();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeHidden();
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeVisible();
    await usersPage.deleteUsersPopupCancelButtonClick();
});

test('validationOfTheDeleteUsersButton @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const deletePopup = page.locator('.mat-dialog-container');
    const deletePopupText = page.locator('.modal-header');
    const deletePopupCancelButton = page.locator('#confirm-modal-cancel');
    const deletePopupDeleteButton = page.locator('#confirm-modal-delete');
    console.log('usersPageAASA Validation Of The Delete Users Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText(' Are you sure you want to delete these users?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await usersPage.checkboxSelectAllClick();
    await usersPage.checkboxSelectFirstClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopupText).toHaveText(' Are you sure you want to delete this user?');
    await usersPage.deleteUsersPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText(' Are you sure you want to delete these users?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await usersPage.checkboxSelectAllClick();
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await usersPage.checkboxSelectFirstClick();
    await usersPage.deleteUsersButtonClick();
    await expect(deletePopupText).toHaveText(' Are you sure you want to delete this user?');
});

test('validationOfTheCancelButtonOnDeleteTheUsersPopup @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const usersPage = new UsersPageAASA(page);
    const deletePopup = page.locator('.mat-dialog-container');
    const addUserButton = page.locator('#users-list-add-user');
    const pageTitle = page.locator('.section__title');
    console.log('usersPageAASA Validation Of The Cancel Button On The Delete Users Popup');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');    
    await expect(addUserButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.checkboxSelectAllClick();
    await usersPage.deleteUsersButtonClick();
    await usersPage.deleteUsersPopupCancelButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');    
    await expect(addUserButton).toBeVisible();
});

test('validationOfTheDeleteButtonOnTheUsersButton @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const usersPage = new UsersPageAASA(page);
    const search = new Search(page);
    const userLink = page.locator('.link-name >> nth=0');
    const userStatus = page.locator('.mat-column-status >> nth=1');
    console.log('usersPageAASA Validation Of The Delete Button On The Users Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(userStatus).toHaveText('Pending');
    await usersPage.checkboxSelectFirstClick();
    await usersPage.deleteUsersButtonClick();
    await usersPage.deleteUsersPopupDeleteButtonClick();
    await expect(userStatus).toHaveText('Deactivated');
    await usersPage.threeDotsMenuReactivateButtonClick();
});

test('paginationOnTheUsersPage @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const pagination = new Pagination(page);
    console.log('usersPageAASA Pagination On The Users Page');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users?&sort=first_name');
    await pagination.paginationLastPageClick();
    const lastPageReturnValue = await page.url();
    await expect(page).toHaveURL(lastPageReturnValue);
    await pagination.paginationPrevPageClick();
    const prevPageReturnValue = await page.url();
    await expect(page).toHaveURL(prevPageReturnValue);
    await pagination.paginationFirstPageClick();
    await expect(page).toHaveURL('/users?&sort=first_name');
});

test('validationOfUploadPicture/validationOfRemoveButton @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newUser = new AddEditUserPage(page);
    const removePopup = page.locator('.mat-dialog-container');
    const removePopupText = page.locator('.modal-header');
    const removePopupCancelButton = page.locator('#confirm-modal-cancel');
    const removePopupDeleteButton = page.locator('#confirm-modal-delete');
    const avatarUpload = '/Users/user/Desktop/MarqUpAutomatization/lib/imgForUpload/avatarImg.jpeg'
    const removeButton = page.locator('.btn >> text=remove');
    const avatar = page.locator('.avatar');
    console.log('usersPageAASA Validation Of The User Picture Icon/Select Image Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await page.setInputFiles('.avatar', avatarUpload);
    await expect(removeButton).toBeVisible();
    const getAvatarUrl0 = await avatar.getAttribute('style');
    await expect(getAvatarUrl0).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await expect(removePopup).toBeVisible();
    await expect(removePopupText).toBeVisible();
    await expect(removePopupText).toHaveText(' Are you sure you want to delete this image?');
    await expect(removePopupCancelButton).toBeVisible();
    await expect(removePopupDeleteButton).toBeVisible();
    await newUser.removePopupCancelClick();
    await expect(removePopup).toBeHidden();
    await expect(page).toHaveURL('/users/add-user');
    await expect(removeButton).toBeVisible();
    await expect(getAvatarUrl0).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await newUser.removePopupDeleteClick();
    await page.waitForTimeout(1000);
    await page.setInputFiles('.btn >> text=select image', avatarUpload); 
    await expect(removeButton).toBeVisible();
    const getAvatarUrl1 = await avatar.getAttribute('style');
    await expect(getAvatarUrl1).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await newUser.removePopupDeleteClick();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await page.setInputFiles('.avatar', avatarUpload);
    await expect(removeButton).toBeVisible();
    const getAvatarUrl2 = await avatar.getAttribute('style');
    await expect(getAvatarUrl2).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await expect(removePopup).toBeVisible();
    await expect(removePopupText).toBeVisible();
    await expect(removePopupText).toHaveText(' Are you sure you want to delete this image?');
    await expect(removePopupCancelButton).toBeVisible();
    await expect(removePopupDeleteButton).toBeVisible();
    await newUser.removePopupCancelClick();
    await expect(removePopup).toBeHidden();
    await expect(page).toHaveURL('/users/add-user');
    await expect(removeButton).toBeVisible();
    await expect(getAvatarUrl2).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await newUser.removePopupDeleteClick();
    await page.waitForTimeout(1000);
    await page.setInputFiles('.btn >> text=select image', avatarUpload); 
    await expect(removeButton).toBeVisible();
    const getAvatarUrl3 = await avatar.getAttribute('style');
    await expect(getAvatarUrl3).toContain('data:image/jpeg;base64');
    await newUser.removeButtonClick();
    await newUser.removePopupDeleteClick();
});

test('validationOfTheFirstNameField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const firstNameField = page.locator('#user-details-first-name input');
    const firstNameFieldError = page.locator('#user-details-first-name mat-error');
    console.log('usersPageAASA Validation Of The First Name Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(firstNameField).toBeVisible();
    await expect(firstNameField).toHaveAttribute('placeholder', 'First Name');
    await newUser.createButtonForErrors();
    await expect(firstNameFieldError).toBeVisible();
    await expect(firstNameFieldError).toHaveText(' Please fill in this field ');
    await newUser.firstNameField.fill('s');
    await newUser.createButtonForErrors();
    await expect(firstNameFieldError).toBeVisible();
    await expect(firstNameFieldError).toHaveText(' First Name must be at least 2 characters long ');
});

test('validationOfTheLastNameField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const lastNameField = page.locator('#user-details-last-name input');
    const lastNameFieldError = page.locator('#user-details-last-name mat-error');
    console.log('usersPageAASA Validation Of The Last Name Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(lastNameField).toBeVisible();
    await expect(lastNameField).toHaveAttribute('placeholder', 'Last Name');
    await newUser.createButtonForErrors();
    await expect(lastNameFieldError).toBeVisible();
    await expect(lastNameFieldError).toHaveText(' Please fill in this field ');
    await newUser.lastNameField.fill('s');
    await newUser.createButtonForErrors();
    await expect(lastNameFieldError).toBeVisible();
    await expect(lastNameFieldError).toHaveText(' Last Name must be at least 2 characters long ');
});

test('validationOfTheEmailField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const emailField = page.locator('#user-details-email input');
    const emailFieldError = page.locator('#user-details-email mat-error');
    console.log('usersPageAASA Validation Of The Email Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(emailField).toBeVisible();
    await expect(emailField).toHaveAttribute('pattern', '[a-zA-Z0-9_.\\+-]{1,}@[0-9a-zA-Z.-]{1,}[.]{1}[a-zA-Z]{2,}');
    await expect(emailField).toHaveAttribute('placeholder', 'Email');
    await newUser.createButtonForErrors();
    await expect(emailFieldError).toBeVisible();
    await expect(emailFieldError).toHaveText(' Please fill in this field ');
    await newUser.emailField.fill('s');
    await newUser.createButtonForErrors();
    await expect(emailFieldError).toBeVisible();
    await expect(emailFieldError).toHaveText(' Please enter a valid email address ');
});

test('validationOfTheStatusField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const statusField = page.locator('#user-details-status');
    const statusFieldStatus = page.locator('.status-name >> nth=0');
    console.log('usersPageAASA Validation Of The Status Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(statusField).toBeVisible();
    await expect(statusFieldStatus).toHaveText('pending');
    await expect(statusFieldStatus).toHaveCSS('color', 'rgb(225, 146, 16)');
    await page.goto('/users/edit-user/531');
    await expect(statusField).toBeVisible();
    await expect(statusFieldStatus).toHaveText('inactive');
    await expect(statusFieldStatus).toHaveCSS('color', 'rgb(255, 22, 66)');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/631');
    await expect(statusField).toBeVisible();
    await expect(statusFieldStatus).toHaveText('active');
    await expect(statusFieldStatus).toHaveCSS('color', 'rgb(92, 168, 8)');
});

test('validationOfTheDeactivate/ActivateButton @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const deactivateButton = page.locator('.btn >> text=deactivate');
    const activateButton = page.locator('.btn >> text=activate');
    const statusFieldStatus = page.locator('.status-name >> nth=0');
    console.log('usersPageAASA Validation Of The Deactivate/Activate Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/717');
    await expect(deactivateButton).toBeHidden();
    await expect(activateButton).toBeHidden();
    await page.goto('/users/edit-user/631');
    await newUser.deactivateButtonClick();
    await expect(deactivateButton).toBeHidden();
    await expect(activateButton).toBeVisible();
    await expect(statusFieldStatus).toHaveText('inactive');
    await newUser.activateButtonClick();
    await expect(deactivateButton).toBeVisible();
    await expect(statusFieldStatus).toHaveText('active');
});

test('validationOfTheBioField @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const bioField = page.locator('#user-details-bio textarea');
    const bioFieldCounter = page.locator('#user-details-bio .field-counter');
    console.log('usersPageAASA Validation Of The Bio Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(bioField).toBeVisible();
    await expect(bioField).toHaveAttribute('maxlength', '400');
    await expect(bioField).toHaveAttribute('placeholder', 'Bio');
    await expect(bioFieldCounter).toBeVisible();
    await expect(bioFieldCounter).toHaveText('0/400');
    await newUser.bioField.fill('TestTestTest');
    await expect(bioFieldCounter).toHaveText('12/400');
});

test('validationOfTheClientField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newUser = new AddEditUserPage(page);
    const clientField = page.locator('#user-details-client');
    const clientFieldDropDown = page.locator('.mat-select-content');
    const clientFieldValue = page.locator('#user-details-client mat-select');
    console.log('usersPageAASA Validation Of The Client Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await page.waitForSelector('#user-details-client .mat-select-value >> text=MarqUp');
    await expect(clientField).toBeVisible();
    await clientField.click();
    await page.waitForTimeout(1000);
    if (await page.locator('.mat-select-content').isHidden()) 
    {
        await page.waitForTimeout(1000);
        await clientField.click();
    }
    await page.waitForSelector('.mat-select-content');
    await expect(clientFieldDropDown).toBeVisible();
    await page.locator('.mat-option >> nth=1').click();
    await newUser.selectClientAction();
    await expect(clientFieldValue).toHaveText('Client 1HT(test)');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/717');
    await expect(clientField).toBeVisible();
    await expect(clientFieldValue).toHaveText('Client 1HT(test)');
    await expect(clientFieldValue).toHaveAttribute('placeholder', 'Client');
    await expect(clientFieldValue).toHaveAttribute('aria-disabled', 'true');
});

test('validationOfTheClientStatusField @regChecklistNewLow @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const clientStatusField = page.locator('#user-details-account-status');
    const clientStatusFieldValue = page.locator('.status-name >> nth=1');
    console.log('usersPageAASA Validation Of The Client Status Field');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(clientStatusField).toBeHidden();
    await page.goto('/users/edit-user/501');
    await expect(clientStatusField).toBeVisible();
    await expect(clientStatusFieldValue).toHaveText('inactive');
    await page.goto('/users/edit-user/689');
    await expect(clientStatusField).toBeVisible();
    await expect(clientStatusFieldValue).toHaveText('active');
});

test('validationOfTheAdmin/UserField @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const userAdminField = page.locator('#user-details-role');
    const userAdminFieldToggle = page.locator('.mat-slide-toggle');
    const userAdminFieldValue = page.locator('#user-details-role .role-name');
    console.log('usersPageAASA Validation Of The Admin/User Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await expect(userAdminField).toBeVisible();
    await expect(userAdminFieldToggle).toBeVisible();
    await expect(userAdminFieldValue).toHaveText('User');
    await newUser.userAdminToggleClick();
    await expect(userAdminFieldValue).toHaveText('Admin');
    await newUser.userAdminToggleClick();
    await expect(userAdminFieldValue).toHaveText('User');
});

test('validationOfTheCancelButton @regChecklistNewLow @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newUser = new AddEditUserPage(page);
    const pageTitle = page.locator('.section__title');
    const addUserButton = page.locator('#users-list-add-user');
    console.log('usersPageAASA Validation Of The CancelButton');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await newUser.cancelButtonClick();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/717');
    await newUser.cancelButtonClick();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
});

   //to be refactored
test('validationOfTheCreateButton @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const firstNameFieldError = page.locator('#user-details-first-name mat-error');
    const lastNameFieldError = page.locator('#user-details-last-name mat-error');
    const emailFieldError = page.locator('#user-details-email mat-error');
    console.log('usersPageAASA Validation Of The Create Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/add-user');
    await newUser.createButtonForErrors();
    await expect(firstNameFieldError).toBeVisible();
    await expect(firstNameFieldError).toHaveText(' Please fill in this field ');
    await expect(lastNameFieldError).toBeVisible();
    await expect(lastNameFieldError).toHaveText(' Please fill in this field ');
    await expect(emailFieldError).toBeVisible();
    await expect(emailFieldError).toHaveText(' Please fill in this field ');
});

test('validationOfTheSaveChangesButton @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newUser = new AddEditUserPage(page);
    const pageTitle = page.locator('.section__title');
    const firstNameFieldError = page.locator('#user-details-first-name mat-error');
    const lastNameFieldError = page.locator('#user-details-last-name mat-error');
    const emailFieldError = page.locator('#user-details-email mat-error');
    const addUserButton = page.locator('#users-list-add-user');
    console.log('usersPageAASA Validation Of The Save Changes Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/717');
    await newUser.saveChangesButtonClick();
    await expect(page).toHaveURL('users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
    await page.goto('/users/edit-user/717');
    await newUser.firstNameField.fill('');
    await newUser.lastNameField.fill('');
    await newUser.emailField.fill('');
    await newUser.createButtonForErrors();
    await expect(firstNameFieldError).toBeVisible();
    await expect(firstNameFieldError).toHaveText(' Please fill in this field ');
    await expect(lastNameFieldError).toBeVisible();
    await expect(lastNameFieldError).toHaveText(' Please fill in this field ');
    await expect(emailFieldError).toBeVisible();
    await expect(emailFieldError).toHaveText(' Please fill in this field ');
});

test('validationOfTheResendPassword/ResendLinkButton @regChecklistNewMedium @usersPageAASA', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newUser = new AddEditUserPage(page);
    const pageTitle = page.locator('.section__title');
    const resetPasswordButton = page.locator('#user-details-reset-password');
    const resendLinkButton = page.locator('#user-details-resend-link');
    const emailSentPopup = page.locator('.mat-snack-bar-container');
    const addUserButton = page.locator('#users-list-add-user');
    const saveChangesButton = page.locator('#user-details-save');
    console.log('usersPageAASA Validation Of The Resend Password/Resend Link Button');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/631')
    await expect(resetPasswordButton).toBeVisible();
    await expect(resendLinkButton).toBeHidden();
    await page.goto('/users/edit-user/717');
    await expect(resetPasswordButton).toBeVisible();
    await expect(resendLinkButton).toBeHidden();
    await page.goto('/users/edit-user/499');
    await expect(resetPasswordButton).toBeHidden();
    await expect(resendLinkButton).toBeVisible();
    await newUser.resendLinkButtonClick();
    await expect(emailSentPopup).toBeVisible();
    await expect(emailSentPopup).toHaveText('Email has been sent successfully');
    await expect(page).toHaveURL('/users/edit-user/499');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(saveChangesButton).toBeVisible();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/631')
    await expect(resetPasswordButton).toBeVisible();
    await expect(resendLinkButton).toBeHidden();
    await newUser.resetPasswordButtonClick();
    await expect(emailSentPopup).toBeVisible();
    await expect(emailSentPopup).toHaveText('Email has been sent successfully');
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
    await page.goto('/users/edit-user/717');
    await expect(resetPasswordButton).toBeVisible();
    await expect(resendLinkButton).toBeHidden();
    await newUser.resetPasswordButtonClick();
    await expect(emailSentPopup).toBeVisible();
    await expect(emailSentPopup).toHaveText('Email has been sent successfully');
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
});

test('validationOfTheDeleteUserButton @regChecklistNewHigh @usersPageAASA', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const usersPage = new UsersPageAASA(page);
    const newUser = new AddEditUserPage(page);
    const search = new Search(page);
    const pageTitle = page.locator('.section__title');
    const deleteUserPopup = page.locator('.mat-dialog-container');
    const deleteUserPopupText = page.locator('.modal-header');
    const deleteUserPopupCancelButton = page.locator('#confirm-modal-cancel');
    const deleteUserPopupDeleteButton = page.locator('#confirm-modal-delete');
    const saveChangesButton = page.locator('#user-details-save');
    const addUserButton = page.locator('#users-list-add-user');
    const userLink = page.locator('.link-name >> nth=0');
    const statusColumnValue = page.locator('.mat-column-status >> nth=1');
    console.log('usersPageAASA Validation Of The Delete User Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/users/edit-user/717');
    await newUser.deleteUserButtonClick();
    await expect(deleteUserPopup).toBeVisible();
    await expect(deleteUserPopupText).toBeVisible();
    await expect(deleteUserPopupText).toHaveText(' Are you sure you want to delete this user?');
    await expect(deleteUserPopupCancelButton).toBeVisible();
    await expect(deleteUserPopupDeleteButton).toBeVisible();
    await newUser.removePopupCancelClick();
    await expect(deleteUserPopup).toBeHidden();
    await expect(page).toHaveURL('/users/edit-user/717');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Edit User');
    await expect(saveChangesButton).toBeVisible();
    await newUser.deleteUserButtonClick();
    await newUser.removePopupDeleteClick();
    await expect(deleteUserPopup).toBeHidden();
    await expect(page).toHaveURL('/users?&sort=first_name');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Users');
    await expect(addUserButton).toBeVisible();
    await usersPage.createdFilterClick();
    const getUserLinkValue = await userLink.textContent();
    if (!getUserLinkValue.includes('test100test AutotestUser ')) {
        await search.searchField.fill('test100testautotestuser');
        await search.searchButtonClick();
        await search.userToggleClick();
    }
    await expect(statusColumnValue).toHaveText('Deactivated');
    await usersPage.threeDotsMenuReactivateButtonClick();
});