import { test , expect } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { Search } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { TemplatesPage } from '../../framework'
import { ContractsPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { ViewTemplatePage } from '../../framework'
import { NewEditContractPage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'

// [chrome] › specs/reg/contracts.spec.ts:1325:1 › validationOfTheDoneButtonOnTheDisablePayTractsPopup @regClickTractsHigh @contracts3dotsMenu 

test.beforeEach(async ({ page }) => {
    await page.goto('');
});

test('validationOfTheCopyLinkButtonAA/AU @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkPopup = page.locator('.mat-dialog-container');
    const copyLinkPopupHeaderText = page.locator('.modal-header');
    console.log('contractsCopyLink Validation Of The Copy Link Button AA/AU');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await expect(copyLinkPopup).toBeVisible();
    await expect(copyLinkPopupHeaderText).toBeVisible();
    await expect(copyLinkPopupHeaderText).toHaveText('Copy Contract Link');
    await contractsPage.copyLinkPopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await expect(copyLinkPopup).toBeVisible();
    await expect(copyLinkPopupHeaderText).toBeVisible();
    await expect(copyLinkPopupHeaderText).toHaveText('Copy Contract Link');
});

    //to be refactored
test('validationOfTheCopyLinkButtonSA @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkTooltip = page.locator('.mat-tooltip >> text=Link is copied');
    console.log('contractsCopyLink Validation Of The Copy Link Button SA');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickSA();
    await expect(copyLinkTooltip).toBeVisible();

});

test('elementsInTheCopyContractLinkPopup @regClickTractsMedium @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const userBar = new UserBar(page);
    const permanentLinkSelectedByDefault = page.locator('.mat-radio-button >> nth=0');
    const permanentFieldNotEditable = page.locator('[placeholder="Permanent Contract Link"]');
    const permanentFieldBlock = page.locator('#permanentContractLink');
    const permanentFieldValue = page.locator('#permanentContractLink input');
    const expiringRadioButton = page.locator('.mat-radio-button >> nth=1');
    const cancelButton = page.locator('#copy-link-cancel');
    const xButton = page.locator('#copy-link-cancel-cross');
    const copyLinkButton = page.locator('#copy-link-copy-link');
    const permanentLinkHiddenForAU = page.locator('.container-permanent-contract-link');
    console.log('contractsCopyLink Elements In The Copy Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await expect(permanentLinkSelectedByDefault).toHaveClass('mat-radio-button mat-primary mat-radio-checked');
    await expect(permanentFieldNotEditable).toHaveAttribute('disabled', '');
    await expect(permanentFieldBlock).toBeVisible();
    await expect(permanentFieldValue).toHaveValue('https://signdoc.contractsrx.com/3OWzVyZ');
    await expect(expiringRadioButton).toBeVisible();
    await expect(cancelButton).toBeVisible();
    await expect(xButton).toBeVisible();
    await expect(copyLinkButton).toBeVisible();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await expect(permanentFieldBlock).toBeHidden();
    await contractsPage.copyLinkPopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await expect(permanentLinkSelectedByDefault).toBeHidden();
    await expect(permanentLinkHiddenForAU).toBeHidden();
});

   //to be refactored
test('validationOfTheCopyLinkButtonPermanentLinkPopup @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkPopup = page.locator('.mat-dialog-container');
    const copyLinkPopupHeaderText = page.locator('.modal-header');
    console.log('contractsCopyLink Validation Of The Copy Link Button Permanent Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCopyLinkButtonClick();
    await expect(copyLinkPopup).toBeHidden();
    await expect(copyLinkPopupHeaderText).toBeHidden();
});

test('elementsInTheCopyContractLinkPopupExpiringLink @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const permanentFieldBlock = page.locator('#permanentContractLink');
    const cancelButton = page.locator('#copy-link-cancel');
    const xButton = page.locator('#copy-link-cancel-cross');
    const copyLinkButton = page.locator('#copy-link-copy-link');
    const expirationField = page.locator('#expiringLink');
    const getLink = page.locator('.expiring-date-btn');
    const expirationFieldValue = page.locator('#expiringLink input');
    const getDatePlus2Weeks = Helpers.currentDatePlus2weeks();
    console.log('contractsCopyLink Elements In The Copy Contract Link Popup Expiring Link');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await expect(permanentFieldBlock).toBeHidden();
    await expect(copyLinkButton).toHaveAttribute('disabled', '');
    await expect(expirationField).toBeVisible();
    await expect(getLink).toBeVisible()
    expect(await expirationFieldValue.inputValue()).toEqual(getDatePlus2Weeks);
    await expect(cancelButton).toBeVisible();
    await expect(xButton).toBeVisible();
    await expect(copyLinkButton).toBeVisible();
});

test('validationOfTheCalendarIconExpirationDateFieldCopyLinkPopup @regClickTractsMedium @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const dataPicker = page.locator('.mat-calendar');
    const dataPickerDate = page.locator('.mat-calendar-period-button');
    console.log('contractsCopyLink Validation Of The Calendar Icon Expiration Date Field Copy Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupDataPickerButtonClick();
    await expect(dataPicker).toBeVisible();
    const today = new Date(Date.now() + 12096e5);
    const date = today.toDateString().toUpperCase();
    expect(dataPickerDate).toHaveText(date);
});

test('validationOfTheDataPickerCopyLinkPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const previousButton = page.locator('.mat-calendar-previous-button');
    console.log('contractsCopyLink Validation Of The DataPicker Copy Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupDataPickerButtonClick();
    await expect(previousButton).toBeDisabled();
    await page.click('.mat-calendar-next-button');
    await page.click('.mat-calendar-previous-button');
});

test('validationOfTheGetLinkButtonExpirationDateIsntFilled @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const expirationDateValidation = page.locator('#expiringLink .mat-error');
    const clearExpirationDateField = page.locator('#expiringLink input');
    console.log('contractsCopyLink Validation Of The Get Link Button Expiration Date Isnt Filled');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await clearExpirationDateField.fill('');
    await contractsPage.copyLinkPopupGetLinkButtonClick();
    await expect(expirationDateValidation).toHaveText('Expiring date is required');
});

test('validationOfTheGetLinkButtonExpirationDatePastDate @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const expirationDateValidation = page.locator('#expiringLink .mat-error');
    console.log('contractsCopyLink Validation Of The Get Link Button Expiration Date Past Date');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupExpirtaionDateFieldPastValueFill();
    await contractsPage.copyLinkPopupGetLinkButtonClick();
    await expect(expirationDateValidation).toHaveText('Expiration Date should be in the future');
});

   //to be refactored
test('behaviorGetLinkItemAppliedForExpirationDateCopyContractLinkPopup @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const expiringLink = page.locator('');
    const expiringLinkFormat = page.locator('');
    const expiredMessage = page.locator('text=This link will expire at 11:59 PM (Mountain Time) on the date selected.');
    const copyLinkPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink Behavior Get Link Item Applied For Expiration Date Copy Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupExpirtaionDateFieldPositiveValueFill();
    await contractsPage.copyLinkPopupGetLinkButtonClick();
    //await expect(expiringLink).toBeVisible();
    //await expect(expiringLinkFormat).toContainText('signdoc.contractsrx.com');
    await expect(expiredMessage).toBeVisible();
    await contractsPage.copyLinkPopupCopyLinkButtonClick();
    await expect(copyLinkPopup).toBeHidden();
});

test('notEditingTheExpiringContractLinkFieldCopyContractLinkPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const expiringFieldNotEditable = page.locator('[placeholder="Expiring Contract Link"]');
    console.log('contractsCopyLink Not Editing The Expiring Contract Link Field Copy Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupExpirtaionDateFieldPositiveValueFill();
    await contractsPage.copyLinkPopupGetLinkButtonClick();
    await expect(expiringFieldNotEditable).toHaveAttribute('disabled', '');
});

   //to be refactored
test('validationOfTheCopyLinkButtonExpirationLinkContractLinkPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink Validation Of The Copy Link Button Expiration Link Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupExpiringRadioButtonClick();
    await contractsPage.copyLinkPopupExpirtaionDateFieldPositiveValueFill();
    await contractsPage.copyLinkPopupGetLinkButtonClick();
    await contractsPage.copyLinkPopupCopyLinkButtonClick();
    await expect(copyLinkPopup).toBeHidden();
});

   //to be refactored
test('validationOfTheCancel/XButtonContractLinkPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink Validation Of The Cancel/X Button Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await expect(copyLinkPopup).toBeHidden();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCancelButtonClick();
    await expect(copyLinkPopup).toBeHidden();
});

test('validationOfTheCopyContractLinkPopupContractWithModel @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const contractsPage = new ContractsPage(page);
    const createDealPopup = page.locator('.mat-dialog-container');
    const createDealPopupText = page.locator('.modal-header');
    const createDealPopupCheckbox = page.locator('.mat-checkbox >> nth=1');
    const createDealPopupCheckboxLabel = page.locator('.mat-checkbox-label >> text=Do not show again');
    const createDealPopupCreatreButton = page.locator('.btn >> text=Create');
    const createDealPopupCancelButton = page.locator('.btn >> text=Cancel');
    console.log('contractsCopyLink Validation Of The Copy Contract Link Popup Contract With Model');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100testContract4');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await expect(createDealPopup).toBeVisible();
    await expect(createDealPopupText).toBeVisible();
    await expect(createDealPopupText).toHaveText(' Do you want to create a Deal for this contract? ');
    await expect(createDealPopupCheckbox).toBeVisible();
    await expect(createDealPopupCheckboxLabel).toBeVisible();
    await expect(createDealPopupCreatreButton).toBeVisible();
    await expect(createDealPopupCancelButton).toBeVisible();
    await contractsPage.CopyContractLinkPopupContractWithModelCancelButtonClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCancelButtonClick();
    await expect(createDealPopup).toBeVisible();
    await expect(createDealPopupText).toBeVisible();
    await expect(createDealPopupText).toHaveText(' Do you want to create a Deal for this contract? ');
    await expect(createDealPopupCheckbox).toBeVisible();
    await expect(createDealPopupCheckboxLabel).toBeVisible();
    await expect(createDealPopupCreatreButton).toBeVisible();
    await expect(createDealPopupCancelButton).toBeVisible();
    await contractsPage.CopyContractLinkPopupContractWithModelCancelButtonClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCopyLinkButtonClick();
    await expect(createDealPopup).toBeVisible();
    await expect(createDealPopupText).toBeVisible();
    await expect(createDealPopupText).toHaveText(' Do you want to create a Deal for this contract? ');
    await expect(createDealPopupCheckbox).toBeVisible();
    await expect(createDealPopupCheckboxLabel).toBeVisible();
    await expect(createDealPopupCreatreButton).toBeVisible();
    await expect(createDealPopupCancelButton).toBeVisible();
    await contractsPage.CopyContractLinkPopupContractWithModelCancelButtonClick();
    await search.searchField.fill('test100testContract5');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await expect(createDealPopup).toBeHidden();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCancelButtonClick();
    await expect(createDealPopup).toBeHidden();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCopyLinkButtonClick();
    await expect(createDealPopup).toBeHidden();
});

test('validationOfTheCreateButtonOnTheCreateDealForContractPopup @regClickTractsHigh @contractsCopyLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const contractsPage = new ContractsPage(page);
    const modelFieldDisabled = page.locator('#form-control-model_id .mat-select');
    const modelFieldValue = page.locator('#form-control-model_id .mat-select-value-text');
    const contractNameField = page.locator('#form-control-contract_name .mat-input-element');
    const subsidaryField = page.locator('#form-control-company_name .mat-input-element');
    const nameOfTheOtherPartyField = page.locator('#form-control-name_of_the_other_party .mat-input-element');
    const estimatedValueField = page.locator('#form-control-estimated_value .mat-input-element');
    const overviewField = page.locator('#form-control-description .mat-input-element');
    const notesField = page.locator('#form-control-notes .mat-input-element');
    const crmId = page.locator('#form-control-sf_contract_id .mat-input-element');
    console.log('contractsCopyLink Validation Of The Create Button On The Create Deal For Contract Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100testContract4');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await contractsPage.CopyContractLinkPopupContractWithModelCreateButtonClick();
    await expect(page).toHaveURL('/deals/add-deal?model_id=757&contract_id=3202&account_id=265');
    await expect(modelFieldDisabled).toHaveAttribute('aria-disabled', 'true');
    await expect(modelFieldValue).toHaveText('MODEL cloned 22222');
    await expect(contractNameField).toHaveAttribute('disabled', '');
    await expect(contractNameField).toHaveValue('test100testContract4');
    await expect(subsidaryField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(subsidaryField).toHaveValue('Client 1HT(test)');
    await expect(nameOfTheOtherPartyField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(nameOfTheOtherPartyField).toHaveValue('');
    await expect(estimatedValueField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(estimatedValueField).toHaveValue('');
    await expect(overviewField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(overviewField).toHaveValue('');
    await expect(notesField).not.toHaveAttribute('aria-disabled', 'true');
    await expect(notesField).toHaveValue('');
    await expect(crmId).not.toHaveAttribute('aria-disabled', 'true');
    await expect(crmId).toHaveValue('');
});

test('validationOfTheCreateButtonOnTheCreateDealForContractPopupWithSubscriptionLimits @regClickTractsMedium @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const updateSubscriptionPopup = page.locator('.mat-dialog-container');
    const updateSubscriptionText = page.locator('.modal-header');
    const updateSubscriptionPopupUpdateSubscriptionButton = page.locator('#not-available-popup-update-subscription');
    const updateSubscriptionPopupCloseButton = page.locator('#not-available-popup-close');
    const contactYourAAPopup = page.locator('.mat-dialog-container');
    const contactYourAAPopupText = page.locator('.modal-header');
    const contactYourAAPopupCloseButton = page.locator('#not-available-popup-close');
    console.log('contractsCopyLink Validation Of The Create Button On The Create Deal For Contract Popup With Subscription Limits');
    await users.AASubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await contractsPage.CopyContractLinkPopupContractWithModelCreateButtonClick();
    await expect(updateSubscriptionPopup).toBeVisible();
    await expect(updateSubscriptionText).toHaveText('Please update your subscription to add more deals.');
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toBeVisible();
    await expect(updateSubscriptionPopupUpdateSubscriptionButton).toHaveCSS('background-color', 'rgb(69, 119, 210)')
    await expect(updateSubscriptionPopupCloseButton).toBeVisible();
    await contractsPage.updateSubscriptionPopupCloseButtonClick();
    await expect(updateSubscriptionPopup).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AUSubscriptionLimits();
    await signIn.signInButton();
    await page.waitForURL('/clients/383');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await contractsPage.CopyContractLinkPopupContractWithModelCreateButtonClick();
    await expect(contactYourAAPopup).toBeVisible();
    await expect(contactYourAAPopupText).toHaveText('Please contact your Account Admin to update your subscription and add more deals.');
    await expect(contactYourAAPopupCloseButton).toBeVisible();
    await contractsPage.contactYourAAPopupCloseButtonClick();
    await expect(contactYourAAPopup).toBeHidden();
});

test('validationOfTheDoNotShowAgainCheckboxOnTheCreateDealForContractPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const createDealPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink Validation Of The Do Not Show Again Checkbox On The Create Deal For Contract Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1931');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await contractsPage.CopyContractLinkPopupContractWithModelDoNotShowCheckboxClick();
    await contractsPage.CopyContractLinkPopupContractWithModelCancelButtonClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await expect(createDealPopup).toBeHidden();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheCancelButtonOnTheCreateDealForContractPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const search = new Search(page);
    const createDealPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink Validation Of The Cancel Button On The Create Deal For Contract Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100testContract4');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await contractsPage.CopyContractLinkPopupContractWithModelCancelButtonClick();
    await expect(createDealPopup).toBeHidden();
});

   //to be refactored
test.skip('userCopiesTheURLWithOSStandardToolsContractLinkPopup @regClickTractsLow @contractsCopyLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    const copyLinkPopup = page.locator('.mat-dialog-container');
    console.log('contractsCopyLink User Copies The URL With OS Standard Tools Contract Link Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupXButtonClick();
    await expect(copyLinkPopup).toBeHidden();
    await contractsPage.copyLinkButtonClickAAAU();
    await contractsPage.copyLinkPopupCancelButtonClick();
    await expect(copyLinkPopup).toBeHidden();
});

test('displaying3dotsMenu @regClickTractsLow @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const threeDotsMenu = page.locator('.mat-icon-button >> nth=0');
    console.log('contracts3dotsMenu Displaying 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
    await contractsPage.statusFilterClick();
    await expect(threeDotsMenu).toBeVisible();
});

test('availabilityOfTheEditButton @regClickTractsHigh @contracts3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const editButtonThreeDotsMenu = page.locator('.context-menu-edit');
    console.log('contracts3dotsMenu Availability Of The Edit Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(editButtonThreeDotsMenu).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(editButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(editButtonThreeDotsMenu).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(editButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(editButtonThreeDotsMenu).toBeHidden();
});

test('validationOfTheEditButton @regClickTractsHigh @contracts3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractsPage = new ContractsPage(page);
    console.log('contracts3dotsMenu Validation Of The Edit Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuEditButtonClick();
    expect(page.url()).toContain('/contract/edit/');
});

test('availabilityOfTheDeleteButton @regClickTractsLow @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const deleteButtonThreeDotsMenu = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Validation Of The Delete Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButtonThreeDotsMenu).toBeHidden();
});

test('availabilityDeleteButtonOfContractWhichUrlWasAddedToAnother @regClickTractsHigh @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Expiring Url Was Added To Another');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1864');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3nOAlvK');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await search.searchField.fill('test100testContract6');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeHidden();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('availabilityDeleteButtonOfContractWhichExpiringUrlWasAddedToAnother @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Expiring Url Was Added To Another');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1864');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3AydCeT');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await search.searchField.fill('test100testContract6');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeVisible();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('availabilityDeleteButtonOfContractWhichUrlWasAddedToAnotherWhichWasDeleted @regClickTractsHigh @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Url Was Added To Another Which Was Deleted');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1864');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3nOAlvK');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
    await search.searchField.fill('test100testContract6');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeVisible();
});

test('availabilityDeleteButtonOfContractWhichUrlWasAddedToAnotherSharedTemplateSA @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Expiring Url Was Added To Another Shared Template SA');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2026');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3nOAlvK');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await search.searchField.fill('test100testContract6');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeHidden();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('availabilityDeleteButtonOfContractWhichUrlWasAddedToAnotherOfAnotherClientSharedTemplateSA @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const userBar = new UserBar(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Expiring Url Was Added To Another Of Another Client Shared Template SA');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2026');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3PgcC3d');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await signIn.email.fill('alexey.banshykov@mobindustry.net');
    await signIn.password.fill('Qwerty123!');
    await signIn.signinButton.click();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100TestDoNotRemoveContract');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('availabilityDeleteButtonOfContractWhichUrlWasAddedToAnotherOfAnotherClient @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const userBar = new UserBar(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const newContract = new NewEditContractPage(page);
    const contractsPage = new ContractsPage(page);
    const deleteButton = page.locator('.context-menu-delete');
    console.log('contracts3dotsMenu Availability Delete Button Of Contract Which Expiring Url Was Added To Another Of Another Client');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1864');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorVariableValue0Click();
    await newContract.configuratorVariableValueOption0.fill('https://signdoc.contractsrx.com/3PgcC3d');
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await signIn.email.fill('alexey.banshykov@mobindustry.net');
    await signIn.password.fill('Qwerty123!');
    await signIn.signinButton.click();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100TestDoNotRemoveContract');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(deleteButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheDeleteButton @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const deletePopup = page.locator('.mat-dialog-container');
    const deletePopupText = page.locator('.modal-header');
    const deletePopupCancelButton = page.locator('.mat-button >> text=Cancel');
    const deletePopupDeleteButton = page.locator('.mat-button >> text=Delete');
    console.log('contracts3dotsMenu Validation Of The Delete Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.signaturesFilterClick();
    await contractsPage.signaturesFilterClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText('Are you sure you want to delete this contract?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await contractsPage.threeDotsMenuDeletePopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.signaturesFilterClick();
    await contractsPage.signaturesFilterClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText('Are you sure you want to delete this contract?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await contractsPage.threeDotsMenuDeletePopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.signaturesFilterClick();
    await contractsPage.signaturesFilterClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopup).toBeVisible();
    await expect(deletePopupText).toBeVisible();
    await expect(deletePopupText).toHaveText('Are you sure you want to delete this contract?');
    await expect(deletePopupCancelButton).toBeVisible();
    await expect(deletePopupDeleteButton).toBeVisible();
    await contractsPage.threeDotsMenuDeletePopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
});

test('validationOfTheDeleteButtonOnTheDeletePopup @regClickTractsHigh @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const deletePopup = page.locator('.mat-dialog-container');
    const deletedContract = page.locator('.contracts-name-column-link >> nth=0');
    console.log('contracts3dotsMenu Validation Of The Delete Button On The Delete Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1566');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.saveButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(deletedContract).not.toContainText('autotest');
    await page.goto('/contract/create/1566');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(deletedContract).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/1566');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
    await expect(deletePopup).toBeHidden();
    await expect(deletedContract).not.toContainText('autotest');
});

test('validationOfTheDeleteButtonContractWithDeal @regClickTractsHigh @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const contractsPage = new ContractsPage(page);
    const contractCannotBeDeletedPopup = page.locator('.mat-dialog-container');
    const contractCannotBeDeletedPopupText = page.locator('.modal-header');
    const contractCannotBeDeletedPopupOkButton = page.locator('.btn >> text=OK');
    console.log('contracts3dotsMenu Validation Of The Delete Button ContractWithDeal');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await search.searchField.fill('test100testContract5');
    await search.searchButtonClick();
    await search.contractToggleClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await expect(contractCannotBeDeletedPopup).toBeVisible();
    await expect(contractCannotBeDeletedPopupText).toHaveText(' This Contract can not be deleted because of attached Deal.');
    await expect(contractCannotBeDeletedPopupOkButton).toBeVisible();
    await page.locator('.btn >> text=OK').click();
    await expect(contractCannotBeDeletedPopup).toBeHidden();
});

test('availibilityOfTheDisableSignaturesButton @regClickTractsMedium @contracts3dotsMenu', async ({ page,browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const contractsPage = new ContractsPage(page);
    const disableSingatureButton = page.locator('.context-menu-disable-signature');
    console.log('contracts3dotsMenu Availibility Of The Disable Signatures Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.statusFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.signaturesFilterClick();
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
});

test('notDisplayingTheDisableSignaturesButtonCheckboxVariable @regClickTractsMedium @contracts3dotsMenu', async ({ page,browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const disableSingatureButton = page.locator('.context-menu-disable-signature');
    console.log('contracts3dotsMenu Not Displaying The Disable Signatures Button Checkbox Variable');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1624');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSingatureButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheDisableSignaturesButton @regClickTractsHigh @contracts3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const greyText = page.locator('.contracts-name-column-link >> nth=0');
    const enableSignaturesButton = page.locator('.context-menu-enable-signature');
    console.log('contracts3dotsMenu Validation Of The Disable Signatures Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1570');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDisableSignaturesButtonClick();
    await expect(greyText).toHaveClass('td__link contracts-name-column-link text-gray');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(enableSignaturesButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheEnableSignaturesButton @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const greyText = page.locator('.contracts-name-column-link >> nth=0');
    const disableSignaturesButton = page.locator('.context-menu-disable-signature');
    console.log('contracts3dotsMenu Validation Of The Enable Signatures Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1566');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.contractFeeValueChoose();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDisableSignaturesButtonClick();
    await page.waitForTimeout(1000);
    await contractsPage.threeDotsMenuEnableSignaturesButtonClick();
    await expect(greyText).toHaveClass('td__link contracts-name-column-link');
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disableSignaturesButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('availabilityOfTheDisablePayTractsButton @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const disablePaytracts = page.locator('.context-menu-disable-paytracts');
    console.log('contracts3dotsMenu Availability Of The Disable PayTracts Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1566');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.saveButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disablePaytracts).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
    await page.goto('/contract-template/1566');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disablePaytracts).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheDisablePayTractsButton @regClickTractsMedium @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const disablePaytractsPopup = page.locator('.mat-dialog-container');
    const disablePaytractsPopupText1 = page.locator('.modal-header');
    const disablePaytractsPopupText2 = page.locator('text=Users will no longer be able to pay for the contract using PayTracts.');
    const disablePaytractsPopupDoneButton = page.locator('.mat-raised-button');
    const disablePaytractsPopupCancelButton = page.locator('.btn-cancel');
    const disablePaytractsPopupXButton = page.locator('.close-button');
    console.log('contracts3dotsMenu Validation Of The Disable PayTracts Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1566');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDisablePaytractsButtonClick();
    await expect(disablePaytractsPopup).toBeVisible();
    await expect(disablePaytractsPopupText1).toBeVisible();
    await expect(disablePaytractsPopupText1).toHaveText(' Do you really want to disable PayTracts for this contract? ');
    await expect(disablePaytractsPopupText2).toBeVisible();
    await expect(disablePaytractsPopupDoneButton).toBeVisible();
    await expect(disablePaytractsPopupCancelButton).toBeVisible();
    await expect(disablePaytractsPopupXButton).toBeVisible();
    await contractsPage.threeDotsMenuDisablePaytractsPopupCancelButtonClick();
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});

test('validationOfTheDoneButtonOnTheDisablePayTractsPopup @regClickTractsHigh @contracts3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const contractsPage = new ContractsPage(page);
    const newContract = new NewEditContractPage(page);
    const disablePaytracts = page.locator('.context-menu-disable-paytracts');
    console.log('contracts3dotsMenu Validation Of The Done Button On The Disable PayTracts Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/1566');
    await viewTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto('/contracts/list?&sort=-created_at');
    await contractsPage.rightArrowClick();
    await contractsPage.threeDotsMenuDisablePaytractsButtonClick();
    await contractsPage.threeDotsMenuDisablePaytractsPopupDoneButtonClick();
    await contractsPage.threeDotsMenuButtonClick();
    await expect(disablePaytracts).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await contractsPage.threeDotsMenuDeleteButtonClick();
    await contractsPage.threeDotsMenuDeletePopupDeleteButtonClick();
});