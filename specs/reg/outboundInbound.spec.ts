import { test , expect, webkit, chromium, Browser, BrowserContext, Page } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { Search } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { Pagination } from '../../framework'
import { NewEditContractPage } from '../../framework'
import { ViewContract } from '../../framework'
import { OutboundInboundPage } from '../../framework'
import { EndUserPage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'




test.beforeEach(async ({ page }, testInfo) => {
    await page.goto('');
});

test('openingByDefaultTheOutbondContractsTab @regClickTractsMedium @outboundInbound', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sidebar = new SideBar(page);
    const outboundContracts = page.locator('#signed-users-list-outbound-contracts-button');
    const inboundContracts = page.locator('#signed-users-list-inbound-contracts-button');
    const contractCreatorFilter = page.locator('#contract-creator-column-sort');
    console.log('outboundContracts Opening By Default The Outbond Contracts Tab');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await sidebar.clickTractsSignaturesClick();
    await expect(outboundContracts).toHaveAttribute('aria-pressed', 'true');
    await expect(inboundContracts).toHaveAttribute('aria-pressed', 'false');
    await expect(contractCreatorFilter).toBeHidden();
});

test('displayingSinatoriesInfoSigningWhoHasAccount @regClickTractsHigh @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const dateAndTimeColumn = page.locator('.mat-column-created_at >> nth=1');
    const companyColumn = page.locator('.company-column-link >> nth=0');
    const contractCreatorColumn = page.locator('.contract-creator-column-link >> nth=0');
    const clientColumn = page.locator('.client-column-link >> nth=0');
    const contractColumn = page.locator('.contract-column-link >> nth=0');
    const signatoryColumn = page.locator('.mat-column-name >> nth=1');
    const emailColumn = page.locator('.mat-column-email >> nth=1');
    console.log('outboundContracts Displaying Sinatories Info Signing Who Has Account');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(contractCreatorColumn).toContainText('AAForSignatures...');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('AAForSignatures Inbound ');
    await expect(emailColumn).toContainText(' aaforsignaturesinbound@maildrop.cc ');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(companyColumn).toContainText('AAForSignaturesInbound');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('AAForSignatures Inbound ');
    await expect(emailColumn).toContainText(' aaforsignaturesinbound@maildrop.cc ');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(clientColumn).toContainText('AAForSignatures... ');
    await expect(companyColumn).toContainText('AAForSignaturesInbound');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('AAForSignatures Inbound ');
    await expect(emailColumn).toContainText(' aaforsignaturesinbound@maildrop.cc ');
    await signaturePage.inboundToggleClick();
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(clientColumn).toContainText('AAForSignatures... ');
    await expect(contractCreatorColumn).toContainText('AAForSignatures...');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('AAForSignatures Inbound ');
    await expect(emailColumn).toContainText(' aaforsignaturesinbound@maildrop.cc ');
});

test('displayingSinatoriesInfoSigningWhoDoesntHaveAccount @regClickTractsHigh @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const endUser = new EndUserPage(page);
    const dateAndTimeColumn = page.locator('.mat-column-created_at >> nth=1');
    const companyColumn = page.locator('.company-column-link >> nth=0');
    const clientColumn = page.locator('.client-column-link >> nth=0');
    const contractColumn = page.locator('.contract-column-link >> nth=0');
    const signatoryColumn = page.locator('.mat-column-name >> nth=1');
    const emailColumn = page.locator('.mat-column-email >> nth=1');
    console.log('outboundContracts Displaying Sinatories Info Signing Who Dosent Have Account');
    await page.goto('https://signdoc.contractsrx.com/3qJla8t');
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(companyColumn).toContainText('autotest');
    await expect(contractColumn).toContainText(' test100testSignersOutboundWithoutPaytractsContract ');
    await expect(signatoryColumn).toContainText('autotest');
    await expect(emailColumn).toContainText('autotest');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(clientColumn).toContainText('AAForSignatures... ');
    await expect(companyColumn).toContainText('autotest');
    await expect(contractColumn).toContainText(' test100testSignersOutboundWithoutPaytractsContract ');
    await expect(signatoryColumn).toContainText('autotest');
    await expect(emailColumn).toContainText('autotest');
});

test('displayingSinatoriesInfoSigningWhoHasAccountButSignedOnBehalfRegistered @regClickTractsHigh', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const dateAndTimeColumn = page.locator('.mat-column-created_at >> nth=1');
    const companyColumn = page.locator('.company-column-link >> nth=0');
    const clientColumn = page.locator('.client-column-link >> nth=0');
    const contractColumn = page.locator('.contract-column-link >> nth=0');
    const signatoryColumn = page.locator('.mat-column-name >> nth=1');
    const emailColumn = page.locator('.mat-column-email >> nth=1');
    console.log('outboundContracts Displaying Sinatories Info Signing Who Has Account But Signed On Behalf Registered');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkValue);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForSignaturesInbound');
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(companyColumn).toContainText('AAForSignaturesInbound');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('autotest');
    await expect(emailColumn).toContainText('autotest');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(clientColumn).toContainText('AAForSignatures... ');
    await expect(companyColumn).toContainText('AAForSignaturesInbound');
    await expect(contractColumn).toContainText('autotest');
    await expect(signatoryColumn).toContainText('autotest');
    await expect(emailColumn).toContainText('autotest');
});



test('displayingTheContractTimelineButton @regClickTractsMedium @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const contractTimlineButton = page.locator('#signature-list-contracts-timeline');
    console.log('outboundContracts Displaying The Contract Timeline Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(contractTimlineButton).toBeVisible();
    await expect(contractTimlineButton).toHaveCSS('color', 'rgb(69, 119, 210)');
});

test('validationOfTheContractTimelineButton @regClickTractsHigh @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const signaturesPage = new OutboundInboundPage(page);
    const pageTitle = page.locator('.section__title');
    const historyText = page.locator('.card__title');
    const withText = page.locator('.card__small-text');
    const companyNameField = page.locator('.select-party');
    console.log('outboundContracts Validation Of The Contract Timeline Button');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturesPage.contractsTimelineButtonClick();
    await expect(page).toHaveURL('/signed-users/timeline');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('All signatures > Contracts Timeline ');
    await expect(historyText).toBeVisible();
    await expect(historyText).toHaveText('History');
    await expect(withText).toBeVisible();
    await expect(withText).toHaveText('with');
    await expect(companyNameField).toBeVisible();
    await expect(companyNameField).toContainText('AAForSignaturesInbound');
});

test('displayingTheCorrectInfoForDateAndTimeColumn @regClickTractsHigh @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sidebar = new SideBar(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const dateAndTimeColumn = page.locator('.mat-column-created_at >> nth=1');
    console.log('outboundContracts Displaying The Correct Info For Date And Time Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateAndTimeForSignatures());
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateForSignatures());
    await expect(dateAndTimeColumn).toContainText(Helpers.currentDateAndTimeForSignatures());
});

test('displayingClientNameColumn @regClickTractsLow @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const search = new Search(page);
    const userBar = new UserBar(page);
    const clientColumn = page.locator('.mat-column-account >> nth=0');
    const clientColumnValue = page.locator('.client-column-link >> nth=0');
    const clientColumnValueSearch = page.locator('.mat-column-account >> nth=1');
    console.log('outboundContracts Displaying Client Name Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(clientColumn).toBeVisible();
    await expect(clientColumnValue).toBeVisible();
    await expect(clientColumnValue).toContainText('AAForSignatures... ');
    await expect(clientColumnValue).toHaveAttribute('href', '/clients/404');
    await search.searchButtonClick();
    await search.signatureToggleClick();
    await expect(clientColumn).toBeVisible();
    await expect(clientColumnValueSearch).toBeVisible();
    await expect(clientColumnValueSearch).toContainText('AAForSignatures... ');
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(clientColumn).toBeHidden();
    await userBar.logOutAction();
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(clientColumn).toBeHidden();
});

test('validationOfTheClientName @regClickTractsMedium @outboundInbound', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const pageTitle = page.locator('.section__title');
    const clientColumnValue = page.locator('.client-column-link >> nth=0');
    const editButton = page.locator('#client-view-edit');
    console.log('outboundContracts Validation Of The Client Name');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await clientColumnValue.click();
    await expect(page).toHaveURL('/clients/404');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('AAForSignaturesOutbound');
    await expect(editButton).toBeVisible();
});

test('companyNameInTheCompanyColumn @regClickTractsMedium @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const companyColumn = page.locator('.company-column-link >> nth=0');
    const companyColumnValue = page.locator('.company-column-link >> nth=0');
    const tooltip = page.locator('.popup-informer__content >> nth=0');
    console.log('outboundContracts Company Name In The Company Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(companyColumn).toBeVisible();
    await expect(companyColumnValue).toBeVisible();
    await expect(companyColumnValue).toHaveText('AAForSignaturesInbound');
    await expect(companyColumnValue).toHaveAttribute('href', '/signed-users/timeline/AAForSignaturesInbound');
    await companyColumnValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toContainText('autotest');
});

test('validationOfTheCompanyNameColumn @regClickTractsHigh @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const companyColumnValue = page.locator('.company-column-link >> nth=0');
    const pageTitle = page.locator('.section__title');
    console.log('outboundContracts Validation Of The Company Name Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(companyColumnValue).toHaveAttribute('href', '/signed-users/timeline/AAForSignaturesInbound');
    await companyColumnValue.click();
    await expect(page).toHaveURL('/signed-users/timeline/AAForSignaturesInbound');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('All signatures > Contracts Timeline ');
});

test('displayingThePaymentColumn @regClickTractsMedium @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const paymentColumn = page.locator('.mat-column-paytracts_status >> nth=0');
    const paymentColumnValue = page.locator('.mat-column-paytracts_status >> nth=1');
    const tooltip = page.locator('.mat-tooltip');
    console.log('outboundContracts Displaying The Payment Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue1 = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue1);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(paymentColumnValue).toBeVisible();
    await expect(paymentColumnValue).toHaveText(' Pending ');
    await signaturePage.threeDotsMenuManualPaymentButtonClick();
    await signaturePage.threeDotsMenuManualPaymentPopupConfirmCheckboxClick();
    await signaturePage.threeDotsMenuManualPaymentPopupContractPaidButtonClick();
    await expect(paymentColumnValue).toBeVisible();
    await expect(paymentColumnValue).toHaveText(' Manual ');
    await paymentColumnValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Confirmed by: AAForSignatures Outbound');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue2 = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue2);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(paymentColumnValue).toBeVisible();
    await expect(paymentColumnValue).toHaveText(' 99 USD ');
    await page.goto('/contract/create/2481');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(paymentColumn).toBeVisible();
    await expect(paymentColumnValue).toBeVisible();
    await expect(paymentColumnValue).toHaveText(' - ');
});

test('validationOfTheContractColumn @regClickTractsHigh @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    const contractColumn = page.locator('.contract-column-link >> nth=0');
    const contractColumnValue = page.locator('.contract-column-link >> nth=0');
    const tooltip = page.locator('.mat-tooltip');
    console.log('outboundContracts Validation Of The Contract Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(contractColumn).toBeVisible();
    await expect(contractColumnValue).toBeVisible();
    await expect(contractColumnValue).toContainText('autotest');
    const getLinkAttribute = await contractColumnValue.getAttribute('href');
    await expect(getLinkAttribute).toContain('https://terms.test.noredlines.com/contract/');
    await contractColumnValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toContainText('autotest');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(contractColumn).toBeVisible();
    await expect(contractColumnValue).toBeVisible();
    await expect(contractColumnValue).toContainText('autotest');
    const getLinkAttribute1 = await contractColumnValue.getAttribute('href');
    await expect(getLinkAttribute1).toContain('https://terms.test.noredlines.com/contract/');
    await contractColumnValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toContainText('autotest');
});

test('displayingDescriptionInformation @regClickTractsLow @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    const descriptionColumn = page.locator('.mat-column-description >> nth=0');
    const descriptionColumnValue = page.locator('.mat-column-description >> nth=1');
    console.log('outboundContracts Displaying Description Information');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(descriptionColumn).toBeVisible();
    await expect(descriptionColumnValue).toBeVisible();
    await expect(descriptionColumnValue).toContainText('autotest');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(descriptionColumn).toBeVisible();
    await expect(descriptionColumnValue).toBeVisible();
    await expect(descriptionColumnValue).toContainText('autotest');
});

test('displayingTheSignatoryColumn @regClickTractsHigh @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    const signatoryColumn = page.locator('.mat-column-name >> nth=0');
    const signatoryColumnValue = page.locator('.mat-column-name >> nth=1');
    console.log('outboundContracts Displaying The Signatory Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(signatoryColumn).toBeVisible();
    await expect(signatoryColumnValue).toBeVisible();
    await expect(signatoryColumnValue).toContainText('AAForSignatures Inbound ');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(signatoryColumn).toBeVisible();
    await expect(signatoryColumnValue).toBeVisible();
    await expect(signatoryColumnValue).toContainText('AAForSignatures Inbound ');
});

test('displayingTheEmailColumn @regClickTractsLow @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    const emailColumn = page.locator('.mat-column-email >> nth=0');
    const emailColumnValue = page.locator('.mat-column-email >> nth=1');
    console.log('outboundContracts Displaying The Email Column');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await expect(emailColumn).toBeVisible();
    await expect(emailColumnValue).toBeVisible();
    await expect(emailColumnValue).toContainText(' aaforsignaturesinbound@maildrop.cc ');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(emailColumn).toBeVisible();
    await expect(emailColumnValue).toBeVisible();
    await expect(emailColumnValue).toContainText(' aaforsignaturesinbound@maildrop.cc ');
});

test('sortingByAllColumns @regClickTractsLow @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    console.log('outboundContracts Sorting By All Columns');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.dateAndTimeFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=created_at');
    await signaturePage.dateAndTimeFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-created_at');
    await signaturePage.companyFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-company_name');
    await signaturePage.companyFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=company_name');
    await signaturePage.paymentFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-paytracts_status');
    await signaturePage.paymentFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=paytracts_status');
    await signaturePage.contractFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-contract.title');
    await signaturePage.contractFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=contract.title');
    await signaturePage.descriptionFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-description');
    await signaturePage.descriptionFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=description');
    await signaturePage.emailFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-email');
    await signaturePage.emailFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=email');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.dateAndTimeFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=created_at');
    await signaturePage.dateAndTimeFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-created_at');
    await signaturePage.contractCreatorFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-account.name');
    await signaturePage.contractCreatorFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=account.name');
    await signaturePage.paymentFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-paytracts_status');
    await signaturePage.paymentFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=paytracts_status');
    await signaturePage.contractFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-contract.title');
    await signaturePage.contractFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=contract.title');
    await signaturePage.descriptionFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-description');
    await signaturePage.descriptionFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=description');
    await signaturePage.emailFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-email');
    await signaturePage.emailFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=email');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.clientFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-account.name');
    await signaturePage.clientFilterClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=account.name');
    await signaturePage.inboundToggleClick();
    await signaturePage.clientFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-accountSign.name');
    await signaturePage.clientFilterClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=accountSign.name');
});

test('paginationOnTheSignaturesPage @regClickTractsMedium @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const signaturePage = new OutboundInboundPage(page);
    const pagination = new Pagination(page);
    console.log('outboundContracts Pagination On The Signatures Page');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await pagination.paginationLastPageClick();
    const lastPageReturnValue = await page.url();
    await expect(page).toHaveURL(lastPageReturnValue);
    await pagination.paginationPrevPageClick();
    const prevPageReturnValue = await page.url();
    await expect(page).toHaveURL(prevPageReturnValue);
    await pagination.paginationFirstPageClick();
    await expect(page).toHaveURL('/signed-users/list?&sort=-created_at');
    await pagination.paginationPage2Click();
    await expect(page).toHaveURL('/signed-users/list?page=2&sort=-created_at');
    await pagination.paginationPage1Click();
    await expect(page).toHaveURL('/signed-users/list?&sort=-created_at');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await pagination.paginationLastPageClick();
    const lastPageReturnValue1 = await page.url();
    await expect(page).toHaveURL(lastPageReturnValue1);
    await pagination.paginationPrevPageClick();
    const prevPageReturnValue1 = await page.url();
    await expect(page).toHaveURL(prevPageReturnValue1);
    await pagination.paginationFirstPageClick();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-created_at');
    await pagination.paginationPage2Click();
    await expect(page).toHaveURL('/signed-users/my-list?page=2&sort=-created_at');
    await pagination.paginationPage1Click();
    await expect(page).toHaveURL('/signed-users/my-list?&sort=-created_at');
});

test('displaying3dotsMenuFirstOpenedByInfoSignedByInfo @regClickTractsMedium @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const firstOpened = page.locator('.context-menu-first-opened-by');
    const signedBy = page.locator('.context-menu-signed-by');
    const resendLink = page.locator('.context-menu-resend-payment-link');
    const manualPayment = page.locator('.context-menu-manual-payment');
    const payFee = page.locator('.context-menu-pay-contract-fee');
    const paidAtInbound = page.locator('.context-menu-paid_at');
    const paidAtOutbaund = page.locator('.context-menu-paid-at');
    console.log('outboundContracts Displaying 3dots Menu First Opened By Info Signed By Info');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(firstOpened).toBeVisible();
    await expect(firstOpened).toHaveText('First opened by: AAForSignatures Inbound ');
    await expect(signedBy).toBeVisible();
    await expect(signedBy).toHaveText('Signed by: AAForSignatures Inbound ');
    await expect(manualPayment).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await signaturePage.paymentFilterClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(resendLink).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(firstOpened).toBeVisible();
    await expect(firstOpened).toHaveText('First opened by: AAForSignatures Inbound ');
    await expect(signedBy).toBeVisible();
    await expect(signedBy).toHaveText('Signed by: AAForSignatures Inbound ');
    await signaturePage.threeDotsMenuClose();
    await signaturePage.paymentFilterClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(payFee).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await page.goto(permanentLinkValue);
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtInbound).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtOutbaund).toBeVisible();
});

test('validationOfTheManualPayment @regClickTractsHigh @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const manualPayment = page.locator('.context-menu-manual-payment');
    const manualPaymentPopup = page.locator('.mat-dialog-container');
    const manualPaymentPopupContactPaidButton = page.locator('#manual-payment-contract-paid');
    const paymentColumnValue = page.locator('.mat-column-paytracts_status >> nth=1');
    const paidAtOutbaund = page.locator('.context-menu-paid-at');
    const paidAtInbound = page.locator('.context-menu-paid_at');
    const payFee = page.locator('.context-menu-pay-contract-fee');
    console.log('outboundContracts Validation Of The Manual Payment');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeVisible();
    await manualPayment.click();
    await expect(manualPaymentPopup).toBeVisible();
    await signaturePage.threeDotsMenuManualPaymentPopupConfirmCheckboxClick();
    await expect(manualPaymentPopupContactPaidButton).not.toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await expect(manualPaymentPopupContactPaidButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await signaturePage.threeDotsMenuManualPaymentPopupContractPaidButtonClick();
    await expect(manualPaymentPopup).toBeHidden();
    await expect(paymentColumnValue).toHaveText(' Manual ');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeHidden();
    await expect(paidAtOutbaund).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(paymentColumnValue).toHaveText(' 0  ');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtInbound).toBeVisible();
    await expect(payFee).toBeHidden();
});

test('displayingCorrectInfoInConfirmStatusPopupValidationOfCancelButton @regClickTractsLow @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const manualPayment = page.locator('.context-menu-manual-payment');
    const manualPaymentPopup = page.locator('.mat-dialog-container');
    const manualPaymentPopupText = page.locator('.modal-header');
    const manualPaymentPopupCheckbox = page.locator('[for="manual-payment-confirm-input"]');
    const manualPaymentPopupContactPaidButton = page.locator('#manual-payment-contract-paid');
    const manualPaymentPopupCancelButton = page.locator('#manual-payment-cancel');
    const paymentColumnValue = page.locator('.mat-column-paytracts_status >> nth=1');
    const paidAtInbound = page.locator('.context-menu-paid_at');
    const paidAtOutbaund = page.locator('.context-menu-paid-at');
    const pageTitle = page.locator('.section__title');
    console.log('outboundContracts Displaying Correct Info In Confirm Status Popup Validation Of Cancel Button');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await manualPayment.click();
    await expect(manualPaymentPopupText).toBeVisible();
    await expect(manualPaymentPopupText).toContainText('Do you wish to confirm that AAForSignaturesInbound has successfully paid for the autotest');
    await expect(manualPaymentPopupText).toContainText('contract?');
    await expect(manualPaymentPopupCheckbox).toBeVisible();
    await expect(manualPaymentPopupCheckbox).toHaveText('Click to Confirm Manual Payment');
    await expect(manualPaymentPopupContactPaidButton).toBeVisible();
    await expect(manualPaymentPopupCancelButton).toBeVisible();
    await expect(manualPaymentPopupContactPaidButton).toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await expect(manualPaymentPopupContactPaidButton).not.toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await signaturePage.threeDotsMenuManualPaymentPopupConfirmCheckboxClick();
    await expect(manualPaymentPopupContactPaidButton).not.toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await expect(manualPaymentPopupContactPaidButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await signaturePage.threeDotsMenuManualPaymentPopupConfirmCheckboxClick();
    await expect(manualPaymentPopupContactPaidButton).toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await expect(manualPaymentPopupContactPaidButton).not.toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await signaturePage.threeDotsMenuManualPaymentPopupCancelButtonClick();
    await expect(manualPaymentPopup).toBeHidden();
    await expect(paymentColumnValue).toHaveText(' Pending ');
    await expect(page).toHaveURL('/signed-users/list?&sort=-created_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Signatures (On ContractsRx)');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeVisible();
    await expect(paidAtOutbaund).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(paymentColumnValue).toHaveText(' Pending ');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtInbound).toBeHidden();
});

test('disappearingTheManualPaymentButton @regClickTractsMedium @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const manualPayment = page.locator('.context-menu-manual-payment');
    const paidAtInbound = page.locator('.context-menu-paid_at');
    const paidAtOutbaund = page.locator('.context-menu-paid-at');
    console.log('outboundContracts Disappearing The Manual Payment Button');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await manualPayment.click();
    await signaturePage.threeDotsMenuManualPaymentPopupConfirmCheckboxClick();
    await signaturePage.threeDotsMenuManualPaymentPopupContractPaidButtonClick();
    await page.waitForTimeout(2000);
    await signaturePage.threeDotsMenuButtonClick();
    await expect(manualPayment).toBeHidden();
    await expect(paidAtOutbaund).toBeVisible();
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtInbound).toBeVisible();
});

test('displayingPaidAtInformation @regClickTractsMedium @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const paidAtInbound = page.locator('.context-menu-paid_at');
    const paidAtOutbaund = page.locator('.context-menu-paid-at');
    console.log('outboundContracts Displaying Paid At Information');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();   
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtInbound).toHaveText('Paid at:' + Helpers.currentDateAndTimeForSignatures());
    await signaturePage.threeDotsMenuClose();
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(paidAtOutbaund).toHaveText('Paid at:' + Helpers.currentDateAndTimeForSignatures());
});

test('resendPaymentLinkButton @regClickTractsHigh @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const resendLink = page.locator('.context-menu-resend-payment-link');
    console.log('outboundContracts Resend Payment Link Button');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();   
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await page.goto('');
    await userBar.logOutAction();
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.threeDotsMenuButtonClick();
    await expect(resendLink).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await signaturePage.paymentFilterClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(resendLink).toBeVisible();
});

test('displayingCorrectInfoInTheInbound @regClickTractsHigh @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const headerRow = page.locator('.mat-header-row');
    const row0 = page.locator('.mat-row >> nth=0');
    const row1 = page.locator('.mat-row >> nth=1');
    const row2 = page.locator('.mat-row >> nth=2');
    const row3 = page.locator('.mat-row >> nth=3');
    const row4 = page.locator('.mat-row >> nth=4');
    const row5 = page.locator('.mat-row >> nth=5');
    const row6 = page.locator('.mat-row >> nth=6');
    const row7 = page.locator('.mat-row >> nth=7');
    const row8 = page.locator('.mat-row >> nth=8');
    const row9 = page.locator('.mat-row >> nth=9');
    console.log('outboundContracts Displaying Correct Info In The Inbound');
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(headerRow).toBeVisible();
    await expect(row0).toBeVisible();
    await expect(row1).toBeVisible();
    await expect(row2).toBeVisible();
    await expect(row3).toBeVisible();
    await expect(row4).toBeVisible();
    await expect(row5).toBeVisible();
    await expect(row6).toBeVisible();
    await expect(row7).toBeVisible();
    await expect(row8).toBeVisible();
    await expect(row9).toBeVisible();
});

test('contractCreatorColumnForAA/SA @regClickTractsMedium @outboundInbound', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const sidebar = new SideBar(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const pageTitle = page.locator('.section__title');
    const contractCreatorColumn = page.locator('.mat-column-contract_creator >> nth=0');
    const contractCreatorColumnValue = page.locator('.contract-creator-column-link >> nth=0');
    console.log('outboundContracts Contract Creator Column For AA/SA');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();   
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(contractCreatorColumn).toBeVisible();
    await expect(contractCreatorColumnValue).toBeVisible();
    await expect(contractCreatorColumnValue).toHaveText('AAForSignatures...');
    await expect(contractCreatorColumnValue).toHaveAttribute('href', '/signed-users/timeline/AAForSignaturesOutbound');
    await contractCreatorColumnValue.click();
    await expect(page).toHaveURL('/signed-users/timeline/AAForSignaturesOutbound');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('All signatures > Contracts Timeline ');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await expect(contractCreatorColumn).toBeVisible();
    await expect(contractCreatorColumnValue).toBeVisible();
    await expect(contractCreatorColumnValue).toHaveText('AAForSignatures...');
    await expect(contractCreatorColumnValue).toHaveAttribute('href', '/signed-users/timeline/AAForSignaturesInbound/404?clicktracts=true');
    await contractCreatorColumnValue.click();
    await expect(page).toHaveURL('/signed-users/timeline/AAForSignaturesInbound/404?clicktracts=true');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('All signatures > Contracts Timeline ');
});

test('displayingPayContractFee @regClickTractsHigh @outboundInbound @3dotsMenu', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const signaturePage = new OutboundInboundPage(page);
    const payFee = page.locator('.context-menu-pay-contract-fee');
    console.log('outboundContracts Displaying Pay Contract Fee');
    await users.AAForSignaturesOutbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract/create/2480');
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    const permanentLinkValue = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkValue);
    await endUser.addressFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('/signed-users/list?&sort=-created_at');
    await signaturePage.inboundToggleClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(payFee).toBeHidden();
    await signaturePage.threeDotsMenuClose();
    await signaturePage.paymentFilterClick();
    await signaturePage.threeDotsMenuButtonClick();
    await expect(payFee).toBeVisible();
    const [page2] = await Promise.all([
        page.waitForEvent('popup'),
        await payFee.click()
      ]);
    await page2.waitForSelector('.SubmitButton');
    await expect(page2.url()).toContain('https://checkout.stripe.com/c/pay/');
    await expect(page2.locator('#email')).toBeVisible();
    await expect(page2.locator('.SubmitButton')).toBeVisible();
});