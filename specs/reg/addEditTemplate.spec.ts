import { test , expect, webkit, chromium, Browser, BrowserContext, Page } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { Search } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { TemplatesPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { ViewTemplatePage } from '../../framework'
import { ContractsPage } from '../../framework'
import { NewEditContractPage } from '../../framework'
import { ViewContract } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'

test.beforeEach(async ({ page }, testInfo) => {
    await page.goto('');
});

test('validationOfTheSaveButton @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const saveButton = page.locator('#template-detail-save');
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableValidationError = page.locator('.variables-list-form-control-option-value .mat-error >> nth=0');
    const pageTitle = page.locator('.section__title');
    const optionField = page.locator('[placeholder="Enter option"] >> nth=0');
    const editTemplateButton = page.locator('#template-view-edit-template');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    console.log('addEditTemplate Validation The Of Save Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(saveButton).toHaveAttribute('disabled', '');
    await expect(saveButton).toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await expect(saveButton).toHaveAttribute('disabled', '');
    await expect(saveButton).toHaveCSS('background-color', 'rgba(0, 0, 0, 0.12)');
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await expect(saveButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listTextVariableClick();
    await page.setViewportSize({width: 2500, height: 1080});
    await newTemplate.saveButtonForErrorsClick();
    await expect(variableValidationError).toBeVisible();
    await expect(variableValidationError).toHaveText(' Please fill in this field ');
    await page.setViewportSize({width: 1280, height: 720});
    await optionField.fill('test');
    await newTemplate.editVariablePanelClose();
    await expect(page.url()).toContain('/contract-template/create');
    await expect(pageTitle).toHaveText('New Template');
    await expect(saveButton).toBeVisible();
    await newTemplate.saveButtonClick();
    await expect(page.url()).toContain('/contract-template/');
    await expect(pageTitle).toHaveText('View Template');
    await expect(editTemplateButton).toBeVisible();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName).toContainText('autotest');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('validationOfTheCreateContractButton @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const createContractButton = page.locator('#template-detail-create-contract');
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableValidationError = page.locator('.variables-list-form-control-option-value .mat-error >> nth=0');
    const pageTitle = page.locator('.section__title');
    const optionField = page.locator('[placeholder="Enter option"] >> nth=0');
    const saveContractButton = page.locator('#contract-detail-save');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const publishedStatus = page.locator('.status-column-published >> nth=0');
    console.log('addEditTemplate Validation The Of Create Contract Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(createContractButton).toHaveAttribute('disabled', '');
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await expect(createContractButton).toHaveAttribute('disabled', '');
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await expect(createContractButton).toHaveAttribute('disabled', '');
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await newTemplate.selectCategoryName();
    await expect(createContractButton).toHaveAttribute('disabled', '');
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await newTemplate.publishToggleClick();
    await expect(createContractButton).toHaveCSS('color', 'rgb(69, 119, 210)');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listTextVariableClick();
    await page.setViewportSize({width: 2500, height: 1080});
    await newTemplate.createContractButtonForErrorsClick();
    await expect(variableValidationError).toBeVisible();
    await expect(variableValidationError).toHaveText(' Please fill in this field ');
    await page.setViewportSize({width: 1280, height: 720});
    await optionField.fill('test');
    await newTemplate.editVariablePanelClose();
    await expect(page.url()).toContain('/contract-template/create');
    await expect(pageTitle).toHaveText('New Template');
    await expect(createContractButton).toBeVisible();
    await newTemplate.selectCategoryName();
    await newTemplate.createContractButtonClick();
    await expect(page.url()).toContain('/contract/create/');
    await expect(pageTitle).toHaveText('New Contract');
    await expect(saveContractButton).toBeVisible();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName).toContainText('autotest');
    await expect(publishedStatus).toBeVisible();
    await templateName.click();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(createContractButton).toBeHidden();
});

test('deactivationTheCreateContractButtonArchivedModel @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const createContractButton = page.locator('#template-detail-create-contract');
    const tooltip = page.locator('.mat-tooltip');
    console.log('addEditTemplate Deactivation The Create Contract Button Archived Model');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/1981');
    await expect(createContractButton).toHaveAttribute('disabled', '');
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await createContractButton.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('This Template is connected to a Model that is not active (archived). Please activate the Model or edit the Template to remove the inactive Model');
});

test('validationOfTheCreateContractButtonApprovalRequired @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const pageTitle = page.locator('.section__title');
    const saveContractButton = page.locator('#contract-detail-save');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const publishedStatus = page.locator('.status-column-published >> nth=0');
    console.log('addEditTemplate Validation The Of Create Contract Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.permissionContractPublicationRequiredValueClick();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await expect(page.url()).toContain('/contract/create/');
    await expect(pageTitle).toHaveText('New Contract');
    await expect(saveContractButton).toBeVisible();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName).toContainText('autotest');
    await expect(publishedStatus).toBeVisible();
    await templateName.click();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('validationOfTheTemplateTitleField @regClickTractsMedium @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const titleField = page.locator('#form-control-title input');
    const titleFieldError = page.locator('#form-control-title mat-error');
    console.log('addEditTemplate Validation The Of Create Contract Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(titleField).toBeVisible();
    await expect(titleField).toHaveAttribute('maxlength', '60');
    await expect(titleField).toHaveAttribute('formcontrolname', 'title');
    await expect(titleField).toHaveAttribute('type', 'text');
    await newTemplate.publishToggleClick();
    await expect(titleFieldError).toBeVisible();
    await expect(titleFieldError).toHaveText(' Please fill in this field ');
    await newTemplate.templateTitleField.fill('%@£$%');
    await expect(titleFieldError).toBeVisible();
    await expect(titleFieldError).toHaveText(' Please do not use special symbols and characters in the template title ');
});

test('displaying/validationOfTheModelDropDownField @regClickTractsMedium @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const modelDropDownField = page.locator('#form-control-model_id mat-select');
    const modelDropDownFieldError = page.locator('.custom-error');
    const modelDropDown = page.locator('.mat-select-content');
    const modelDropDownValue0 = page.locator('mat-option >> text= Test Model ');
    const modelDropDownValue1 = page.locator('mat-option >> text= test100test100DoNotRemove16 ');
    const modelDropDownArchivedValue = page.locator('mat-option >> nth=1 ');
    console.log('addEditTemplate Displaying/Validation Of The Model Drop Down Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(modelDropDownField).toBeVisible();
    await newTemplate.modelDropDownOpen();
    await expect(modelDropDown).toBeVisible();
    await expect(modelDropDownValue0).toBeVisible();
    await expect(modelDropDownValue1).toBeVisible();
    await page.goto('/contract-template/edit/1981');
    await expect(modelDropDownFieldError).toBeVisible();
    await expect(modelDropDownFieldError).toHaveText(' This Model has been archvised and can not be used, please choose new one ');
    await newTemplate.modelDropDownOpen();
    await expect(modelDropDownArchivedValue).toBeVisible();
    await expect(modelDropDownArchivedValue).toHaveAttribute('aria-disabled', 'true');
    await page.goto('/contract-template/edit/1931');
    await expect(modelDropDownField).toBeVisible();
    await expect(modelDropDownField).toHaveAttribute('aria-disabled', 'true');
    await expect(modelDropDownFieldError).toBeVisible();
    await expect(modelDropDownFieldError).toHaveText(' The Model can not be added/changed because of attached Contracts ');
    await expect(modelDropDownFieldError).toHaveCSS('color', 'rgb(128, 136, 146)');
    await userBar.logOutAction();
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(modelDropDownField).toBeVisible();
    await newTemplate.modelDropDownOpenNoModels();
    await expect(modelDropDown).toBeHidden();
    await expect(modelDropDownFieldError).toBeVisible();
    await expect(modelDropDownFieldError).toHaveText(' Please create Model ');
    await expect(modelDropDownFieldError).toHaveCSS('color', 'rgb(128, 136, 146)');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(modelDropDownField).toBeHidden();
    await page.goto('/contract-template/edit/1931');
    await expect(modelDropDownField).toBeVisible();
    await expect(modelDropDownField).toHaveAttribute('aria-disabled', 'true');
});

test('switchingBetweenStatusesAndiIcon @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const publishToggle = page.locator('#template-detail-status-publish');
    const draftToggle = page.locator('#template-detail-status-draft');
    const createContractButton = page.locator('#template-detail-create-contract');
    const saveButton = page.locator('#template-detail-save');
    const iIcon = page.locator('#template-detail-status-info');
    const tooltip = page.locator('.popup-informer__content >> nth=0');
    console.log('addEditTemplate Switching Between Statuses And iIcon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await expect(publishToggle).toBeVisible();
    await expect(draftToggle).toBeVisible();
    await newTemplate.publishToggleClick();
    await expect(publishToggle).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(draftToggle).toHaveCSS('color', 'rgba(0, 0, 0, 0.38)');
    await expect(createContractButton).toBeVisible();
    await expect(createContractButton).toHaveCSS('color', 'rgb(69, 119, 210)');
    await expect(saveButton).toBeVisible();
    await expect(saveButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await newTemplate.draftToggleClick();
    await expect(publishToggle).toHaveCSS('color', 'rgba(0, 0, 0, 0.38)');
    await expect(draftToggle).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(createContractButton).toBeVisible();
    await expect(createContractButton).toHaveCSS('color', 'rgba(0, 0, 0, 0.26)');
    await expect(saveButton).toBeVisible();
    await expect(saveButton).toHaveCSS('background-color', 'rgb(69, 119, 210)');
    await expect(iIcon).toBeVisible();
    await expect(iIcon).toHaveCSS('color', 'rgb(69, 119, 210)');
    await iIcon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText("Select ‘Publish’ when you are ready to make this template live to users. Select ‘Draft’ for editing. Templates in ‘Draft’ status do not appear on the available templates list.");
});

test('behaviorForDisableSignatureCheckbox @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const contracts = new ContractsPage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const signatureFieldsView = page.locator('.user-sign-form');
    const firstNameFieldView = page.locator('[aria-label="First name"]');
    const lastNameFieldView = page.locator('[aria-label="Last name"]');
    const legalEntityFieldtView = page.locator('[aria-label="Company Name (or signer’s name if signing as an individual)"]');
    const titleFieldView = page.locator('[aria-label="Title"]');
    const emailFieldView = page.locator('[aria-label="Email"]');
    const confirmEmailFieldView = page.locator('[aria-label="Confirm email"]');
    const signatureFieldView = page.locator('[aria-label="Signature"]');
    const signatureFieldsEndUser = page.locator('.template-form');
    const firstNameFieldEndUser = page.locator('#contractsignform-first_name');
    const lastNameFieldEndUser = page.locator('#contractsignform-last_name');
    const legalEntityFieldEndUser = page.locator('#contractsignform-company_name');
    const titleFieldEndUser = page.locator('#contractsignform-title');
    const emailFieldEndUser = page.locator('#contractsignform-email');
    const confirmEmailFieldEndUser = page.locator('#contractsignform-confirm_email');
    const signatureFieldEndUser = page.locator('#contractsignform-signature');
    console.log('addEditTemplate Behavior For Disable Signature Checkbox');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await expect(signatureFieldsView).toBeVisible();
    await expect(firstNameFieldView).toBeVisible();
    await expect(lastNameFieldView).toBeVisible();
    await expect(legalEntityFieldtView).toBeVisible();
    await expect(titleFieldView).toBeVisible();
    await expect(emailFieldView).toBeVisible();
    await expect(confirmEmailFieldView).toBeVisible();
    await expect(signatureFieldView).toBeVisible();
    await viewContract.copyLinkButtonClick();
    const getPermanentFieldValue0 = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await page.goto(getPermanentFieldValue0);
    await expect(signatureFieldsEndUser).toBeVisible();
    await expect(firstNameFieldEndUser).toBeVisible();
    await expect(lastNameFieldEndUser).toBeVisible();
    await expect(legalEntityFieldEndUser).toBeVisible();
    await expect(titleFieldEndUser).toBeVisible();
    await expect(emailFieldEndUser).toBeVisible();
    await expect(confirmEmailFieldEndUser).toBeVisible();
    await expect(signatureFieldEndUser).toBeVisible();
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue0 = await contractName.innerText();
    if (contractNameValue0.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateName.click();
    await expect(signatureFieldsView).toBeVisible();
    await expect(firstNameFieldView).toBeVisible();
    await expect(lastNameFieldView).toBeVisible();
    await expect(legalEntityFieldtView).toBeVisible();
    await expect(titleFieldView).toBeVisible();
    await expect(emailFieldView).toBeVisible();
    await expect(confirmEmailFieldView).toBeVisible();
    await expect(signatureFieldView).toBeVisible();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.disableSignatureCheckboxClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await expect(signatureFieldsView).toBeHidden();
    await expect(firstNameFieldView).toBeHidden();
    await expect(lastNameFieldView).toBeHidden();
    await expect(legalEntityFieldtView).toBeHidden();
    await expect(titleFieldView).toBeHidden();
    await expect(emailFieldView).toBeHidden();
    await expect(confirmEmailFieldView).toBeHidden();
    await expect(signatureFieldView).toBeHidden();
    await viewContract.copyLinkButtonClick();
    const getPermanentFieldValue1 = await page.locator('[placeholder="Permanent Contract Link"]').inputValue();
    await page.goto(getPermanentFieldValue1);
    await expect(signatureFieldsEndUser).toBeHidden();
    await expect(firstNameFieldEndUser).toBeHidden();
    await expect(lastNameFieldEndUser).toBeHidden();
    await expect(legalEntityFieldEndUser).toBeHidden();
    await expect(titleFieldEndUser).toBeHidden();
    await expect(emailFieldEndUser).toBeHidden();
    await expect(confirmEmailFieldEndUser).toBeHidden();
    await expect(signatureFieldEndUser).toBeHidden();
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue1 = await contractName.innerText();
    if (contractNameValue1.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateName.click();
    await expect(signatureFieldsView).toBeHidden();
    await expect(firstNameFieldView).toBeHidden();
    await expect(lastNameFieldView).toBeHidden();
    await expect(legalEntityFieldtView).toBeHidden();
    await expect(titleFieldView).toBeHidden();
    await expect(emailFieldView).toBeHidden();
    await expect(confirmEmailFieldView).toBeHidden();
    await expect(signatureFieldView).toBeHidden();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('displayingNotActiveDisableSignatureCheckbox @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const tooltip = page.locator('.mat-tooltip');
    const disableSignatureCheckbox = page.locator('#template-detail-disable-signature');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelTextEditor = page.locator('[role="textbox"] >> nth=1');
    console.log('addEditTemplate Displaying Not Active Disable Signature Checkbox');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.multipartyToggleClick();
    await expect(disableSignatureCheckbox).toHaveClass('mat-checkbox mat-primary mat-checkbox-disabled');
    await disableSignatureCheckbox.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Signatures cannot be disabled because multiparty signatures are enabled in the template');
    await newTemplate.multipartyToggleClick();
    await expect(disableSignatureCheckbox).toHaveClass('mat-checkbox mat-primary');
    await disableSignatureCheckbox.hover();
    await expect(tooltip).toBeHidden();
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await editVariablePanelTextEditor.type('test');
    await newTemplate.textEditorField.click();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(disableSignatureCheckbox).toHaveClass('mat-checkbox mat-primary mat-checkbox-disabled');
    await disableSignatureCheckbox.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Signatures cannot be disabled because checkbox variable is added to the template');
    await newTemplate.textEditorFieldClear();
    await expect(disableSignatureCheckbox).toHaveClass('mat-checkbox mat-primary');
    await disableSignatureCheckbox.hover();
    await expect(tooltip).toBeHidden();
});

test('createPublishedContractDisableSignatures @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const contracts = new ContractsPage(page);
    const pageTitle = page.locator('.section__title');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const signatureFieldsView = page.locator('.user-sign-form');
    const firstNameFieldView = page.locator('[aria-label="First name"]');
    const lastNameFieldView = page.locator('[aria-label="Last name"]');
    const legalEntityFieldtView = page.locator('[aria-label="Company Name (or signer’s name if signing as an individual)"]');
    const titleFieldView = page.locator('[aria-label="Title"]');
    const emailFieldView = page.locator('[aria-label="Email"]');
    const confirmEmailFieldView = page.locator('[aria-label="Confirm email"]');
    const signatureFieldView = page.locator('[aria-label="Signature"]');
    const paytractsVariable = page.locator('[name="paytracts-contract-fee"]');
    const paytractsDefaultText = page.locator('.stripe-contract-view');
    console.log('addEditTemplate Create Published Contract Disable Signatures');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.disableSignatureCheckboxClick();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await expect(page.url()).toContain('/contract/');
    await expect(pageTitle).toContainText('autotest');
    await expect(signatureFieldsView).toBeHidden();
    await expect(firstNameFieldView).toBeHidden();
    await expect(lastNameFieldView).toBeHidden();
    await expect(legalEntityFieldtView).toBeHidden();
    await expect(titleFieldView).toBeHidden();
    await expect(emailFieldView).toBeHidden();
    await expect(confirmEmailFieldView).toBeHidden();
    await expect(signatureFieldView).toBeHidden();
    await expect(paytractsVariable).toBeHidden();
    await expect(paytractsDefaultText).toBeHidden();
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue0 = await contractName.innerText();
    if (contractNameValue0.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateName.click();
    await viewTemplate.editTemplateButtonClick();
    await page.waitForTimeout(1000);
    await newTemplate.paytractsToggleClick();
    await newTemplate.paytractsInsertButtonClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await expect(page.url()).toContain('/contract/');
    await expect(pageTitle).toContainText('autotest');
    await expect(signatureFieldsView).toBeHidden();
    await expect(firstNameFieldView).toBeHidden();
    await expect(lastNameFieldView).toBeHidden();
    await expect(legalEntityFieldtView).toBeHidden();
    await expect(titleFieldView).toBeHidden();
    await expect(emailFieldView).toBeHidden();
    await expect(confirmEmailFieldView).toBeHidden();
    await expect(signatureFieldView).toBeHidden();
    await expect(paytractsVariable).toBeVisible();
    await expect(paytractsDefaultText).toBeVisible();
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue1 = await contractName.innerText();
    if (contractNameValue1.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateName.click();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('checkingToolBarEditor @regClickTractsLow @addEditTemplate @generalCases', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const cutOption = page.locator('.cke_button__cut');
    const copyOption = page.locator('.cke_button__copy');
    const pasteOption = page.locator('.cke_button__paste');
    const undoOption = page.locator('.cke_button__undo');
    const redoOption = page.locator('.cke_button__redo');
    const scaytOption = page.locator('.cke_button__scayt');
    const linkOption = page.locator('.cke_button__link');
    const unlinkOption = page.locator('.cke_button__unlink');
    const anchorOption = page.locator('.cke_button__anchor');
    const imageOption = page.locator('.cke_button__image');
    const tabelOption = page.locator('.cke_button__table');
    const horizontalruleOption = page.locator('.cke_button__horizontalrule');
    const specialcharOption = page.locator('.cke_button__specialchar');
    const maximizeOption = page.locator('.cke_button__maximize');
    const sourceOption = page.locator('.cke_button__source');
    const boldOption = page.locator('.cke_button__bold');
    const italicOption = page.locator('.cke_button__italic');
    const underlineOption = page.locator('.cke_button__underline');
    const strikeOption = page.locator('.cke_button__strike');
    const subscriptOption = page.locator('.cke_button__subscript');
    const superscriptOption = page.locator('.cke_button__superscript');
    const removeformatOption = page.locator('.cke_button__removeformat');
    const numberedlistOption = page.locator('.cke_button__numberedlist');
    const bulletedlistOption = page.locator('.cke_button__bulletedlist');
    const outdentOption = page.locator('.cke_button__outdent');
    const indentOption = page.locator('.cke_button__indent');
    const blockquoteOption = page.locator('.cke_button__blockquote');
    const justifyleftOption = page.locator('.cke_button__justifyleft');
    const justifycenterOption = page.locator('.cke_button__justifycenter');
    const justifyrightOption = page.locator('.cke_button__justifyright');
    const justifyblockOption = page.locator('.cke_button__justifyblock');
    const stylesOption = page.locator('[title="Formatting Styles"]');
    const formatOption = page.locator('[title="Paragraph Format"]');
    const fontOption = page.locator('[title="Font Name"]');
    const sizeOption = page.locator('[title="Font Size"]');
    const textcolorOption = page.locator('.cke_button__textcolor');
    const bgcolorOption = page.locator('.cke_button__bgcolor');
    console.log('addEditTemplate Checking Tool Bar Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(cutOption).toBeVisible();
    await expect(copyOption).toBeVisible();
    await expect(pasteOption).toBeVisible();
    await expect(undoOption).toBeVisible();
    await expect(redoOption).toBeVisible();
    await expect(scaytOption).toBeVisible();
    await expect(linkOption).toBeVisible();
    await expect(unlinkOption).toBeVisible();
    await expect(anchorOption).toBeVisible();
    await expect(imageOption).toBeVisible();
    await expect(tabelOption).toBeVisible();
    await expect(horizontalruleOption).toBeVisible();
    await expect(specialcharOption).toBeVisible();
    await expect(maximizeOption).toBeVisible();
    await expect(sourceOption).toBeVisible();
    await expect(boldOption).toBeVisible();
    await expect(italicOption).toBeVisible();
    await expect(underlineOption).toBeVisible();
    await expect(strikeOption).toBeVisible();
    await expect(subscriptOption).toBeVisible();
    await expect(superscriptOption).toBeVisible();
    await expect(removeformatOption).toBeVisible();
    await expect(numberedlistOption).toBeVisible();
    await expect(bulletedlistOption).toBeVisible();
    await expect(outdentOption).toBeVisible();
    await expect(indentOption).toBeVisible();
    await expect(blockquoteOption).toBeVisible();
    await expect(justifyleftOption).toBeVisible();
    await expect(justifycenterOption).toBeVisible();
    await expect(justifyrightOption).toBeVisible();
    await expect(justifyblockOption).toBeVisible();
    await expect(stylesOption).toBeVisible();
    await expect(formatOption).toBeVisible();
    await expect(fontOption).toBeVisible();
    await expect(sizeOption).toBeVisible();
    await expect(textcolorOption).toBeVisible();
    await expect(bgcolorOption).toBeVisible();
});

test('checkingToolTextArea @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const strign0 = page.locator('p >> nth=0');
    const addImageButton = page.locator('.cke_button__image');
    const urlField = page.locator('.cke_dialog_ui_input_text input >> nth=0');
    const okButton = page.locator('.cke_dialog_ui_button_ok');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const variable0 = page.locator('[name="elementName_1"]');
    const image = page.locator('img >> nth=0');
    console.log('addEditTemplate Checking Tool Text Area');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.click();
    await newTemplate.textEditorField.type('test100testAutotest\n \n \n ');
    await expect(strign0).toBeVisible();
    await expect(strign0).toContainText('test100testAutotest');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('test');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(variable0).toBeVisible();
    await expect(variable0).toHaveText('{{ test }}');
    await newTemplate.textEditorField.click();
    await newTemplate.textEditorField.type('\n \n \n ');
    await addImageButton.click();
    await urlField.fill('https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg');
    await okButton.click();
    await expect(image).toBeVisible();
    await expect(image).toHaveAttribute('src', 'https://cdn.pixabay.com/photo/2015/04/23/22/00/tree-736885__480.jpg');
});

test('behaviorForScrollingTemplateBodyIfVariablePanelIsOpened @regClickTractsMedium @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    console.log('addEditTemplate Behavior For Scrolling Template Body If Variable Panel Is Opened');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await page.waitForTimeout(1000);
    await page.locator('[name="paytracts-contract-fee"]').scrollIntoViewIfNeeded();
    await page.waitForTimeout(1000);
    await page.locator('[name="elementName_1"] >> nth=0').scrollIntoViewIfNeeded();
    await page.waitForTimeout(1000);
});



test('validationOfTheVariableNameInTheTemplateBody @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const variable0TextEditor = page.locator('[name="elementName_1"] >> nth=0');
    const variable0EditVariablePanel = page.locator('#configurator-variable-4 mat-expansion-panel-header');
    const variable1EditVariablePanel = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const variable1EditVariablePanelClick = page.locator('#configurator-variable-2');
    const editVariablePanel = page.locator('.template-values-wrapper');
    console.log('addEditTemplate Validation Of The Variable Name In The Template Body');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await page.waitForTimeout(1500);
    await expect(editVariablePanel).toHaveClass('template-values-wrapper ng-star-inserted');
    await variable0TextEditor.click();
    await expect(editVariablePanel).toHaveClass('template-values-wrapper ng-star-inserted expanded');
    await expect(variable0EditVariablePanel).toHaveAttribute('aria-expanded', 'true');
    await expect(variable0EditVariablePanel).not.toHaveAttribute('aria-expanded', 'false');
    await expect(variable1EditVariablePanel).toHaveAttribute('aria-expanded', 'false');
    await variable1EditVariablePanelClick.click();
    await expect(variable1EditVariablePanel).toHaveAttribute('aria-expanded', 'true');
    await expect(variable1EditVariablePanel).not.toHaveAttribute('aria-expanded', 'false');
    await expect(variable0EditVariablePanel).toHaveAttribute('aria-expanded', 'false');
});



test('hoveringOfTheVariableNameInTheTemplateBody @regClickTractsLow @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const variable0TextEditor = page.locator('[name="elementName_1"] >> nth=0');
    console.log('addEditTemplate Hovering Of The Variable Name In The Template Body');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await page.waitForTimeout(1500);
    await expect(variable0TextEditor).toHaveCSS('color', 'rgba(0, 0, 0, 0.87)');
    await variable0TextEditor.hover();
    await expect(variable0TextEditor).toHaveCSS('color', 'rgb(79, 120, 204)');
});

test('behaviorForHasAlreadyInsertedVariableAfterChangingTheContentType @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionField0 = page.locator('[placeholder="Enter option"] >> nth=0');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    const variableContentTypeValue = page.locator('#configurator-variable-elementName_1 .rdl-variable-type-value');
    const variableLabelValue = page.locator('#configurator-variable-elementName_1 mat-form-field mat-label');
    console.log('addEditTemplate Behavior For Has Already Inserted Variable After Changing The Content Type');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listNumberVariableClick();
    await optionField0.type('567892');
    await newTemplate.editVariablePanelClose();
    await newTemplate.textEditorField.click();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await variable0.click();
    await expect(variableContentTypeValue).toHaveText(' List • 1 option');
    await expect(variableLabelValue).toHaveText('number');
    await viewTemplate.editVariablesPanelClose();
    await viewTemplate.createContractButtonClick();
    await variable0.click();
    await expect(variableContentTypeValue).toHaveText(' List • 1 option');
    await expect(variableLabelValue).toHaveText('number');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue0 = await templateName.innerText();
    if (templateNameValue0.includes('autotest')) {
        await templateName.click();
    }
    await viewTemplate.editTemplateButtonClick();
    await variable0.click();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await newTemplate.saveButtonClick();
    await variable0.click();
    await expect(variableContentTypeValue).toHaveText(' Input • text');
    await expect(variableLabelValue).toHaveText('text');
    await viewTemplate.editVariablesPanelClose();
    await viewTemplate.createContractButtonClick();
    await variable0.click();
    await expect(variableContentTypeValue).toHaveText(' Input • text');
    await expect(variableLabelValue).toHaveText('text');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue1 = await templateName.innerText();
    if (templateNameValue1.includes('autotest'))
    {
        await templateName.click();
        await viewTemplate.editTemplateButtonClick();
        await newTemplate.draftToggleClick();
        await newTemplate.saveButtonClick();
        await page.goto('/contract-templates/list?&sort=-updated_at');
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('behaviorForHasAlreadyInsertedVariableAfterEditingVariableName @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    console.log('addEditTemplate Behavior For Has Already Inserted Variable After Editing Variable Name');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('');
    await newTemplate.variablePanelVariableNameField.type('test100test');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await newTemplate.textEditorField.click();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(variable0).toContainText('test100test');
    await variable0.click();
    await newTemplate.variablePanelVariableNameField.fill('');
    await newTemplate.variablePanelVariableNameField.type('test200test');
    await expect(variable0).toContainText('test200test');
    await newTemplate.editVariablePanelClose();
    await expect(variable0).toContainText('test200test');
});

test('behaviorIfTheVariableIsDeletedDirectlyFromTheText @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variable0EditVariablePanel = page.locator('#configurator-variable-0');
    const variableName0EditVariablePanel = page.locator('#configurator-variable-0 mat-panel-title');
    console.log('addEditTemplate Behavior If The Variable Is Deleted Directly From The Text');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('');
    await newTemplate.variablePanelVariableNameField.type('test100test');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await newTemplate.textEditorField.click();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.textEditorFieldClear();
    await newTemplate.editVariablePanelOpen();
    await expect(variable0EditVariablePanel).toBeVisible();
    await expect(variableName0EditVariablePanel).toHaveText(' test100test ');
    await newTemplate.editVariablePanelClose();
});

test('noPossibilityToInsertTheVariableInsideTheOtherOne @regClickTractsMedium @addEditTemplate @generalCases', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    console.log('addEditTemplate No Possibility To Insert The Variable Inside The Other One');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('');
    await newTemplate.variablePanelVariableNameField.type('test100test');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await newTemplate.textEditorField.click();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await variable0.click();
    await variable0.click();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(variable0).toHaveText('{{ test100test }}');
});

test('templateCanSaveWithoutAddedVariables @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const templateViewContent = page.locator('.contract-content');
    console.log('addEditTemplate Template Can Save Without Added Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.saveButtonClick();
    await expect(templateViewContent).toHaveText('test100testAutotest \n \n \n');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName).toContainText('autotest');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('creatingTemplatesWithTheSameTitle @regClickTractsLow @addEditTemplate @generalCases', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const templateName0 = page.locator('.template-name-column-link >> nth=0');
    const templateName1 = page.locator('.template-name-column-link >> nth=1');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    console.log('addEditTemplate Template Can Save Without Added Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleField.fill('TemplatesWithSameTitle');
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.saveButtonClick();
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleField.fill('TemplatesWithSameTitle');
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName0).toContainText('TemplatesWithSameTitle');
    await expect(templateName1).toContainText('TemplatesWithSameTitle');
    const templateNameValue0 = await templateName.innerText();
    if (templateNameValue0.includes('TemplatesWithSameTitle'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
        await page.waitForTimeout(1500);
    }
    const templateNameValue1 = await templateName.innerText();
    if (templateNameValue1.includes('TemplatesWithSameTitle'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
        await page.waitForTimeout(1500);
    }
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleField.fill('TemplatesWithSameTitle');
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.saveButtonClick();
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleField.fill('TemplatesWithSameTitle');
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100testAutotest \n \n \n');
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(templateName0).toContainText('TemplatesWithSameTitle');
    await expect(templateName1).toContainText('TemplatesWithSameTitle');
    const templateNameValue2 = await templateName.innerText();
    if (templateNameValue2.includes('TemplatesWithSameTitle'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
    const templateNameValue3 = await templateName.innerText();
    if (templateNameValue3.includes('TemplatesWithSameTitle'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('displayingTheMultipartySignaturesBlock @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const multipartyBlock = page.locator('.multiple-signatures-card');
    const multipartyToggle = page.locator('#form-control-is_multiple_signatures');
    console.log('addEditTemplate Template Can Save Without Added Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(multipartyBlock).toBeVisible();
    await expect(multipartyToggle).toHaveClass('slide-toggle mat-slide-toggle mat-primary ng-untouched ng-pristine ng-valid');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(multipartyBlock).toBeVisible();
    await expect(multipartyToggle).toHaveClass('slide-toggle mat-slide-toggle mat-primary ng-untouched ng-pristine ng-valid');
});

test('hoveringiIconOfTheMultipartySignatures @regClickTractsLow @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const tooltip = page.locator('.multiple-signatures-card .popup-informer__content');
    const iIconMultiparty = page.locator('.multiple-signatures-card .popup-informer__ic');
    console.log('addEditTemplate Hoveringi Icon Of The Multiparty Signatures');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(iIconMultiparty).toBeVisible();
    await iIconMultiparty.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Click here, to permit multi-party signature blocks.');
});

test('disablingTheMultipartySignaturesToggle @regClickTractsHigh @addEditTemplate @generalCases', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const tooltip = page.locator('.mat-tooltip');
    const multipartyToggle = page.locator('#form-control-is_multiple_signatures');
    const multipartyToggleInput = page.locator('#form-control-is_multiple_signatures input');
    console.log('addEditTemplate Disabling The Multiparty Signatures Toggle');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.disableSignatureCheckboxClick();
    await expect(multipartyToggle).toHaveClass('slide-toggle mat-slide-toggle mat-primary ng-untouched ng-pristine ng-valid mat-disabled');
    await expect(multipartyToggleInput).toHaveAttribute('disabled', '');
    await multipartyToggle.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Multiparty signatures cannot be enabled because the signatures for this template has been turned off');
    await newTemplate.disableSignatureCheckboxClick();
    await newTemplate.paytractsToggleClick();
    await expect(multipartyToggle).toHaveClass('slide-toggle mat-slide-toggle mat-primary ng-untouched ng-pristine ng-valid mat-disabled');
    await expect(multipartyToggleInput).toHaveAttribute('disabled', '');
    await multipartyToggle.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Multiparty signatures cannot be enabled because the PayTracts is turned on');
});

test('displayingTemplateContractVisibility/DisablingTemplateContractVisibility @regClickTractsHigh @addEditTemplate @permissionsVisibillity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const tooltip = page.locator('.mat-tooltip');
    const templateContractVisibility = page.locator('#form-control-visibility_status');
    const templateContractVisibilityValue = page.locator('#form-control-visibility_status mat-select');
    console.log('addEditTemplate Displaying Template Contract Visibility/Disabling Template Contract Visibility');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(templateContractVisibility).toBeVisible();
    await expect(templateContractVisibilityValue).toHaveText('Everyone at the company');
    await expect(templateContractVisibilityValue).toHaveAttribute('aria-disabled', 'false');
    await newTemplate.permissionContractPublicationRequiredValueClick();
    await expect(templateContractVisibilityValue).toHaveAttribute('aria-disabled', 'true');
    await newTemplate.permissionContractPublicationNotRequiredValueClick();
    await expect(templateContractVisibilityValue).toHaveAttribute('aria-disabled', 'false');
    await page.goto('');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(templateContractVisibility).toBeHidden();
});

test('displayingTheCorrectInfoInTheTemplateContractVisibilityDropDown @regClickTractsHigh @addEditTemplate @permissionsVisibillity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateContractVisibilityValue = page.locator('#form-control-visibility_status mat-select');
    const templateContractVisibilityDropDown = page.locator('.mat-select-panel');
    const templateContractVisibilityDropDownValue0 = page.locator('.mat-option >> nth=0');
    const templateContractVisibilityDropDownValue1 = page.locator('.mat-option >> nth=1');
    const templateContractVisibilityDropDownValue2 = page.locator('.mat-option >> nth=2');
    console.log('addEditTemplate Displaying The Correct Info In The Template Contract Visibility Drop Down');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.permissionVisibilityDropDown.click();
    await expect(templateContractVisibilityDropDown).toBeVisible();
    await expect(templateContractVisibilityDropDownValue0).toBeVisible();
    await expect(templateContractVisibilityDropDownValue0).toHaveText(' Everyone at the company ');
    await expect(templateContractVisibilityDropDownValue1).toBeVisible();
    await expect(templateContractVisibilityDropDownValue1).toHaveText(' Only Account Admins ');
    await expect(templateContractVisibilityDropDownValue2).toBeVisible();
    await expect(templateContractVisibilityDropDownValue2).toHaveText(' Only Me ');
    await newTemplate.permissionVisibilityOnlyMeValue.click();
    await expect(templateContractVisibilityValue).toHaveText('Only Me');
    await newTemplate.permissionVisibilityOnlyAAValueChoose();
    await expect(templateContractVisibilityValue).toHaveText('Only Account Admins');
    await newTemplate.permissionVisibilityEvryoneValueChoose();
    await expect(templateContractVisibilityValue).toHaveText('Everyone at the company');
});

test('displayingTheIiconNearTheTemplateContractVisibility @regClickTractsLow @addEditTemplate @permissionsVisibillity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templateContractVisibilityIicon = page.locator('#form-control-visibility_status-info');
    const templateContractVisibilityIiconTooltip = page.locator('.card--securx .popup-informer__content >> nth=0');
    console.log('addEditTemplate Displaying The Iicon Near The Template Contract Visibility');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(templateContractVisibilityIicon).toBeVisible();
    await templateContractVisibilityIicon.hover();
    await expect(templateContractVisibilityIiconTooltip).toBeVisible();
    await expect(templateContractVisibilityIiconTooltip).toHaveText('You can restrict the visibility of the template. All contracts based on it, and the signatures for such contracts will also be hidden.');
});

test('displaying/ValidtionOfTheContractPublicationDropDown @regClickTractsHigh @addEditTemplate @permissionsVisibillity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const contractPublication = page.locator('#form-control-is_securx');
    const contractPublicationValue = page.locator('#form-control-is_securx mat-select');
    const contractPublicationDropDown = page.locator('.mat-select-panel');
    const contractPublicationDropDownValue0 = page.locator('.mat-option >> nth=0');
    const contractPublicationDropDownValue1 = page.locator('.mat-option >> nth=1');
    console.log('addEditTemplate Displaying/Validtion Of The Contract Publication Drop Down');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(contractPublication).toBeVisible();
    await expect(contractPublicationValue).toBeVisible();
    await expect(contractPublicationValue).toHaveText('Approval not required');
    await newTemplate.permissionContractPublicationDropDown.click();
    await expect(contractPublicationDropDown).toBeVisible();
    await expect(contractPublicationDropDownValue0).toBeVisible();
    await expect(contractPublicationDropDownValue0).toHaveText('Approval not required');
    await expect(contractPublicationDropDownValue1).toBeVisible();
    await expect(contractPublicationDropDownValue1).toHaveText('Approval required');
    await newTemplate.permissionContractPublicationRequiredValue.click();
    await page.goto('');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(contractPublication).toBeHidden();
});

test('displayingTheIiconNearTheContractPublicationDropDown @regClickTractsLow @addEditTemplate @permissionsVisibillity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const contractPublicationIicon = page.locator('#form-control-is_securx-info');
    const contractPublicationIiconTooltip = page.locator('.card--securx .popup-informer__content >> nth=1');
    console.log('addEditTemplate Displaying The Iicon Near The Contract Publication Drop Down');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(contractPublicationIicon).toBeVisible();
    await contractPublicationIicon.hover();
    await expect(contractPublicationIiconTooltip).toBeVisible();
    await expect(contractPublicationIiconTooltip).toHaveText('Account Users can publish contracts based on this template and share the Contract URL without the Account Admin’s approval.');
    await newTemplate.permissionContractPublicationRequiredValueClick();
    await contractPublicationIicon.hover();
    await expect(contractPublicationIiconTooltip).toBeVisible();
    await expect(contractPublicationIiconTooltip).toHaveText('Account Users require the Account Admin’s approval to publish contracts based on this template and share the Contract URL. This does not apply to other Account Admins.');
});

test('behaviorForPanelWhenNoVariablesAreDisplayed @regClickTractsLow @addEditTemplate @variablesVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const noVariablesText = page.locator('.no-variables-text >> nth=0');
    console.log('addEditTemplate Behavior For Panel When No Variables Are Displayed');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(noVariablesText).toBeVisible();
    await expect(noVariablesText).toHaveText(' No variables yet. Open slide bar to add variables ');
});

test('displayingVariableName @regClickTractsMedium @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const variablePanelVariableName = page.locator('#variables-panel-variable-0 .rdl-variable-name');
    const variablePanelVariableType = page.locator('#variables-panel-variable-0 .rdl-variable-type');
    console.log('addEditTemplate Displaying Variable Name');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await expect(variablePanelVariableName).toBeVisible();
    await expect(variablePanelVariableName).toHaveText(' inputCheckbox ');
    await expect(variablePanelVariableType).toBeVisible();
    await expect(variablePanelVariableType).toHaveText(' Input • checkbox');
});

test('checkingHoveringTheVariableName @regClickTractsLow @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const variablePnaelInputNumberVariable = page.locator('#variables-panel-variable-3');
    const textEditorInputNumberVariable = page.locator('[name="elementName_3"] >> nth=0'); 
    console.log('addEditTemplate Checking Hovering The Variable Name');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await page.waitForTimeout(1500);
    await expect(textEditorInputNumberVariable).toHaveCSS('color', 'rgba(0, 0, 0, 0.87)');
    await variablePnaelInputNumberVariable.hover();
    await expect(textEditorInputNumberVariable).toHaveCSS('color', 'rgb(69, 119, 209)');
});

test('displayingTheIiconForMultipleChoice @regClickTractsMedium @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const tooltip = page.locator('.popup-informer__content >> nth=3');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const variablePanelMultipleIicon = page.locator('#variables-panel-variable-0 .popup-informer__ic');
    console.log('addEditTemplate Displaying The Iicon For Multiple Choice');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelMultipleIicon).toBeHidden();
    await newTemplate.textEditorField.click();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(variablePanelMultipleIicon).toBeVisible();
    await variablePanelMultipleIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('This variable-type cannot be inserted into the document twice with same name.');
    await newTemplate.textEditorFieldClear();
    await expect(variablePanelMultipleIicon).toBeHidden();
});

test('displayingTheIiconForCheckbox @regClickTractsMedium @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const tooltip = page.locator('.popup-informer__content >> nth=3');
    const checkboxTextEditor = page.locator('[role="textbox"] >> nth=1');
    const variablePanelCheckboxIicon = page.locator('#variables-panel-variable-0 .popup-informer__ic');
    console.log('addEditTemplate Displaying The Iicon For Checkbox');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelCheckboxIicon).toBeHidden();
    await newTemplate.disableSignatureCheckboxClick();
    await expect(variablePanelCheckboxIicon).toBeVisible();
    await variablePanelCheckboxIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText("To add a Checkbox Variable, uncheck 'Disable Signature' checkbox at the bottom of the template.");
    await newTemplate.disableSignatureCheckboxClick();
    await expect(variablePanelCheckboxIicon).toBeHidden();
});

test('displayingTheIiconForNested @regClickTractsMedium @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variable1ContentType = page.locator('[formcontrolname="input_type"] >> nth=1');
    const tooltip = page.locator('.popup-informer__content >> nth=3');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const nestedTextEditor = page.locator('[role="textbox"] >> nth=1');
    const variablePanelNestedIicon = page.locator('#variables-panel-variable-0 .popup-informer__ic');
    const variable1 = page.locator('#configurator-variable-1');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Displaying The Iicon For Nested');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variable1ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await nestedTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelNestedIicon).toBeHidden();
    await newTemplate.editVariablePanelOpen();
    await variable1.click();
    await nestedTextEditor.click();
    await newTemplate.textEditorFieldNestedDropDownClick();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelNestedIicon).toBeVisible();
    await variablePanelNestedIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText("This is a nested variable");
    await newTemplate.editVariablePanelOpen();
    await variable1.click();
    await nestedTextEditor.click();
    await page.keyboard.press('Meta+A');
    await page.keyboard.press('Backspace');
    await nestedTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelNestedIicon).toBeHidden();
});

test('displayingThreeDotsMenu @regClickTractsHigh @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variablePanelThreeDotsMenu = page.locator('#variables-panel-variable-0 .variable-panel-three-dots');
    console.log('addEditTemplate Displaying Three Dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await expect(variablePanelThreeDotsMenu).toBeVisible();
});

test('displayingTheLockIcon @regClickTractsLow @addEditTemplate @variablesVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const lockIcon = page.locator('.variable-form-disabled svg');
    const lockText = page.locator('.variable-form-disabled .variable-form-disabled-text');
    console.log('addEditTemplate Displaying The Lock Icon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await page.setViewportSize({width: 2500, height: 1080});
    await expect(lockIcon).toBeVisible();
    await expect(lockText).toBeVisible();
    await expect(lockText).toHaveText(' To use variables panel, close the sidebar first ');
});

test('validationOfTheInsertButton @regClickTractsHigh @addEditTemplate @variablesVariablesPanel3Dots', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const p0 = page.locator('p >> nth=0');
    console.log('addEditTemplate Validation Of The Insert Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await p0.click();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testt{{ Variable#1 }}‌ est100testtest100testtest100test');
    await page.goto('');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.click();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test{{ Variable#1 }}‌ ');
});

test('validationOfTheInsertButtonForInsertedMultipleChoice @regClickTractsHigh @addEditTemplate @variablesVariablesPanel3Dots', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const insertButton = page.locator('.action-add');
    console.log('addEditTemplate Validation Of The Insert Button For Inserted Multiple Choice');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract action-disabled');
});

test('validationOfTheInsertButtonForCheckboxIfDisableSignatureApplied @regClickTractsHigh @addEditTemplate @variablesVariablesPanel3Dots', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const insertButton = page.locator('.action-add');
    console.log('addEditTemplate Validation Of The Insert Button For Checkbox If Disable Signature Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await multipleTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract');
    await page.locator('.cdk-overlay-backdrop').click();
    await newTemplate.disableSignatureCheckboxClick();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract action-disabled');
});

test('behaviorInTheTextBodyWhenVariableInserted @regClickTractsLow @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    console.log('addEditTemplate Behavior In The Text Body When Variable Inserted');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(variable0).toContainText('{{ Variable#1 }}');
});

test('validationOfTheEditButton @regClickTractsHigh @addEditTemplate @variablesVariablesPanel3Dots', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const newVariableBtton = page.locator('#variables-list-add-new-variable');
    const editVariablePanelVariable0 = page.locator('#configurator-variable-0');
    console.log('addEditTemplate Validation Of The Edit Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(1500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelEditButtonClick();
    await expect(newVariableBtton).toBeVisible();
    await expect(editVariablePanelVariable0).toBeVisible();
    await expect(editVariablePanelVariable0).toHaveClass('mat-expansion-panel ng-tns-c26-18 ng-untouched ng-pristine ng-valid ng-star-inserted mat-expanded mat-expansion-panel-spacing');
});

test('validationOfTheCopyButton @regClickTractsLow @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variablePanelVariable0 = page.locator('#variables-panel-variable-0');
    const variablePanelVariable0Name = page.locator('#variables-panel-variable-0 .rdl-variable-name');
    const variablePanelVariable1 = page.locator('#variables-panel-variable-1');
    const variablePanelVariable1Name = page.locator('#variables-panel-variable-1 .rdl-variable-name');
    console.log('addEditTemplate Validation Of The Copy Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(variablePanelVariable0).toBeVisible();
    await expect(variablePanelVariable0Name).toHaveText(' Variable#1 ');
    await expect(variablePanelVariable1).toBeVisible();
    await expect(variablePanelVariable1Name).toHaveText(' Variable#2 ');
});

test('behaviorForVariableNameWhenCopyButtonApplied @regClickTractsLow @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variablePanelVariable1Name = page.locator('#variables-panel-variable-1 .rdl-variable-name');
    console.log('addEditTemplate Behavior For Variable Name When Copy Button Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('test100testtest100testtest100testtest100testtest60characters');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(1500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(variablePanelVariable1Name).toHaveText(' test100testtest100testtest100testtest100testtest60char..#2 ');
    await page.goto('');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('test100testtest100testtest100testtest100testt57characters');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(1500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(variablePanelVariable1Name).toHaveText(' test100testtest100testtest100testtest100testt57charact..#2 ');
});

test('behaviorForSearchWhenCopyLinkApplied @regClickTractsLow @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variablePanelVariable0 = page.locator('#variables-panel-variable-0');
    const variablePanelVariable1 = page.locator('#variables-panel-variable-1');
    const variablePanelSearch = page.locator('#configurator-search-field >> nth=0');
    console.log('addEditTemplate Behavior For Search When Copy Link Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await newTemplate.variablePanelSearch.fill('Variable#1');
    await expect(variablePanelSearch).toHaveValue('Variable#1');
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(variablePanelVariable0).toBeVisible();
    await expect(variablePanelVariable1).toBeVisible();
    await expect(variablePanelSearch).toHaveValue('');
});

test('theSequenceNumberOfTheNewCreatedVariables @regClickTractsLow @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const threeDotsVariablesPanelOption1 = page.locator('.mat-icon-button >> nth=1');
    const variablePanelVariable0 = page.locator('#variables-panel-variable-0');
    const variablePanelVariable0Name = page.locator('#variables-panel-variable-0 .rdl-variable-name');
    const variablePanelVariable1 = page.locator('#variables-panel-variable-1');
    const variablePanelVariable1Name = page.locator('#variables-panel-variable-1 .rdl-variable-name');
    const variablePanelVariable2 = page.locator('#variables-panel-variable-2');
    const variablePanelVariable2Name = page.locator('#variables-panel-variable-2 .rdl-variable-name');
    console.log('addEditTemplate The Sequence Number Of The New Created Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(variablePanelVariable0).toBeVisible();
    await expect(variablePanelVariable0Name).toHaveText('Variable#1');
    await expect(variablePanelVariable1).toBeVisible();
    await expect(variablePanelVariable1Name).toHaveText('Variable#2');
    await expect(variablePanelVariable2).toBeVisible();
    await expect(variablePanelVariable2Name).toHaveText('Variable#3');
    await threeDotsVariablesPanelOption1.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption1.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelDeleteButtonClick();
    await expect(variablePanelVariable0).toBeVisible();
    await expect(variablePanelVariable0Name).toHaveText('Variable#1');
    await expect(variablePanelVariable1).toBeVisible();
    await expect(variablePanelVariable1Name).toHaveText('Variable#3');
    await expect(variablePanelVariable2).toBeHidden();
});

test('validationOfTheDeleteButton @regClickTractsMedium @addEditTemplate @variablesVariablesPanel3Dots', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    const p0 = page.locator('p >> nth=0');
    const variablePanelVariable0 = page.locator('#variables-panel-variable-0');
    const variablePanelVariable0Name = page.locator('#variables-panel-variable-0 .rdl-variable-name');
    console.log('addEditTemplate Validation Of The Delete Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(500);
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(variablePanelVariable0).toBeVisible();
    await expect(variablePanelVariable0Name).toHaveText('Variable#1');
    await expect(variable0).toBeVisible();
    await expect(variable0).toHaveText('{{ Variable#1 }}');
    await expect(p0).toHaveText('test100test{{ Variable#1 }}‌ ');
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelDeleteButtonClick();
    await expect(variablePanelVariable0).toBeHidden();
    await expect(variable0).toBeHidden();
    await expect(p0).toHaveText('test100test‌ ');
    await expect(p0).not.toContainText('{{ Variable#1 }}‌');
});

test('theEditVariablesButton @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newVariableBtton = page.locator('#variables-list-add-new-variable');
    const editVariablesPanel = page.locator('.template-values-wrapper');
    const collapsedVariable0 = page.locator('#configurator-variable-2');
    const collapsedVariable0Collapsed = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const collapsedVariable1 = page.locator('#configurator-variable-7');
    const collapsedVariable1Collapsed = page.locator('#configurator-variable-7 mat-expansion-panel-header');
    const collapsedVariable2 = page.locator('#configurator-variable-12');
    const collapsedVariable2Collapsed = page.locator('#configurator-variable-12 mat-expansion-panel-header');
    console.log('addEditTemplate The Edit Variables Button');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanel).toBeVisible();
    await expect(editVariablesPanel).toHaveClass('template-values-wrapper ng-star-inserted expanded');
    await expect(newVariableBtton).toBeVisible();
    await expect(collapsedVariable0).toBeVisible();
    await expect(collapsedVariable0Collapsed).toHaveAttribute('aria-expanded', 'false');
    await expect(collapsedVariable1).toBeVisible();
    await expect(collapsedVariable1Collapsed).toHaveAttribute('aria-expanded', 'false');
    await expect(collapsedVariable2).toBeVisible();
    await expect(collapsedVariable2Collapsed).toHaveAttribute('aria-expanded', 'false');
    await newTemplate.editVariablePanelClose();
    await expect(editVariablesPanel).toHaveClass('template-values-wrapper ng-star-inserted');
});

test('displayingTheTextWhenNoVariables @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelNoVariablesIcon = page.locator('.no-variables svg');
    const editVariablesPanelNoVariablesText = page.locator('.no-variables .no-variables-text');
    console.log('addEditTemplate Displaying The Text When No Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanelNoVariablesIcon).toBeVisible();
    await expect(editVariablesPanelNoVariablesText).toBeVisible();
    await expect(editVariablesPanelNoVariablesText).toHaveText(' No variables yet. Click the New Variable button to add the first variable ');
});

test('validationOfTheNewVariableButton @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelPreviousVariable = page.locator('#configurator-variable-23');
    const editVariablesPanelPreviousVariableCollapsed = page.locator('#configurator-variable-23 mat-expansion-panel-header');
    const editVariablesPanelNewVariable = page.locator('#configurator-variable-24');
    const editVariablesPanelNewVariableExpanded = page.locator('#configurator-variable-24 mat-expansion-panel-header');
    console.log('addEditTemplate Validation Of The New Variable Button');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanelNewVariable).toBeHidden();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelPreviousVariable).toBeVisible();
    await expect(editVariablesPanelPreviousVariableCollapsed).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablesPanelNewVariable).toBeVisible();
    await expect(editVariablesPanelNewVariableExpanded).toHaveAttribute('aria-expanded', 'true');
});

test('behaviorTheNewVariableButtonWhenVariableSelected @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelPreviousVariable = page.locator('#configurator-variable-23');
    const editVariablesPanelPreviousVariableCollapsed = page.locator('#configurator-variable-23 mat-expansion-panel-header');
    const editVariablesPanelNewVariable = page.locator('#configurator-variable-24');
    const editVariablesPanelNewVariableExpanded = page.locator('#configurator-variable-24 mat-expansion-panel-header');
    console.log('addEditTemplate Behavior The New Variable Button When Variable Selected');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await editVariablesPanelPreviousVariable.click();
    await expect(editVariablesPanelPreviousVariable).toBeVisible();
    await expect(editVariablesPanelPreviousVariableCollapsed).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablesPanelNewVariable).toBeHidden();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelPreviousVariable).toBeVisible();
    await expect(editVariablesPanelPreviousVariableCollapsed).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablesPanelNewVariable).toBeVisible();
    await expect(editVariablesPanelNewVariableExpanded).toHaveAttribute('aria-expanded', 'true');
});

test('behaviorTheNewVariableButtonWhenCurrentIsNotFilled @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelNewVariable = page.locator('#configurator-variable-1');
    const editVariablesPanelContentTypeError = page.locator('.variables-list-form-control-input-type mat-error');
    console.log('addEditTemplate Behavior The New Variable Button When Current Is Not Filled');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelNewVariable).toBeHidden();
    await expect(editVariablesPanelContentTypeError).toBeVisible();
    await expect(editVariablesPanelContentTypeError).toHaveText(' Please select the content type of the variable. ');
});

test('behaviorTheNewVariableButtonWhenSearchApplied @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelNewVariable = page.locator('#configurator-variable-24');
    const editVariablesPanelNewVariableExpanded = page.locator('#configurator-variable-24 mat-expansion-panel-header');
    const editVariablesPanelSearchValue = page.locator('#configurator-search-field >> nth=0');
    console.log('addEditTemplate Behavior The New Variable Button When Search Applied');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.editVariablePanelSearch.fill('inputUrl');
    await expect(editVariablesPanelSearchValue).toHaveValue('inputUrl');
    await expect(editVariablesPanelNewVariable).toBeHidden();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelSearchValue).toHaveValue('');
    await expect(editVariablesPanelNewVariable).toBeVisible();
    await expect(editVariablesPanelNewVariableExpanded).toHaveAttribute('aria-expanded', 'true');
});

test('closingTheEditVariablesPanel @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanel = page.locator('.template-values-wrapper');
    const editVariablesPanelContentTypeError = page.locator('.variables-list-form-control-input-type mat-error');
    console.log('addEditTemplate Closing The Edit Variables Panel');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanel).toHaveClass('template-values-wrapper ng-star-inserted expanded');
    await newTemplate.editVariablePanelClose();
    await expect(editVariablesPanel).toHaveClass('template-values-wrapper ng-star-inserted');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.editVariablePanelClose();
    await expect(editVariablesPanel).toHaveClass('template-values-wrapper ng-star-inserted expanded');
    await expect(editVariablesPanelContentTypeError).toBeVisible();
    await expect(editVariablesPanelContentTypeError).toHaveText(' Please select the content type of the variable. ');
});

test('displayingThreeDotsMenu @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editVariablesPanelThreeDotsMenu = page.locator('#configurator-variable-0 .variable-panel-three-dots');
    console.log('addEditTemplate Displaying Three Dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelThreeDotsMenu).toBeVisible();
});

test('displayingTheIiconForTypesOfTheVariable @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const tooltip = page.locator('#configurator-variable-0 .popup-informer__content');
    const editVariablesPanelTypeIicon = page.locator('#configurator-variable-0 .popup-informer');
    console.log('addEditTemplate Displaying The Iicon For Types Of The Variable');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(editVariablesPanelTypeIicon).toBeVisible();
    await editVariablesPanelTypeIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Input variables are data input fields used by Account Admins to create manual text, date, number, and URL input fields when designing a contract template. List variables are data input fields used by Account Admins to create dropdown options when designing a contract template. Signer variables are used by Account Admins to create data entry for Contract Signers and can be edited only while signing a Contract.');
});

test('displayingTheIiconForMultipleChoice @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const tooltip = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer__content');
    const threeDotsVariablesPanelOption0 = page.locator('.mat-icon-button >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const editVariablesPanelMultipleIicon = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer');
    console.log('addEditTemplate Displaying The Iicon For Multiple Choice');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test \n \n \n')
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleTextEditor.type('test100test');
    await newTemplate.editVariablePanelClose();
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanelMultipleIicon).toBeHidden();
    await newTemplate.editVariablePanelClose();
    await threeDotsVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await page.waitForTimeout(1000);
    if (await page.locator('.action-list').isHidden()) {
        await threeDotsVariablesPanelOption0.click();
        await page.waitForSelector('.action-list');
        await page.waitForTimeout(1000);
    }
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelOpen();
    await expect(editVariablesPanelMultipleIicon).toBeVisible();
    await editVariablesPanelMultipleIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('This variable-type cannot be inserted into the document twice with same name.');
    await newTemplate.textEditorFieldClear();
    await expect(editVariablesPanelMultipleIicon).toBeHidden();
});

test('displayingTheIiconForCheckbox @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const tooltip = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer__content_checkbox');
    const checkboxTextEditor = page.locator('[role="textbox"] >> nth=1');
    const editVariablesPanelCheckboxIicon = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer__checkbox');
    console.log('addEditTemplate Displaying The Iicon For Checkbox');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test \n \n \n')
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxTextEditor.type('test100test');
    await expect(editVariablesPanelCheckboxIicon).toBeHidden();
    await newTemplate.disableSignatureCheckboxClick();
    await expect(editVariablesPanelCheckboxIicon).toBeVisible();
    await editVariablesPanelCheckboxIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText("To add a Checkbox Variable, uncheck 'Disable Signature' checkbox at the bottom of the template.");
    await newTemplate.disableSignatureCheckboxClick();
    await expect(editVariablesPanelCheckboxIicon).toBeHidden();
});

test('displayingTheIiconForNested @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variable1ContentType = page.locator('[formcontrolname="input_type"] >> nth=1');
    const tooltip = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer__content_checkbox');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const nestedTextEditor = page.locator('[role="textbox"] >> nth=1');
    const variablePanelNestedIicon = page.locator('#configurator-variable-0 .mat-expansion-panel-header-title .popup-informer__checkbox');
    const variable0 = page.locator('#configurator-variable-0');
    const variable1 = page.locator('#configurator-variable-1');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Displaying The Iicon For Nested');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variable1ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await nestedTextEditor.type('test100test');
    await variable0.click();
    await expect(variablePanelNestedIicon).toBeHidden();
    await variable1.click();
    await nestedTextEditor.click();
    await newTemplate.textEditorFieldNestedDropDownClick();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    await variable0.click();
    await expect(variablePanelNestedIicon).toBeVisible();
    await variablePanelNestedIicon.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText("This is a nested variable");
    await variable1.click();
    await nestedTextEditor.click();
    await page.keyboard.press('Meta+A');
    await page.keyboard.press('Backspace');
    await nestedTextEditor.type('test100test');
    await variable0.click();
    await expect(variablePanelNestedIicon).toBeHidden();
});

test('expanding/CollapsingTheVariables @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputDateVariableOpenClose = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const inputDateVariableStatus = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const inputDateVariableColor = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const inputDateVariableBodyColor = page.locator('#configurator-variable-2 .mat-expansion-panel-content');
    const inputTextVariable = page.locator('#configurator-variable-4');
    const newVariableStatus = page.locator('#configurator-variable-24 mat-expansion-panel-header');
    const newVariableColor = page.locator('#configurator-variable-24 .mat-expansion-panel-content');
    const newVariableBodyColor = page.locator('#configurator-variable-24 .mat-expansion-panel-content');
    const editVariablesPanelContentTypeError = page.locator('.variables-list-form-control-input-type mat-error');
    console.log('addEditTemplate Expanding/Collapsing The Variables');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    const removeAttributeInputDateVariable = await page.$('#configurator-variable-2 mat-expansion-panel-header');
    await removeAttributeInputDateVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await expect(inputDateVariableStatus).toHaveAttribute('aria-expanded', 'false');
    await expect(inputDateVariableColor).toHaveCSS('background-color', 'rgba(0, 0, 0, 0)');
    await inputDateVariableOpenClose.click();
    await expect(inputDateVariableStatus).toHaveAttribute('aria-expanded', 'true');
    await expect(inputDateVariableColor).toHaveCSS('background-color', 'rgb(246, 248, 252)');
    await expect(inputDateVariableBodyColor).toHaveCSS('background-color', 'rgb(246, 248, 252)');
    await inputDateVariableOpenClose.click();
    await inputTextVariable.hover();
    await expect(inputDateVariableStatus).toHaveAttribute('aria-expanded', 'false');
    await expect(inputDateVariableColor).toHaveCSS('background-color', 'rgba(0, 0, 0, 0)');
    await newTemplate.newVariableBttonClick();
    await inputDateVariableOpenClose.click();
    await expect(inputDateVariableStatus).toHaveAttribute('aria-expanded', 'false');
    await expect(inputDateVariableColor).toHaveCSS('background-color', 'rgba(0, 0, 0, 0)');
    await expect(editVariablesPanelContentTypeError).toBeVisible();
    await expect(editVariablesPanelContentTypeError).toHaveText(' Please select the content type of the variable. ');
    await page.goto('');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttributeNewVariable = await page.$('#configurator-variable-24 mat-expansion-panel-header');
    await removeAttributeNewVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await expect(newVariableStatus).toHaveAttribute('aria-expanded', 'true');
    await expect(newVariableColor).toHaveCSS('background-color', 'rgb(246, 248, 252)');
    await expect(newVariableBodyColor).toHaveCSS('background-color', 'rgb(246, 248, 252)');
    await newTemplate.editVariablePanelClose();
    await expect(editVariablesPanelContentTypeError).toBeVisible();
    await expect(editVariablesPanelContentTypeError).toHaveText(' Please select the content type of the variable. ');
});

test('hoveringTheVariableName @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputTextVariableEditVariablePanel = page.locator('#configurator-variable-4 mat-expansion-panel-header');
    const inputTextVariableTextEditor = page.locator('[name="elementName_1"] >> nth=0');
    console.log('addEditTemplate Hovering The Variable Name');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await inputTextVariableEditVariablePanel.hover();
    await expect(inputTextVariableTextEditor).toHaveClass('editor-variable-selected');
    await expect(inputTextVariableTextEditor).toHaveCSS('color', 'rgb(69, 119, 209)');
});

test('theVariableNameField @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variableNameField = page.locator('.variables-list-form-control-name textarea');
    const variableNameFieldError = page.locator('.variables-list-form-control-name mat-error');
    console.log('addEditTemplate The Variable Name Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(variableNameField).toHaveValue('Variable#1');
    await expect(variableNameField).toHaveAttribute('maxlength', '60');
    await newTemplate.variablePanelVariableNameField.fill('test100test _ # . ~ -');
    await expect(variableNameField).toHaveValue('test100test _ # . ~ -');
    await expect(variableNameFieldError).toBeHidden();
});

test('validationOfTheVariableNameField @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const variableNameField = page.locator('.variables-list-form-control-name textarea >> nth=1');
    const variableNameFieldError = page.locator('.variables-list-form-control-name mat-error');
    const editVariablePanelThreeDotsMenu = page.locator('.variable-panel-three-dots >> nth=1');
    const textEditorVariableName = page.locator('[name="elementName_2"]');
    console.log('addEditTemplate Validation Of The Variable Name Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test100test100test100test100test100test100test100test100test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputTextVariableClick();
    await variableNameField.fill('Variable#1');
    await newTemplate.editVariablePanelClose();
    await expect(variableNameFieldError).toBeVisible();
    await expect(variableNameFieldError).toHaveText(' Such Variable name already exists ');
    await variableNameField.fill('');
    await newTemplate.editVariablePanelClose();
    await expect(variableNameFieldError).toBeVisible();
    await expect(variableNameFieldError).toHaveText(' Please fill in this field ');
    const removeAttribute = await page.$('#configurator-variable-1 mat-expansion-panel-header');
    await removeAttribute.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField.fill('test100test100test100test100test100test100test');
    await editVariablePanelThreeDotsMenu.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(textEditorVariableName).toBeVisible();
    await expect(textEditorVariableName).toHaveText('{{ test100test100test100test100test100test100test }}');
    await variableNameField.fill('');
    await variableNameField.type('Variable#2');
    await expect(textEditorVariableName).toHaveText('{{ Variable#2 }}');
});

test('displayingTheVariableTitle @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variableNameField = page.locator('.variables-list-form-control-name textarea');
    const variableNameTitle = page.locator('#configurator-variable-0 mat-panel-title');
    console.log('addEditTemplate Displaying The Variable Title');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttribute = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttribute.evaluate(node => node.removeAttribute('aria-disabled'));
    await expect(variableNameField).toHaveValue('Variable#1');
    await expect(variableNameTitle).toBeVisible();
    await expect(variableNameTitle).toHaveText('Variable#1');
    await newTemplate.variablePanelVariableNameField.type('22');
    await expect(variableNameField).toHaveValue('Variable#122');
    await expect(variableNameTitle).toBeVisible();
    await expect(variableNameTitle).toHaveText('Variable#122');
});

test('sortingOfVariablesInTheVariableList @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variableNameField0 = page.locator('.variables-list-form-control-name textarea >> nth=0');
    const variableNameField1 = page.locator('.variables-list-form-control-name textarea >> nth=1');
    const variableNameField2 = page.locator('.variables-list-form-control-name textarea >> nth=2');
    const variableNameField3 = page.locator('.variables-list-form-control-name textarea >> nth=3');
    const variableNameField4 = page.locator('.variables-list-form-control-name textarea >> nth=4');
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const inputRadioButton2 = page.locator('#variables-list-form-control-type-2-Input');
    const inputRadioButton3 = page.locator('#variables-list-form-control-type-3-Input');
    const inputRadioButton4 = page.locator('#variables-list-form-control-type-4-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const variableContentType2 = page.locator('[formcontrolname="input_type"] >> nth=2');
    const variableContentType3 = page.locator('[formcontrolname="input_type"] >> nth=3');
    const variableContentType4 = page.locator('[formcontrolname="input_type"] >> nth=4');
    const variableNameTitle0 = page.locator('#configurator-variable-0 mat-panel-title');
    const variableNameTitle1 = page.locator('#configurator-variable-1 mat-panel-title');
    const variableNameTitle2 = page.locator('#configurator-variable-2 mat-panel-title');
    const variableNameTitle3 = page.locator('#configurator-variable-3 mat-panel-title');
    const variableNameTitle4 = page.locator('#configurator-variable-4 mat-panel-title');
    console.log('addEditTemplate Displaying The Variable Title');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField0.fill('zak');
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable1 = await page.$('#configurator-variable-1 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField1.fill('tom');
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable2 = await page.$('#configurator-variable-2 mat-expansion-panel-header');
    await removeAttributeVariable2.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField2.fill('ana');
    await inputRadioButton2.click();
    await variableContentType2.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable3 = await page.$('#configurator-variable-3 mat-expansion-panel-header');
    await removeAttributeVariable3.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField3.fill('emma');
    await inputRadioButton3.click();
    await variableContentType3.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable4 = await page.$('#configurator-variable-4 mat-expansion-panel-header');
    await removeAttributeVariable4.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField4.fill('sam');
    await inputRadioButton4.click();
    await variableContentType4.click();
    await newTemplate.inputTextVariableClick();
    await expect(variableNameTitle0).toHaveText('zak');
    await expect(variableNameTitle1).toHaveText('tom');
    await expect(variableNameTitle2).toHaveText('ana');
    await expect(variableNameTitle3).toHaveText('emma');
    await expect(variableNameTitle4).toHaveText('sam');
    await newTemplate.editVariablePanelClose();
    await newTemplate.editVariablePanelOpen();
    await expect(variableNameTitle0).toHaveText('ana');
    await expect(variableNameTitle1).toHaveText('emma');
    await expect(variableNameTitle2).toHaveText('sam');
    await expect(variableNameTitle3).toHaveText('tom');
    await expect(variableNameTitle4).toHaveText('zak');
});

test('correctDisplayingTheVariableWithGapsInName @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const contracts = new ContractsPage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const pageTitle = page.locator('.section__title');
    const variableNameField0 = page.locator('.variables-list-form-control-name textarea >> nth=0');
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu = page.locator('.variable-panel-three-dots >> nth=0');
    const textEditorVariableName = page.locator('[name="elementName_1"]');
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    console.log('addEditTemplate Correct Displaying The Variable With Gaps In Name');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await variableNameField0.fill('test 100 test');
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(textEditorVariableName).toHaveText('{{ test 100 test }}');
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await expect(page.url()).toContain('/contract/create/');
    await expect(pageTitle).toHaveText('New Contract');
    await expect(textEditorVariableName).toHaveText('{{ test 100 test }}');
    await newContract.previewContractButtonClick();
    await expect(page.url()).toContain('/contract/');
    await expect(textEditorVariableName).toHaveText('{{ test 100 test }}');
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue = await contractName.innerText();
    if (contractNameValue.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue0 = await templateName.innerText();
    if (templateNameValue0.includes('autotest'))
    {
        await templateName.click();
    }
    await expect(page.url()).toContain('/contract-template/');
    await expect(pageTitle).toHaveText('View Template');
    await expect(textEditorVariableName).toHaveText('{{ test 100 test }}');
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue1 = await templateName.innerText();
    if (templateNameValue1.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('choosingThreeTypesOfRadioButtons @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const listRadioButton = page.locator('#variables-list-form-control-type-0-List');
    const signerRadioButton = page.locator('#variables-list-form-control-type-0-Signer');
    console.log('addEditTemplate Choosing Three Types Of Radio Buttons');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(inputRadioButton).toBeVisible();
    await expect(listRadioButton).toBeVisible();
    await expect(signerRadioButton).toBeVisible();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await inputRadioButton.click();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await listRadioButton.click();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await signerRadioButton.click();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked');
});

test('displayingContentTypesInTheDropDown @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const listRadioButton = page.locator('#variables-list-form-control-type-0-List');
    const signerRadioButton = page.locator('#variables-list-form-control-type-0-Signer');
    const variableContentType = page.locator('[formcontrolname="input_type"]');
    const inputText = page.locator('.mat-option >> nth=0');
    const inputDate = page.locator('.mat-option >> nth=1');
    const inputNumber = page.locator('.mat-option >> nth=2');
    const inputUrl = page.locator('.mat-option >> nth=3');
    const inputCheckbox = page.locator('.mat-option >> nth=4');
    const inputTextarea = page.locator('.mat-option >> nth=5');
    const listText = page.locator('.mat-option >> nth=0');
    const listDate = page.locator('.mat-option >> nth=1');
    const listNumber = page.locator('.mat-option >> nth=2');
    const listUrl = page.locator('.mat-option >> nth=3');
    const listTriggeredText = page.locator('.mat-option >> nth=4');
    const listMultipleChoice = page.locator('.mat-option >> nth=5');
    const signerInputLabel = page.locator('.mat-optgroup-label >> text=Input');
    const signerInputText = page.locator('.mat-option >> nth=0');
    const signerInputDate = page.locator('.mat-option >> nth=1');
    const signerInputNumber = page.locator('.mat-option >> nth=2');
    const signerInputUrl = page.locator('.mat-option >> nth=3');
    const signerListLabel = page.locator('.mat-optgroup-label >> text=List');
    const signerListText = page.locator('.mat-option >> nth=4');
    const signerListDate = page.locator('.mat-option >> nth=5');
    const signerListNumber = page.locator('.mat-option >> nth=6');
    const signerListUrl = page.locator('.mat-option >> nth=7');
    const variableContentTypeDropDownHide = page.locator('.cdk-overlay-backdrop');
    console.log('addEditTemplate Displaying Content Types In The DropDown');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton.click();
    await variableContentType.click();
    await expect(inputText).toBeVisible();
    await expect(inputText).toHaveText(' text ');
    await expect(inputDate).toBeVisible();
    await expect(inputDate).toHaveText(' date ');
    await expect(inputNumber).toBeVisible();
    await expect(inputNumber).toHaveText(' number ');
    await expect(inputUrl).toBeVisible();
    await expect(inputUrl).toHaveText(' url ');
    await expect(inputCheckbox).toBeVisible();
    await expect(inputCheckbox).toHaveText(' checkbox ');
    await expect(inputTextarea).toBeVisible();
    await expect(inputTextarea).toHaveText(' textarea ');
    await variableContentTypeDropDownHide.click();
    await listRadioButton.click();
    await variableContentType.click();
    await expect(listText).toBeVisible();
    await expect(listText).toHaveText(' text ');
    await expect(listDate).toBeVisible();
    await expect(listDate).toHaveText(' date ');
    await expect(listNumber).toBeVisible();
    await expect(listNumber).toHaveText(' number ');
    await expect(listUrl).toBeVisible();
    await expect(listUrl).toHaveText(' url ');
    await expect(listTriggeredText).toBeVisible();
    await expect(listTriggeredText).toHaveText(' triggered text ');
    await expect(listMultipleChoice).toBeVisible();
    await expect(listMultipleChoice).toHaveText(' multiple choice ');
    await variableContentTypeDropDownHide.click();
    await signerRadioButton.click();
    await variableContentType.click();
    await expect(signerInputLabel).toBeVisible();
    await expect(signerInputText).toBeVisible();
    await expect(signerInputText).toHaveText(' text ');
    await expect(signerInputDate).toBeVisible();
    await expect(signerInputDate).toHaveText(' date ');
    await expect(signerInputNumber).toBeVisible();
    await expect(signerInputNumber).toHaveText(' number ');
    await expect(signerInputUrl).toBeVisible();
    await expect(signerInputUrl).toHaveText(' url ');
    await expect(signerListLabel).toBeVisible();
    await expect(signerListText).toBeVisible();
    await expect(signerListText).toHaveText(' text ');
    await expect(signerListDate).toBeVisible();
    await expect(signerListDate).toHaveText(' date ');
    await expect(signerListNumber).toBeVisible();
    await expect(signerListNumber).toHaveText(' number ');
    await expect(signerListUrl).toBeVisible();
    await expect(signerListUrl).toHaveText(' url ');
    await variableContentTypeDropDownHide.click();
});

test('validationOfTheContentTypeDropDown @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const contentTypeError = page.locator('.variables-list-form-control-input-type mat-error');
    console.log('addEditTemplate Validation Of The Content Type DropDown');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.editVariablePanelClose();
    await expect(contentTypeError).toBeVisible();
    await expect(contentTypeError).toHaveText(' Please select the content type of the variable. ');
});

test('validationOfTheTabKey @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const inputRadioButton2 = page.locator('#variables-list-form-control-type-2-Input');
    const inputRadioButton3 = page.locator('#variables-list-form-control-type-3-Input');
    const inputRadioButton4 = page.locator('#variables-list-form-control-type-4-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const variableContentType2 = page.locator('[formcontrolname="input_type"] >> nth=2');
    const variableContentType3 = page.locator('[formcontrolname="input_type"] >> nth=3');
    const variableContentType4 = page.locator('[formcontrolname="input_type"] >> nth=4');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelThreeDotsMenu1 = page.locator('.variable-panel-three-dots >> nth=1');
    const editVariablePanelThreeDotsMenu2 = page.locator('.variable-panel-three-dots >> nth=2');
    const editVariablePanelThreeDotsMenu3 = page.locator('.variable-panel-three-dots >> nth=3');
    const editVariablePanelThreeDotsMenu4 = page.locator('.variable-panel-three-dots >> nth=4');
    const editVariablePanelVariableStatus0 = page.locator('#configurator-variable-0 mat-expansion-panel-header');
    const editVariablePanelVariableStatus1 = page.locator('#configurator-variable-1 mat-expansion-panel-header');
    const editVariablePanelVariableStatus2 = page.locator('#configurator-variable-2 mat-expansion-panel-header');
    const editVariablePanelVariableStatus3 = page.locator('#configurator-variable-3 mat-expansion-panel-header');
    const editVariablePanelVariableStatus4 = page.locator('#configurator-variable-4 mat-expansion-panel-header');
    const textEditorVariableName2 = page.locator('[name="elementName_3"]')
    const newVariableBtton = page.locator('#variables-list-add-new-variable');
    const newVariableContentTypeError = page.locator('.mat-error >> nth=1');
    console.log('addEditTemplate Abilitiy To Use Tab Key');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable1 = await page.$('#configurator-variable-1 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu1.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable2 = await page.$('#configurator-variable-2 mat-expansion-panel-header');
    await removeAttributeVariable2.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton2.click();
    await variableContentType2.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu2.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable3 = await page.$('#configurator-variable-3 mat-expansion-panel-header');
    await removeAttributeVariable3.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton3.click();
    await variableContentType3.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu3.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable4 = await page.$('#configurator-variable-4 mat-expansion-panel-header');
    await removeAttributeVariable4.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton4.click();
    await variableContentType4.click();
    await newTemplate.inputTextVariableClick();
    await editVariablePanelThreeDotsMenu4.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(2500);
    await textEditorVariableName2.click();
    await page.waitForTimeout(2500);
    await expect(newVariableBtton).toBeVisible();
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'false');
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'false');
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'true');
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'false');
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'false');
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(editVariablePanelVariableStatus0).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus1).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus2).toHaveAttribute('aria-expanded', 'true');
    await expect(editVariablePanelVariableStatus3).toHaveAttribute('aria-expanded', 'false');
    await expect(editVariablePanelVariableStatus4).toHaveAttribute('aria-expanded', 'false');
    await newTemplate.newVariableBttonClick();
    await page.waitForTimeout(1000);
    await page.keyboard.press('Tab');
    await page.waitForTimeout(1000);
    await expect(newVariableContentTypeError).toBeVisible();
    await expect(newVariableContentTypeError).toHaveText(' Please select the content type of the variable. ');
});

test('validationOfTheText/Date/Number/Url/TextareaContentTypes @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelInputTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const templatesPage = new TemplatesPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const inputRadioButton2 = page.locator('#variables-list-form-control-type-2-Input');
    const inputRadioButton3 = page.locator('#variables-list-form-control-type-3-Input');
    const inputRadioButton4 = page.locator('#variables-list-form-control-type-4-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const variableContentType2 = page.locator('[formcontrolname="input_type"] >> nth=2');
    const variableContentType3 = page.locator('[formcontrolname="input_type"] >> nth=3');
    const variableContentType4 = page.locator('[formcontrolname="input_type"] >> nth=4');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelThreeDotsMenu1 = page.locator('.variable-panel-three-dots >> nth=1');
    const editVariablePanelThreeDotsMenu2 = page.locator('.variable-panel-three-dots >> nth=2');
    const editVariablePanelThreeDotsMenu3 = page.locator('.variable-panel-three-dots >> nth=3');
    const editVariablePanelThreeDotsMenu4 = page.locator('.variable-panel-three-dots >> nth=4');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const templateVariableTextEdtior = page.locator('.cke_enable_context_menu >> nth=1');
    const contractVariableInputText = page.locator('#configurator-variable-elementName_1');
    const contractVariableInputDate = page.locator('#configurator-variable-elementName_2');
    const contractVariableInputNumber = page.locator('#configurator-variable-elementName_3');
    const contractVariableInputUrl = page.locator('#configurator-variable-elementName_4');
    const contractVariableInputTextarea = page.locator('#configurator-variable-elementName_5');
    const contractVariableInputTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const contractVariableInputDateField = page.locator('#variables-list-form-control-value-elementName_2');
    const contractVariableInputNumberField = page.locator('#variables-list-form-control-value-elementName_3');
    const contractVariableInputUrlField = page.locator('#variables-list-form-control-value-elementName_4');
    const contractVariableInputTextareaField = page.locator('.cke_enable_context_menu');
    console.log('addEditTemplate Validation Of The Text/Date/Number/Url/Textarea Content Types');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorField.type('test100test \n \n \n');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await expect(templateVariableTextEdtior).toBeHidden();
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable1 = await page.$('#configurator-variable-1 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputDateVariableClick();
    await expect(templateVariableTextEdtior).toBeHidden();
    await editVariablePanelThreeDotsMenu1.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable2 = await page.$('#configurator-variable-2 mat-expansion-panel-header');
    await removeAttributeVariable2.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton2.click();
    await variableContentType2.click();
    await newTemplate.inputNumberVariableClick();
    await expect(templateVariableTextEdtior).toBeHidden();
    await editVariablePanelThreeDotsMenu2.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable3 = await page.$('#configurator-variable-3 mat-expansion-panel-header');
    await removeAttributeVariable3.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton3.click();
    await variableContentType3.click();
    await newTemplate.inputUrlVariableClick();
    await expect(templateVariableTextEdtior).toBeHidden();
    await editVariablePanelThreeDotsMenu3.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.newVariableBttonClick();
    const removeAttributeVariable4 = await page.$('#configurator-variable-4 mat-expansion-panel-header');
    await removeAttributeVariable4.evaluate(node => node.removeAttribute('aria-disabled'));
    await inputRadioButton4.click();
    await variableContentType4.click();
    await newTemplate.inputTextareaVariableClick();
    await expect(templateVariableTextEdtior).toBeHidden();
    await editVariablePanelThreeDotsMenu4.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.editVariablesConfiguratorClick();
    await contractVariableInputText.click();
    await expect(contractVariableInputTextField).toBeVisible();
    await expect(contractVariableInputTextField).toHaveAttribute('type', 'text');
    await contractVariableInputDate.click();
    await expect(contractVariableInputDateField).toBeVisible();
    await expect(contractVariableInputDateField).toHaveAttribute('aria-haspopup', 'true');
    await contractVariableInputNumber.click();
    await expect(contractVariableInputNumberField).toBeVisible();
    await expect(contractVariableInputNumberField).toHaveAttribute('type', 'text');
    await contractVariableInputUrl.click();
    await expect(contractVariableInputUrlField).toBeVisible();
    await expect(contractVariableInputUrlField).toHaveAttribute('type', 'text');
    await contractVariableInputTextarea.click();
    await expect(contractVariableInputTextareaField).toBeVisible();
    await expect(contractVariableInputTextareaField).toHaveAttribute('role', 'textbox');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templateName.click();
        await viewTemplate.editTemplateButtonClick();
        await page.reload();
        await newTemplate.draftToggleClick();
        await newTemplate.saveButtonClick();
        await page.goto('/contract-templates/list?&sort=-updated_at');
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('theTextareaVariableAlwaysInsertedAsANewParagraph @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelInputTypes', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const p0 = page.locator('p >> nth=0');
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const inputTextareaVariable = page.locator('[name="elementName_1"]');
    console.log('addEditTemplate The Textarea Variable Always Inserted As A New Paragraph');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextareaVariableClick();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('test100test');
    await expect(inputTextareaVariable).toBeHidden();
    await newTemplate.textEditorField.click();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('test100test{{ Variable#1 }}');
    await expect(inputTextareaVariable).toHaveCSS('display', 'block');
    await page.reload();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextareaVariableClick();
    await p0.click();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testt{{ Variable#1 }}est100test');
    await expect(inputTextareaVariable).toHaveCSS('display', 'block');
});

test('disablingTheContentTypeForNestedVariables @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelInputTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const nestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    const editVariablePanelVariable0Header = page.locator('#configurator-variable-0 mat-expansion-panel-header');
    const contentTypeText = page.locator('.mat-option >> nth=0');
    const contentTypeDate = page.locator('.mat-option >> nth=1');
    const contentTypeNumber = page.locator('.mat-option >> nth=2');
    const contentTypeUrl = page.locator('.mat-option >> nth=3');
    const contentTypeCheckbox = page.locator('.mat-option >> nth=4');
    const contentTypeTextarea = page.locator('.mat-option >> nth=5');
    const editVariablePanelTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    console.log('addEditTemplate Disabling The Content Type For Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputCheckboxVariableClick();
    await editVariablePanelTextEditor.type('test100test');
    await nestedDropDown.click();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelVariable0Header.click();
    await variableContentType0.click();
    await expect(contentTypeText).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeDate).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeNumber).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeUrl).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeCheckbox).toHaveAttribute('aria-disabled', 'true');
    await expect(contentTypeTextarea).toHaveAttribute('aria-disabled', 'true');
});

test('choosingTheCheckbox @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableText = page.locator('.text-disabled-type');
    const checkboxVariableTextLabel = page.locator('.value-triggered-text');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    console.log('addEditTemplate Choosing The Checkbox');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await expect(checkboxVariableText).toBeVisible();
    await expect(checkboxVariableText).toHaveText(' Change the Content Type if you want to change the variable to List/Signer. ');
    await expect(checkboxVariableTextLabel).toBeVisible();
    await expect(checkboxVariableTextLabel).toHaveText('Text');
    await expect(checkboxVariableTextEditorField).toBeVisible();
});

test('disablingTheCheckboxOption @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const contentTypeText = page.locator('.mat-option >> nth=0');
    const contentTypeDate = page.locator('.mat-option >> nth=1');
    const contentTypeNumber = page.locator('.mat-option >> nth=2');
    const contentTypeUrl = page.locator('.mat-option >> nth=3');
    const contentTypeCheckbox = page.locator('.mat-option >> nth=4');
    const contentTypeTextarea = page.locator('.mat-option >> nth=5');
    console.log('addEditTemplate Disabling The Checkbox Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await newTemplate.disableSignatureCheckboxClick();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await variableContentType0.click();
    await expect(contentTypeText).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeDate).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeNumber).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeUrl).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeCheckbox).toHaveAttribute('aria-disabled', 'true');
    await expect(contentTypeTextarea).toHaveAttribute('aria-disabled', 'false');
});

test('checkingTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const checkboxVariableTextEditorCounter = page.locator('.triggered-text-counter');
    console.log('addEditTemplate Checking The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await expect(checkboxVariableTextEditorField).toHaveText('');
    await expect(checkboxVariableTextEditorCounter).toBeVisible();
    await expect(checkboxVariableTextEditorCounter).toHaveText('0/4000 characters');
    await checkboxVariableTextEditorField.type('test100test+=_-)!@$* &^(@£( *!');
    await expect(checkboxVariableTextEditorField).toHaveText('test100test+=_-)!@$* &^(@£( *!');
    await expect(checkboxVariableTextEditorCounter).toHaveText('30/4000 characters including spaces ');
});

test('displayingTheVariableDropDownInTheTextEditor @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    console.log('addEditTemplate Displaying The Variable DropDown In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await expect(checkboxVariableTextEditorNestedDropDown).toBeVisible();
});

test('displayingTheVariablesContentTypesInVariablesDropDown @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButtonCheckbox = page.locator('#variables-list-form-control-type-16-Input');
    const variableContentTypeCheckbox = page.locator('[formcontrolname="input_type"] >> nth=16');
    const checkboxVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Displaying The Variables Content Types In Variables DropDown');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2968');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButtonCheckbox.click();
    await variableContentTypeCheckbox.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('inputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toHaveText('inputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toHaveText('inputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toHaveText('inputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toHaveText('listDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toHaveText('listNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toHaveText('listText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toHaveText('listUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toHaveText('signerInputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toHaveText('signerInputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toHaveText('signerInputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toHaveText('signerInputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toHaveText('signerListDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toHaveText('signerListNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toHaveText('signerListText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toHaveText('signerListUrl');
});

test('behaviorOfNestedDropDownWhenNoNestedVariables @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Behavior Of Nested DropDown When No Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('No nested variables yet');
});

test('validationOfTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page, browserName}) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const checkboxVariableTextEditorCounter = page.locator('.triggered-text-counter');
    const checkboxVariableTextEditorCounterError = page.locator('.triggered-text-counter .danger');
    const checkboxTextEditorError = page.locator('.triggered-text-error');
    console.log('addEditTemplate Validation Of The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await newTemplate.editVariablePanelClose();
    await expect(checkboxTextEditorError).toBeVisible();
    await expect(checkboxTextEditorError).toHaveText(' Please fill in this field ');
    const longText = 'test100test'.repeat(400);
    await checkboxVariableTextEditorField.fill(longText);
    await checkboxVariableTextEditorField.type('test100test');
    await expect(checkboxVariableTextEditorCounter).toBeVisible();
    await expect(checkboxVariableTextEditorCounter).toHaveText('4411/4000 characters including spaces');
    await expect(checkboxVariableTextEditorCounterError).toBeVisible();
    await expect(checkboxVariableTextEditorCounterError).toHaveCSS('color', 'rgb(255, 0, 0)');
});

test('displayingTheNestedVariableInTheTextEditor @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const checkboxVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    const checkboxTextEditorFieldNestedVariable = page.locator('#configurator-variable-1 [name="elementName_1"]');
    console.log('addEditTemplate Displaying The Nested Variable In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorNestedDropDown.click();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    await expect(checkboxTextEditorFieldNestedVariable).toBeVisible();
    await expect(checkboxTextEditorFieldNestedVariable).toHaveText('{{ Variable#1 }}');
});

test('checkboxVariableIsAlwaysInsertedAsANewParagraph @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const p0 = page.locator('p >> nth=0');
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const inputCheckboxVariable = page.locator('[name="elementName_1"]');
    console.log('addEditTemplate Checkbox Variable Is Always Inserted As A New Paragraph');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorField.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toHaveText('test100test');
    await expect(inputCheckboxVariable).toBeHidden();
    await newTemplate.textEditorField.click();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toHaveText('test100test{{ Variable#1 }}');
    await expect(inputCheckboxVariable).toHaveCSS('display', 'block');
    await page.reload();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorField.type('test100test');
    await newTemplate.editVariablePanelClose();
    await p0.click();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toHaveText('test100testtest100testtest100testtest100testtest100testt{{ Variable#1 }}est100test');
    await expect(inputCheckboxVariable).toHaveCSS('display', 'block');
});

test('disablingAllRadioButtonsWhenCheckboxApplied @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButtonInput = page.locator('#variables-list-form-control-type-0-Input input');
    const listRadioButton = page.locator('#variables-list-form-control-type-0-List');
    const listRadioButtonInput = page.locator('#variables-list-form-control-type-0-List input');
    const signerRadioButton = page.locator('#variables-list-form-control-type-0-Signer');
    const signerRadioButtonInput = page.locator('#variables-list-form-control-type-0-Signer input');
    console.log('addEditTemplate Disabling All Radio Buttons When Checkbox Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked mat-radio-disabled');
    await expect(inputRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(listRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(signerRadioButtonInput).toHaveAttribute('disabled', '');
});

test('displayingTheConfirmContentTypeChangePopup @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangePopupText = page.locator('.confirm-content-change-description');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    console.log('addEditTemplate Displaying The Confirm Content Type Change Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorField.type('test100test');
    await expect(contentChangePopup).toBeHidden();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.inputTextVariableClick();
    await expect(contentChangePopup).toBeVisible();
    await expect(contentChangePopupText).toBeVisible();
    await expect(contentChangePopupText).toHaveText(' Once Content Type is changed, previous information will be lost. Do you want to continue? ');
    await expect(contentChangeButtonYes).toBeVisible();
    await expect(contentChangeButtonNo).toBeVisible();
});

test('behaviorOfYes/NoButtonOnTheConfirmContentTypePopup @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelCheckbox', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const checkboxVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    const variableContentTypeValue = page.locator('.variables-list-form-control-input-type .mat-select-value-text');
    console.log('addEditTemplate Behavior Of Yes/No Button On The Confirm Content Type Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.inputCheckboxVariableClick();
    await checkboxVariableTextEditorField.type('test100test');
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.inputTextVariableClick();
    await contentChangeButtonNo.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('checkbox');
    await expect(checkboxVariableTextEditorField).toBeVisible();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.inputTextVariableClick();
    await contentChangeButtonYes.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('text');
    await expect(checkboxVariableTextEditorField).toBeHidden();
});

test('validationOfTheText/Date/Number/Url/Triggered/MultipleContentTypes @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelListTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value');
    const triggerField = page.locator('.key-triggered-text');
    const triggerTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleChoiceTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    console.log('addEditTemplate Validation Of The Text/Date/Number/Url/Triggered/Multiple Content Types');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTextVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.listDateVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.listNumberVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.listUrlVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggerField).toBeVisible();
    await expect(triggerTextEditor).toBeVisible();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleChoiceTextEditor).toBeVisible();
});

test('disablingTheContentTypeForNestedVariables @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelListTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const inputRadioButton1 = page.locator('#variables-list-form-control-type-1-Input');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const optionField = page.locator('.variables-list-form-control-option-value textarea');
    const nestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    const editVariablePanelVariable0Header = page.locator('#configurator-variable-0 mat-expansion-panel-header');
    const contentTypeText = page.locator('.mat-option >> nth=0');
    const contentTypeDate = page.locator('.mat-option >> nth=1');
    const contentTypeNumber = page.locator('.mat-option >> nth=2');
    const contentTypeUrl = page.locator('.mat-option >> nth=3');
    const contentTypeTriggeredText = page.locator('.mat-option >> nth=4');
    const contentTypeMultipleChoice = page.locator('.mat-option >> nth=5');
    const editVariablePanelTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    console.log('addEditTemplate Disabling The Content Type For Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTextVariableClick();
    await optionField.fill('test100test');
    await newTemplate.newVariableBttonClick();
    await inputRadioButton1.click();
    await variableContentType1.click();
    await newTemplate.inputCheckboxVariableClick();
    await editVariablePanelTextEditor.type('test100test');
    await nestedDropDown.click();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelVariable0Header.click();
    await variableContentType0.click();
    await expect(contentTypeText).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeDate).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeNumber).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeUrl).toHaveAttribute('aria-disabled', 'false');
    await expect(contentTypeTriggeredText).toHaveAttribute('aria-disabled', 'true');
    await expect(contentTypeMultipleChoice).toHaveAttribute('aria-disabled', 'true');
});

test('behavior/ValidationOfTheOptionFields @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelListTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    console.log('addEditTemplate Disabling The Content Type For Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTextVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.listDateVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'mm/dd/yyyy');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.listNumberVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.listUrlVariableClick();
    await expect(optionFiled).toBeVisible();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '2000');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
});

test('checkingText/Date/Number/UrlOption @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelListTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    const variable0 = page.locator('#configurator-variable-0 mat-expansion-panel-header');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    console.log('addEditTemplate Checking Text/Date/Number/Url Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTextVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await optionFiled.type("test100test12345@!@&<>");
    await expect(optionFiledError).toBeHidden();
    await expect(optionFiled).toHaveValue("test100test12345@!@&<>");
    await variableContentType0.click();
    await newTemplate.listDateVariableClick();
    await expect(optionFiled).toHaveAttribute('placeholder', 'mm/dd/yyyy');
    await optionFiled.type('12/28/2028');
    await expect(optionFiledError).toBeHidden();
    await expect(optionFiled).toHaveValue('12/28/2028');
    await optionFiled.fill('');
    await optionFiled.type('12.28.2028');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Date format mm/dd/yyyy ');
    await variableContentType0.click();
    await newTemplate.listUrlVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '2000');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.type('google.com');
    await expect(optionFiled).toHaveValue('google.com');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorField.type('test100test');
    await variableContentType0.click();
    await newTemplate.listNumberVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await optionFiled.type('1234');
    await expect(optionFiled).toHaveValue('1,234');
    await optionFiled.type('5');
    await expect(optionFiled).toHaveValue('12,345');
    await optionFiled.type('6');
    await expect(optionFiled).toHaveValue('123,456');
    await optionFiled.type('7');
    await expect(optionFiled).toHaveValue('1,234,567');
    await optionFiled.fill('');
    await optionFiled.type('12.3467');
    await expect(optionFiled).toHaveValue('12.3467');
    await optionFiled.fill('');
    await optionFiled.type('.1234567');
    await newTemplate.editVariablePanelClose();
    await newTemplate.saveButtonClick();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await variable0.click();
    await expect(optionFiled).toHaveValue('0.1234567');
    await optionFiled.fill('asdasdasd');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Only numbers are allowed in this field ');
    await optionFiled.fill('');
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.type('12,412,124');
    await newTemplate.editVariablePanelClose();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('checkingAdd/DeleteOption @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelListTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    const addOptionButton = page.locator('.variables-list-form-control-option-add .mat-icon >> nth=0');
    const deleteButton0 = page.locator('.variables-list-form-control-option-remove >> nth=0');
    const deleteButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    console.log('addEditTemplate Checking Add/Delete Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTextVariableClick();
    await expect(addOptionButton).toBeVisible();
    await expect(deleteButton0).toBeHidden();
    await addOptionButton.click();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.fill('test100test');
    await addOptionButton.click();
    await expect(deleteButton0).toBeVisible();
    await expect(deleteButton1).toBeVisible();
    await expect(addOptionButton).toBeVisible();
    await deleteButton1.click();
    await expect(deleteButton0).toBeHidden();
    await expect(deleteButton1).toBeHidden();
    await expect(addOptionButton).toBeVisible();
});

test('choosingTheTriggeredText @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredText = page.locator('.text-disabled-type');
    const triggeredField = page.locator('.key-triggered-text');
    const confirmButton = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    console.log('addEditTemplate Choosing The Triggered Text');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredText).toBeVisible();
    await expect(triggeredText).toHaveText(' Change the Content Type if you want to change the variable to Input/Signer. ');
    await expect(triggeredField).toBeVisible();
    await expect(confirmButton).toBeVisible();
    await expect(triggeredTextEditor).toBeVisible();
});

test('checkingTheTriggeredNumberField @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredFieldLabel = page.locator('.key-triggered-text label');
    const triggeredField = page.locator('.key-triggered-text textarea');
    console.log('addEditTemplate Checking The Triggered Number Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredField).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(triggeredField).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(triggeredField).toHaveAttribute('cdktextareaautosize', '');
    await expect(triggeredField).toHaveAttribute('maxlength', '32');
    await expect(triggeredFieldLabel).toBeVisible();
    await expect(triggeredFieldLabel).toHaveText('Trigger #1');
    await expect(triggeredField).toHaveValue('');
    await triggeredField.type('adasdasd123!Q@$653(*(*!@(_)(_)!@');
    await expect(triggeredField).toHaveValue('adasdasd123!Q@$653(*(*!@(_)(_)!@');
});

test('validationOfTheTriggeredNumberField @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredField = page.locator('.key-triggered-text textarea');
    const triggeredFieldError0 = page.locator('.key-triggered-text mat-error >> nth=0');
    const triggeredFieldError1 = page.locator('.key-triggered-text mat-error >> nth=1');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const addNewTriggerButton = page.locator('.variables-list-form-control-option-add mat-icon');
    const triggeredField0 = page.locator('.key-triggered-text >> nth=0');
    const triggeredField1 = page.locator('.key-triggered-text >> nth=1');
    const triggeredFieldLabel0 = page.locator('.key-triggered-text label >> nth=0');
    const triggeredFieldLabel1 = page.locator('.key-triggered-text label >> nth=1');
    const triggeredFieldValue0 = page.locator('.key-triggered-text textarea >> nth=0');
    const triggeredFieldValue1 = page.locator('.key-triggered-text textarea >> nth=1');
    const confirmButton1 = page.locator('.variables-list-form-control-option-confirm-text');
    console.log('addEditTemplate Validation Of The Triggered Number Field');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await confirmButton0.click();
    await expect(triggeredFieldError0).toBeVisible();
    await expect(triggeredFieldError0).toHaveText(' Please fill in this field ');
    await triggeredField.type('test100test');
    await triggeredTextEditor.type('test100test');
    await confirmButton0.click();
    await addNewTriggerButton.click();
    await triggeredFieldValue1.type('test100test');
    await expect(triggeredField0).toBeVisible();
    await expect(triggeredField1).toBeVisible();
    await expect(triggeredFieldLabel0).toBeVisible();
    await expect(triggeredFieldLabel0).toHaveText('Trigger #1');
    await expect(triggeredFieldLabel1).toBeVisible();
    await expect(triggeredFieldLabel1).toHaveText('Trigger #2');
    await expect(triggeredFieldValue0).toHaveValue('test100test');
    await expect(triggeredFieldValue1).toHaveValue('test100test');
    await triggeredTextEditor.type('test100test');
    await confirmButton1.click();
    await expect(triggeredFieldError1).toBeHidden();
});

test('collapsingExpandingTheTriggeredOption @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredField = page.locator('.key-triggered-text textarea');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const triggeredTextEditorPreview = page.locator('.triggered-text-preview');
    console.log('addEditTemplate Collapsing Expanding The Triggered Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredTextEditor).toBeVisible();
    await expect(triggeredTextEditorPreview).toBeHidden();
    await triggeredField.type('test100test');
    await triggeredTextEditor.type('test100test');
    await confirmButton0.click();
    await expect(triggeredTextEditor).toBeHidden();
    await expect(triggeredTextEditorPreview).toBeVisible();
    await triggeredTextEditorPreview.click();
    await expect(triggeredTextEditor).toBeVisible();
    await expect(triggeredTextEditorPreview).toBeHidden();
});

test('checkingTheDeleteIcon @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredField = page.locator('.key-triggered-text textarea');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const addNewTriggerButton = page.locator('.variables-list-form-control-option-add mat-icon');
    const triggeredRemoveTriggerButton0 = page.locator('.variables-list-form-control-option-remove >> nth=0');
    const triggeredRemoveTriggerButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    console.log('addEditTemplate Checking The Delete Icon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredRemoveTriggerButton0).toBeHidden();
    await expect(triggeredRemoveTriggerButton1).toBeHidden();
    await triggeredField.type('test100test');
    await triggeredTextEditor.type('test100test');
    await confirmButton0.click();
    await addNewTriggerButton.click();
    await expect(triggeredRemoveTriggerButton0).toBeVisible();
    await expect(triggeredRemoveTriggerButton1).toBeVisible();
    await triggeredRemoveTriggerButton1.click();
    await expect(triggeredRemoveTriggerButton0).toBeHidden();
    await expect(triggeredRemoveTriggerButton1).toBeHidden();
});

test('checkingTheTriggeredTextEditorPreview @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredField = page.locator('.key-triggered-text textarea');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const triggeredTextEditorPreview = page.locator('.triggered-text-preview');
    const triggeredTextEditorPreviewOverflow = page.locator('.triggered-text-preview__overflow');
    console.log('addEditTemplate Checking The Triggered Text Editor Preview');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggeredField.type('test100test');
    await triggeredTextEditor.type('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await confirmButton0.click();
    await expect(triggeredTextEditorPreview).toBeVisible();
    await expect(triggeredTextEditorPreview).toHaveText('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await expect(triggeredTextEditorPreview).toHaveCSS('max-height', '100px');
    await expect(triggeredTextEditorPreview).toHaveCSS('word-break', 'break-word');
    await expect(triggeredTextEditorPreviewOverflow).toHaveCSS('position', 'absolute');
    await expect(triggeredTextEditorPreviewOverflow).toHaveCSS('background-image', 'linear-gradient(rgba(246, 0, 0, 0), rgb(246, 248, 252))');
});

test('checkingTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const triggeredVariableTextEditorCounter = page.locator('.triggered-text-counter');
    console.log('addEditTemplate Checking The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredVariableTextEditorField).toHaveText('');
    await expect(triggeredVariableTextEditorCounter).toBeVisible();
    await expect(triggeredVariableTextEditorCounter).toHaveText('0/4000 characters');
    await triggeredVariableTextEditorField.type('test100test+=_-)!@$* &^(@£( *!');
    await expect(triggeredVariableTextEditorField).toHaveText('test100test+=_-)!@$* &^(@£( *!');
    await expect(triggeredVariableTextEditorCounter).toHaveText('30/4000 characters including spaces ');
});

test('displayingTheVariableDropDownInTheTextEditor @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    console.log('addEditTemplate Displaying The Variable DropDown In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(triggeredVariableTextEditorNestedDropDown).toBeVisible();
});

test('displayingTheVariablesContentTypesInVariablesDropDown @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButtonTriggered = page.locator('#variables-list-form-control-type-16-List');
    const variableContentTypeTriggered = page.locator('[formcontrolname="input_type"] >> nth=16');
    const triggeredVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Displaying The Variables Content Types In Variables DropDown');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2968');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButtonTriggered.click();
    await variableContentTypeTriggered.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggeredVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('inputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toHaveText('inputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toHaveText('inputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toHaveText('inputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toHaveText('listDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toHaveText('listNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toHaveText('listText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toHaveText('listUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toHaveText('signerInputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toHaveText('signerInputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toHaveText('signerInputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toHaveText('signerInputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toHaveText('signerListDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toHaveText('signerListNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toHaveText('signerListText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toHaveText('signerListUrl');
});

test('behaviorOfNestedDropDownWhenNoNestedVariables @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Behavior Of Nested DropDown When No Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggeredVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('No nested variables yet');
});

test('validationOfTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const triggeredVariableTextEditorCounter = page.locator('.triggered-text-counter');
    const triggeredVariableTextEditorCounterError = page.locator('.triggered-text-counter .danger');
    const triggeredTextEditorError = page.locator('.triggered-text-error');
    console.log('addEditTemplate Validation Of The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await newTemplate.editVariablePanelClose();
    await expect(triggeredTextEditorError).toBeVisible();
    await expect(triggeredTextEditorError).toHaveText(' Please fill in this field ');
    const longText = 'test100test'.repeat(400);
    await triggeredVariableTextEditorField.fill(longText);
    await triggeredVariableTextEditorField.type('test100test');
    await expect(triggeredVariableTextEditorCounter).toBeVisible();
    await expect(triggeredVariableTextEditorCounter).toHaveText('4411/4000 characters including spaces');
    await expect(triggeredVariableTextEditorCounterError).toBeVisible();
    await expect(triggeredVariableTextEditorCounterError).toHaveCSS('color', 'rgb(255, 0, 0)');
});

test('displayingTheNestedVariableInTheTextEditor @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const listRadioButton = page.locator('#variables-list-form-control-type-1-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const triggeredVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    const triggeredTextEditorFieldNestedVariable = page.locator('#configurator-variable-1 [name="elementName_1"]');
    console.log('addEditTemplate Displaying The Nested Variable In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await listRadioButton.click();
    await variableContentType1.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggeredVariableTextEditorNestedDropDown.click();
    await variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    await expect(triggeredTextEditorFieldNestedVariable).toBeVisible();
    await expect(triggeredTextEditorFieldNestedVariable).toHaveText('{{ Variable#1 }}');
});

test('triggeredVariableIsAlwaysInsertedAsANewParagraph @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const p0 = page.locator('p >> nth=0');
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const triggerField = page.locator('.key-triggered-text textarea');
    const triggeredVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const listTriggeredVariable = page.locator('[name="elementName_1"]');
    console.log('addEditTemplate Triggered Variable Is Always Inserted As A New Paragraph');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggerField.type('test100test');
    await triggeredVariableTextEditorField.type('test100test');
    await expect(p0).toBeVisible();
    await expect(p0).toHaveText('test100test');
    await expect(listTriggeredVariable).toBeHidden();
    await newTemplate.textEditorField.click();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('{{ Variable#1 }}');
    await expect(listTriggeredVariable).toHaveCSS('display', 'block');
    await page.reload();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggerField.type('test100test');
    await triggeredVariableTextEditorField.type('test100test');
    await p0.click();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testt{{ Variable#1 }}est100test');
    await expect(listTriggeredVariable).toHaveCSS('display', 'block');
});

test('disablingAllRadioButtonsWhenTriggeredApplied @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButtonInput = page.locator('#variables-list-form-control-type-0-Input input');
    const listRadioButton = page.locator('#variables-list-form-control-type-0-List');
    const listRadioButtonInput = page.locator('#variables-list-form-control-type-0-List input');
    const signerRadioButton = page.locator('#variables-list-form-control-type-0-Signer');
    const signerRadioButtonInput = page.locator('#variables-list-form-control-type-0-Signer input');
    console.log('addEditTemplate Disabling All Radio Buttons When Triggered Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(inputRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked mat-radio-disabled');
    await expect(listRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(signerRadioButtonInput).toHaveAttribute('disabled', '');
});

test('displayingTheConfirmContentTypeChangePopup @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggerField = page.locator('.key-triggered-text textarea');
    const triggeredVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangePopupText = page.locator('.confirm-content-change-description');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    console.log('addEditTemplate Displaying The Confirm Content Type Change Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggerField.type('test100test');
    await triggeredVariableTextEditorField.type('test100test');
    await expect(contentChangePopup).toBeHidden();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await expect(contentChangePopup).toBeVisible();
    await expect(contentChangePopupText).toBeVisible();
    await expect(contentChangePopupText).toHaveText(' Once Content Type is changed, previous information will be lost. Do you want to continue? ');
    await expect(contentChangeButtonYes).toBeVisible();
    await expect(contentChangeButtonNo).toBeVisible();
});

test('behaviorOfYes/NoButtonOnTheConfirmContentTypePopup @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggerField = page.locator('.key-triggered-text textarea');
    const triggeredVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    const variableContentTypeValue = page.locator('.variables-list-form-control-input-type .mat-select-value-text');
    console.log('addEditTemplate Behavior Of Yes/No Button On The Confirm Content Type Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await triggerField.type('test100test');
    await triggeredVariableTextEditorField.type('test100test');
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await contentChangeButtonNo.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('triggered text');
    await expect(triggeredVariableTextEditorField).toBeVisible();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await contentChangeButtonYes.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('text');
    await expect(triggeredVariableTextEditorField).toBeHidden();
});

test('checkingTheAddNewTriggerButton @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelTriggered', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const triggeredField = page.locator('.key-triggered-text textarea');
    const triggeredFieldError0 = page.locator('.key-triggered-text mat-error >> nth=0');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const triggeredTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const triggeredTextEditorError = page.locator('.triggered-text-error');
    const addNewTriggerButton = page.locator('.variables-list-form-control-option-add mat-icon');
    const triggeredTextEditorPreviewOverflow = page.locator('.triggered-text-preview__overflow');
    const triggeredRemoveTriggerButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    console.log('addEditTemplate Checking The Add New Trigger Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listTriggeredTextVariableClick();
    await addNewTriggerButton.click();
    await expect(triggeredFieldError0).toBeVisible();
    await expect(triggeredTextEditorError).toBeVisible();
    await triggeredField.type('test100test');
    await triggeredTextEditor.type('test100test');
    await expect(triggeredTextEditorPreviewOverflow).toBeHidden();
    await addNewTriggerButton.click();
    await expect(triggeredTextEditorPreviewOverflow).toBeVisible();
    await triggeredRemoveTriggerButton1.click();
    await triggeredTextEditorPreviewOverflow.click();
    await expect(triggeredTextEditorPreviewOverflow).toBeHidden();
    await confirmButton0.click();
    await addNewTriggerButton.click();
    await expect(triggeredTextEditorPreviewOverflow).toBeVisible();
});

test('choosingTheMultipleChoice @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleText = page.locator('.text-disabled-type');
    const multipleFieldLabel = page.locator('.value-triggered-text-header');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const multipleTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleRadioButton = page.locator('#variable-0-multiple_choice_type_1');
    const multipleCheckbox = page.locator('#variable-0-multiple_choice_type_2');
    console.log('addEditTemplate Checking The Add New Trigger Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleText).toBeVisible();
    await expect(multipleText).toHaveText(' Change the Content Type if you want to change the variable to Input/Signer. ');
    await expect(multipleRadioButton).toBeVisible();
    await expect(multipleRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary mat-radio-checked ng-star-inserted');
    await expect(multipleCheckbox).toBeVisible();
    await expect(multipleCheckbox).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(multipleFieldLabel).toBeVisible();
    await expect(multipleFieldLabel).toHaveText('Text');
    await expect(confirmButton0).toBeVisible();
    await expect(multipleTextEditor).toBeVisible();
});

test('collapsingExpandingTheMultipleChoiceOption @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const multipleTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleTextEditorPreview = page.locator('.triggered-text-preview');
    console.log('addEditTemplate Collapsing Expanding The Multiple Choice Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleTextEditor).toBeVisible();
    await expect(multipleTextEditorPreview).toBeHidden();
    await multipleTextEditor.type('test100test');
    await confirmButton0.click();
    await expect(multipleTextEditor).toBeHidden();
    await expect(multipleTextEditorPreview).toBeVisible();
    await multipleTextEditorPreview.click();
    await expect(multipleTextEditor).toBeVisible();
    await expect(multipleTextEditorPreview).toBeHidden();
});

test('checkingTheMultipleChoiceTextEditorPreview @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const multipleTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleTextEditorPreview = page.locator('.triggered-text-preview');
    const multipleTextEditorPreviewOverflow = page.locator('.triggered-text-preview__overflow');
    console.log('addEditTemplate Checking The Multiple Choice Text Editor Preview');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleTextEditor.type('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await confirmButton0.click();
    await expect(multipleTextEditorPreview).toBeVisible();
    await expect(multipleTextEditorPreview).toHaveText('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await expect(multipleTextEditorPreview).toHaveCSS('max-height', '100px');
    await expect(multipleTextEditorPreview).toHaveCSS('word-break', 'break-word');
    await expect(multipleTextEditorPreviewOverflow).toHaveCSS('position', 'absolute');
    await expect(multipleTextEditorPreviewOverflow).toHaveCSS('background-image', 'linear-gradient(rgba(246, 0, 0, 0), rgb(246, 248, 252))');
});

test('checkingTheDeleteIcon @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const multipleTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const addOptionButton = page.locator('.variables-list-form-control-option-add mat-icon');
    const multipleRemoveTriggerButton0 = page.locator('.variables-list-form-control-option-remove >> nth=0');
    const multipleRemoveTriggerButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    console.log('addEditTemplate Checking The Delete Icon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleRemoveTriggerButton0).toBeHidden();
    await expect(multipleRemoveTriggerButton1).toBeHidden();
    await multipleTextEditor.type('test100test');
    await confirmButton0.click();
    await addOptionButton.click();
    await expect(multipleRemoveTriggerButton0).toBeVisible();
    await expect(multipleRemoveTriggerButton1).toBeVisible();
    await multipleRemoveTriggerButton1.click();
    await expect(multipleRemoveTriggerButton0).toBeHidden();
    await expect(multipleRemoveTriggerButton1).toBeHidden();
});

test('checkingTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleVariableTextEditorCounter = page.locator('.triggered-text-counter');
    console.log('addEditTemplate Checking The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleVariableTextEditorField).toHaveText('');
    await expect(multipleVariableTextEditorCounter).toBeVisible();
    await expect(multipleVariableTextEditorCounter).toHaveText('0/4000 characters');
    await multipleVariableTextEditorField.type('test100test+=_-)!@$* &^(@£( *!');
    await expect(multipleVariableTextEditorField).toHaveText('test100test+=_-)!@$* &^(@£( *!');
    await expect(multipleVariableTextEditorCounter).toHaveText('30/4000 characters including spaces ');
});

test('displayingTheVariableDropDownInTheTextEditor @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    console.log('addEditTemplate Displaying The Variable DropDown In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(multipleVariableTextEditorNestedDropDown).toBeVisible();
});

test('displayingTheVariablesContentTypesInVariablesDropDown @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButtonMultiple = page.locator('#variables-list-form-control-type-16-List');
    const variableContentTypeMultiple = page.locator('[formcontrolname="input_type"] >> nth=16');
    const multipleVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Displaying The Variables Content Types In Variables DropDown');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2968');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButtonMultiple.click();
    await variableContentTypeMultiple.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('inputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=1')).toHaveText('inputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=2')).toHaveText('inputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=3')).toHaveText('inputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=4')).toHaveText('listDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=5')).toHaveText('listNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=6')).toHaveText('listText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=7')).toHaveText('listUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=8')).toHaveText('signerInputDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=9')).toHaveText('signerInputNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=10')).toHaveText('signerInputText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=11')).toHaveText('signerInputUrl');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=12')).toHaveText('signerListDate');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=13')).toHaveText('signerListNumber');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=14')).toHaveText('signerListText');
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=15')).toHaveText('signerListUrl');
});

test('behaviorOfNestedDropDownWhenNoNestedVariables @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const variableDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    console.log('addEditTemplate Behavior Of Nested DropDown When No Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorNestedDropDown.click();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toBeVisible();
    await expect(variableDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0')).toHaveText('No nested variables yet');
});

test('validationOfTheTextEditor @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleVariableTextEditorCounter = page.locator('.triggered-text-counter');
    const multipleVariableTextEditorCounterError = page.locator('.triggered-text-counter .danger');
    const multipleTextEditorError = page.locator('.triggered-text-error');
    console.log('addEditTemplate Validation Of The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await newTemplate.editVariablePanelClose();
    await expect(multipleTextEditorError).toBeVisible();
    await expect(multipleTextEditorError).toHaveText(' Please fill in this field ');
    const longText = 'test100test'.repeat(400);
    await multipleVariableTextEditorField.fill(longText);
    await multipleVariableTextEditorField.type('test100test');
    await expect(multipleVariableTextEditorCounter).toBeVisible();
    await expect(multipleVariableTextEditorCounter).toHaveText('4411/4000 characters including spaces');
    await expect(multipleVariableTextEditorCounterError).toBeVisible();
    await expect(multipleVariableTextEditorCounterError).toHaveCSS('color', 'rgb(255, 0, 0)');
});

test('displayingTheNestedVariableInTheTextEditor @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const listRadioButton = page.locator('#variables-list-form-control-type-1-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const variableContentType1 = page.locator('[formcontrolname="input_type"] >> nth=1');
    const multipleVariableTextEditorNestedDropDown = page.locator('.nested-variable-editor-toolbar');
    const multipleDropDownNestedVariable = page.frameLocator('.cke_panel_frame');
    const multipleTextEditorFieldNestedVariable = page.locator('#configurator-variable-1 [name="elementName_1"]');
    console.log('addEditTemplate Displaying The Nested Variable In The Text Editor');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await inputRadioButton.click();
    await variableContentType0.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.newVariableBttonClick();
    await listRadioButton.click();
    await variableContentType1.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorNestedDropDown.click();
    await multipleDropDownNestedVariable.locator('.cke_panel_listItem >> nth=0').click();
    await expect(multipleTextEditorFieldNestedVariable).toBeVisible();
    await expect(multipleTextEditorFieldNestedVariable).toHaveText('{{ Variable#1 }}');
});

test('multipleChoiceVariableIsAlwaysInsertedAsANewParagraph @regClickTractsLow @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const p0 = page.locator('p >> nth=0');
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const editVariablePanelThreeDotsMenu0 = page.locator('.variable-panel-three-dots >> nth=0');
    const multipleVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const listMultipleVariable = page.locator('[name="elementName_1"]');
    console.log('addEditTemplate Multiple Choice Variable Is Always Inserted As A New Paragraph');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorField.type('test100test');
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toHaveText('test100test');
    await expect(listMultipleVariable).toBeHidden();
    await newTemplate.textEditorField.click();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('{{ Variable#1 }}');
    await expect(listMultipleVariable).toHaveCSS('display', 'block');
    await page.reload();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorField.type('test100test');
    await newTemplate.editVariablePanelClose();
    await p0.click();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await editVariablePanelThreeDotsMenu0.click();
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await newTemplate.editVariablePanelClose();
    await expect(p0).toBeVisible();
    await expect(p0).toContainText('{{ Variable#1 }}');
    await expect(listMultipleVariable).toHaveCSS('display', 'block');
});

test('disablingAllRadioButtonsWhenMultipleChoiceApplied @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const inputRadioButton = page.locator('#variables-list-form-control-type-0-Input');
    const inputRadioButtonInput = page.locator('#variables-list-form-control-type-0-Input input');
    const listRadioButton = page.locator('#variables-list-form-control-type-0-List');
    const listRadioButtonInput = page.locator('#variables-list-form-control-type-0-List input');
    const signerRadioButton = page.locator('#variables-list-form-control-type-0-Signer');
    const signerRadioButtonInput = page.locator('#variables-list-form-control-type-0-Signer input');
    console.log('addEditTemplate Disabling All Radio Buttons When Multiple Choice Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted');
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await expect(inputRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(inputRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(listRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-checked mat-radio-disabled');
    await expect(listRadioButtonInput).toHaveAttribute('disabled', '');
    await expect(signerRadioButton).toHaveClass('rdl-radio-btn mat-radio-button mat-primary ng-star-inserted mat-radio-disabled');
    await expect(signerRadioButtonInput).toHaveAttribute('disabled', '');
});

test('displayingTheConfirmContentTypeChangePopup @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangePopupText = page.locator('.confirm-content-change-description');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    console.log('addEditTemplate Displaying The Confirm Content Type Change Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorField.type('test100test');
    await expect(contentChangePopup).toBeHidden();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await expect(contentChangePopup).toBeVisible();
    await expect(contentChangePopupText).toBeVisible();
    await expect(contentChangePopupText).toHaveText(' Once Content Type is changed, previous information will be lost. Do you want to continue? ');
    await expect(contentChangeButtonYes).toBeVisible();
    await expect(contentChangeButtonNo).toBeVisible();
});

test('behaviorOfYes/NoButtonOnTheConfirmContentTypePopup @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const multipleVariableTextEditorField = page.locator('.cke_enable_context_menu >> nth=1');
    const contentChangePopup = page.locator('.confirm-content-change');
    const contentChangeButtonYes = page.locator('.confirm-content-change-button-confirm');
    const contentChangeButtonNo = page.locator('.confirm-content-change-button-cancel');
    const variableContentTypeValue = page.locator('.variables-list-form-control-input-type .mat-select-value-text');
    console.log('addEditTemplate Behavior Of Yes/No Button On The Confirm Content Type Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleVariableTextEditorField.type('test100test');
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await contentChangeButtonNo.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('multiple choice');
    await expect(multipleVariableTextEditorField).toBeVisible();
    await variableContentType0.click();
    await page.waitForTimeout(1000);
    await newTemplate.listTextVariableClick();
    await contentChangeButtonYes.click();
    await expect(contentChangePopup).toBeHidden();
    await expect(variableContentTypeValue).toHaveText('text');
    await expect(multipleVariableTextEditorField).toBeHidden();
});

test('checkingTheAddNewOptionButton @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelMultiple', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const listRadioButton0 = page.locator('#variables-list-form-control-type-0-List');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const confirmButton0 = page.locator('.variables-list-form-control-option-confirm-text');
    const multipleTextEditor = page.locator('.cke_enable_context_menu >> nth=1');
    const multipleTextEditorError = page.locator('.triggered-text-error');
    const addNewOption = page.locator('.variables-list-form-control-option-add mat-icon');
    const multipleTextEditorPreviewOverflow = page.locator('.triggered-text-preview__overflow');
    const multipleRemoveTriggerButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    const multipleCheckbox = page.locator('#variable-0-multiple_choice_type_2');
    console.log('addEditTemplate Checking The Add New Option Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await addNewOption.click();
    await expect(multipleTextEditorError).toBeVisible();
    await multipleTextEditor.type('test100test');
    await expect(multipleTextEditorPreviewOverflow).toBeHidden();
    await addNewOption.click();
    await expect(multipleTextEditorPreviewOverflow).toBeVisible();
    await multipleRemoveTriggerButton1.click();
    await multipleTextEditorPreviewOverflow.click();
    await expect(multipleTextEditorPreviewOverflow).toBeHidden();
    await confirmButton0.click();
    await addNewOption.click();
    await expect(multipleTextEditorPreviewOverflow).toBeVisible();
    await page.reload();
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await listRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleCheckbox.click();
    await addNewOption.click();
    await expect(multipleTextEditorError).toBeVisible();
    await multipleTextEditor.type('test100test');
    await expect(multipleTextEditorPreviewOverflow).toBeHidden();
    await addNewOption.click();
    await expect(multipleTextEditorPreviewOverflow).toBeVisible();
    await multipleRemoveTriggerButton1.click();
    await multipleTextEditorPreviewOverflow.click();
    await expect(multipleTextEditorPreviewOverflow).toBeHidden();
    await confirmButton0.click();
    await addNewOption.click();
});

test('validationOfTheText/Date/Number/UrlContentInput/List @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelSignerTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const signerRadioButton0 = page.locator('#variables-list-form-control-type-0-Signer');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value');
    console.log('addEditTemplate Validation Of The Text/Date/Number/Url/Triggered/Multiple Content Types');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await signerRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.signerInputTextVariableClick();
    await expect(optionFiled).toBeHidden();
    await variableContentType0.click();
    await newTemplate.signerInputDateVariableClick();
    await expect(optionFiled).toBeHidden();
    await variableContentType0.click();
    await newTemplate.signerInputNumberVariableClick();
    await expect(optionFiled).toBeHidden();
    await variableContentType0.click();
    await newTemplate.signerInputUrlVariableClick();
    await expect(optionFiled).toBeHidden();
    await variableContentType0.click();
    await newTemplate.signerListTextVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.signerListDateVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.signerListNumberVariableClick();
    await expect(optionFiled).toBeVisible();
    await variableContentType0.click();
    await newTemplate.signerListUrlVariableClick();
    await expect(optionFiled).toBeVisible();
});

test('behavior/ValidationOfTheOptionField @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanelSignerTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const signerRadioButton0 = page.locator('#variables-list-form-control-type-0-Signer');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    console.log('addEditTemplate Disabling The Content Type For Nested Variables');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await signerRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.signerListTextVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '50');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.signerListDateVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'mm/dd/yyyy');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.signerListNumberVariableClick();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await variableContentType0.click();
    await newTemplate.signerListUrlVariableClick();
    await expect(optionFiled).toBeVisible();
    await expect(optionFiled).toHaveAttribute('aria-label', 'option');
    await expect(optionFiled).toHaveAttribute('cdkautosizemaxrows', '3');
    await expect(optionFiled).toHaveAttribute('cdkautosizeminrows', '1');
    await expect(optionFiled).toHaveAttribute('cdktextareaautosize', '');
    await expect(optionFiled).toHaveAttribute('maxlength', '2000');
    await expect(optionFiled).toHaveAttribute('type', 'text');
    await expect(optionFiled).toHaveAttribute('placeholder', 'Enter option');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
});

test('checkingText/Date/Number/UrlOption @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelSignerTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const templatesPage = new TemplatesPage(page);
    const signerRadioButton0 = page.locator('#variables-list-form-control-type-0-Signer');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    const variable0 = page.locator('#configurator-variable-0 mat-expansion-panel-header');
    const templateName = page.locator('.template-name-column-link >> nth=0');
    console.log('addEditTemplate Checking Text/Date/Number/Url Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await signerRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.signerListTextVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '50');
    await optionFiled.type("test100test12345@!@&<>");
    await expect(optionFiledError).toBeHidden();
    await expect(optionFiled).toHaveValue("test100test12345@!@&<>");
    await variableContentType0.click();
    await newTemplate.signerListDateVariableClick();
    await expect(optionFiled).toHaveAttribute('placeholder', 'mm/dd/yyyy');
    await optionFiled.type('12/28/2028');
    await expect(optionFiledError).toBeHidden();
    await expect(optionFiled).toHaveValue('12/28/2028');
    await optionFiled.fill('');
    await optionFiled.type('12.28.2028');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Date format mm/dd/yyyy ');
    await variableContentType0.click();
    await newTemplate.signerListUrlVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '2000');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.type('google.com');
    await expect(optionFiled).toHaveValue('google.com');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorField.type('test100test');
    await variableContentType0.click();
    await newTemplate.signerListNumberVariableClick();
    await expect(optionFiled).toHaveAttribute('maxlength', '200');
    await optionFiled.type('1234');
    await expect(optionFiled).toHaveValue('1,234');
    await optionFiled.type('5');
    await expect(optionFiled).toHaveValue('12,345');
    await optionFiled.type('6');
    await expect(optionFiled).toHaveValue('123,456');
    await optionFiled.type('7');
    await expect(optionFiled).toHaveValue('1,234,567');
    await optionFiled.fill('');
    await optionFiled.type('12.3467');
    await expect(optionFiled).toHaveValue('12.3467');
    await optionFiled.fill('');
    await optionFiled.type('.1234567');
    await newTemplate.editVariablePanelClose();
    await newTemplate.saveButtonClick();
    await viewTemplate.editTemplateButtonClick();
    await newTemplate.editVariablePanelOpen();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await variable0.click();
    await expect(optionFiled).toHaveValue('0.1234567');
    await optionFiled.fill('asdasdasd');
    await newTemplate.editVariablePanelClose();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Only numbers are allowed in this field ');
    await optionFiled.fill('');
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.type('12,412,124');
    await newTemplate.editVariablePanelClose();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue = await templateName.innerText();
    if (templateNameValue.includes('autotest'))
    {
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('checkingAdd/DeleteOption @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelSignerTypes', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const signerRadioButton0 = page.locator('#variables-list-form-control-type-0-Signer');
    const variableContentType0 = page.locator('[formcontrolname="input_type"] >> nth=0');
    const optionFiled = page.locator('.variables-list-form-control-option-value textarea');
    const optionFiledError = page.locator('.variables-list-form-control-option-value mat-error');
    const addOptionButton = page.locator('.variables-list-form-control-option-add .mat-icon >> nth=0');
    const deleteButton0 = page.locator('.variables-list-form-control-option-remove >> nth=0');
    const deleteButton1 = page.locator('.variables-list-form-control-option-remove >> nth=1');
    console.log('addEditTemplate Checking Add/Delete Option');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await signerRadioButton0.click();
    await variableContentType0.click();
    await newTemplate.signerListTextVariableClick();
    await expect(addOptionButton).toBeVisible();
    await expect(deleteButton0).toBeHidden();
    await addOptionButton.click();
    await expect(optionFiledError).toBeVisible();
    await expect(optionFiledError).toHaveText(' Please fill in this field ');
    await optionFiled.fill('test100test');
    await addOptionButton.click();
    await expect(deleteButton0).toBeVisible();
    await expect(deleteButton1).toBeVisible();
    await expect(addOptionButton).toBeVisible();
    await deleteButton1.click();
    await expect(deleteButton0).toBeHidden();
    await expect(deleteButton1).toBeHidden();
    await expect(addOptionButton).toBeVisible();
});

test('validationOfTheInsertButton @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const p0 = page.locator('p >> nth=0');
    console.log('addEditTemplate Validation Of The Insert Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.fill('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await p0.click();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testt{{ Variable#1 }}‌ est100testtest100testtest100test');
    await page.goto('');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.click();
    await newTemplate.textEditorField.type('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(p0).toContainText('test100testtest100testtest100testtest100testtest100testtest100testtest100testtest100test{{ Variable#1 }}‌ ');
});

test('validationOfTheInsertButtonForInsertedMultipleChoice @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const insertButton = page.locator('.action-add');
    console.log('addEditTemplate Validation Of The Insert Button For Inserted Multiple Choice');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.listRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.listMultipleChoiceVariableClick();
    await multipleTextEditor.type('test100test');
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract action-disabled');
});

test('validationOfTheInsertButtonForCheckboxIfDisableSignatureApplied @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const multipleTextEditor = page.locator('[role="textbox"] >> nth=1');
    const insertButton = page.locator('.action-add');
    console.log('addEditTemplate Validation Of The Insert Button For Checkbox If Disable Signature Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputCheckboxVariableClick();
    await multipleTextEditor.type('test100test');
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract');
    await page.locator('.cdk-overlay-backdrop').click();
    await newTemplate.disableSignatureCheckboxClick();
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await expect(insertButton).toHaveClass('action-list__item-link action action-add context-menu-create-contract action-disabled');
});

test('validationOfTheCopyButton @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelVariable0 = page.locator('#configurator-variable-0');
    const editVariablePanelVariable0Name = page.locator('#configurator-variable-0 mat-panel-title');
    const editVariablePanelVariable1 = page.locator('#configurator-variable-1');
    const editVariablePanelVariable1Name = page.locator('#configurator-variable-1 mat-panel-title');
    console.log('addEditTemplate Validation Of The Copy Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(editVariablePanelVariable0).toBeVisible();
    await expect(editVariablePanelVariable0Name).toHaveText(' Variable#1 ');
    await expect(editVariablePanelVariable1).toBeVisible();
    await expect(editVariablePanelVariable1Name).toHaveText(' Variable#2 ');
});

test('behaviorForVariableNameWhenCopyButtonApplied @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelVariable1Name = page.locator('#configurator-variable-1 mat-panel-title');
    console.log('addEditTemplate Behavior For Variable Name When Copy Button Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('test100testtest100testtest100testtest100testtest60characters');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(editVariablePanelVariable1Name).toHaveText(' test100testtest100testtest100testtest100testtest60char..#2 ');
    await page.goto('');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.variablePanelVariableNameField.fill('test100testtest100testtest100testtest100testt57characters');
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(editVariablePanelVariable1Name).toHaveText(' test100testtest100testtest100testtest100testt57charact..#2 ');
});

test('behaviorForSearchWhenCopyLinkApplied @regClickTractsLow @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelVariable0 = page.locator('#configurator-variable-0');
    const editVariablePanelVariable1 = page.locator('#configurator-variable-1');
    const editVariablePanelSearch = page.locator('#configurator-search-field >> nth=0');
    console.log('addEditTemplate Behavior For Search When Copy Link Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    await newTemplate.editVariablePanelSearch.fill('Variable#1');
    await expect(editVariablePanelSearch).toHaveValue('Variable#1');
    const removeAttributeVariable = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelCopyButtonClick();
    await expect(editVariablePanelVariable0).toBeVisible();
    await expect(editVariablePanelVariable1).toBeVisible();
    await expect(editVariablePanelSearch).toHaveValue('');
});

test('validationOfTheDeleteButton @regClickTractsMedium @addEditTemplate @variablesEditVariablesPanel3DotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable0ContentType = page.locator('[formcontrolname="input_type"] >> nth=0');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const variable0 = page.locator('[name="elementName_1"] >> nth=0');
    const p0 = page.locator('p >> nth=0');
    const editVariablePanelVariable0 = page.locator('#configurator-variable-0');
    const editVariablePanelVariable0Name = page.locator('#configurator-variable-0 mat-panel-title');
    console.log('addEditTemplate Validation Of The Delete Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.type('test100test');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await newTemplate.inputRadioButtonClick();
    await variable0ContentType.click();
    await newTemplate.inputTextVariableClick();
    const removeAttributeVariable0 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelInsertButtonClick();
    await expect(editVariablePanelVariable0).toBeVisible();
    await expect(editVariablePanelVariable0Name).toHaveText('Variable#1');
    await expect(variable0).toBeVisible();
    await expect(variable0).toHaveText('{{ Variable#1 }}');
    await expect(p0).toHaveText('test100test{{ Variable#1 }}‌ ');
    const removeAttributeVariable1 = await page.$('#configurator-variable-0 mat-expansion-panel-header');
    await removeAttributeVariable1.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await page.waitForSelector('.action-list');
    await newTemplate.threeDotsMenuVariablePanelDeleteButtonClick();
    await expect(editVariablePanelVariable0).toBeHidden();
    await expect(variable0).toBeHidden();
    await expect(p0).toHaveText('test100test‌ ');
    await expect(p0).not.toContainText('{{ Variable#1 }}‌');
});

test('searchVariables @regClickTractsHigh @addEditTemplate @variablesEditVariablesPanelSearch', async ({ page, browserName }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const variable24ContentType = page.locator('[formcontrolname="input_type"] >> nth=24');
    const threeDotsEditVariablesPanelOption0 = page.locator('.variable-panel-three-dots >> nth=0');
    const editVariablePanelNewVariableInputRadio = page.locator('#variables-list-form-control-type-24-Input');
    const editVariablePanelNewVariableNameField = page.locator('#variables-list-form-control-value-24');
    const searchField = page.locator('#configurator-search-field >> nth=0');
    const editVariablePanelTest100testVariable = page.locator('#configurator-variable-24');
    const editVariablePanelListTextVariable = page.locator('#configurator-variable-12');
    const editVariablePanelInputTextVariable = page.locator('#configurator-variable-4');
    const editVariablePanelListMultipleChoiceRadioVariable = page.locator('#configurator-variable-9');
    const variablePanelTest100testVariableAfterSearch = page.locator('#variables-panel-variable-0');
    const variablePanelTest100testVariable = page.locator('#variables-panel-variable-24');
    const variablePanelListTextVariable = page.locator('#variables-panel-variable-12');
    const variablePanelInputTextVariable = page.locator('#variables-panel-variable-4');
    const variablePanelListMultipleChoiceRadioVariable = page.locator('#variables-panel-variable-9');
    const threeDotsInsertButton = page.locator('.action-add');
    const threeDotsEditButton = page.locator('.action-edit');
    const threeDotsCopyButton = page.locator('.action-copy');
    const threeDotsDeleteButton = page.locator('.action-delete');
    const editVariablesPanelNoVariablesText = page.locator('.no-variables-text');
    console.log('addEditTemplate Search Variables');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/edit/2354');
    await newTemplate.editVariablePanelOpen();
    await newTemplate.newVariableBttonClick();
    await editVariablePanelNewVariableNameField.fill('');
    await editVariablePanelNewVariableNameField.type('test100test');
    await editVariablePanelNewVariableInputRadio.click();
    await variable24ContentType.click();
    await newTemplate.inputTextVariableClick();
    await searchField.type('test100test');
    await expect(editVariablePanelTest100testVariable).toBeVisible();
    await expect(editVariablePanelListTextVariable).toBeHidden();
    await expect(editVariablePanelInputTextVariable).toBeHidden();
    await expect(editVariablePanelListMultipleChoiceRadioVariable).toBeHidden();
    const removeAttributeVariable0 = await page.$('#configurator-variable-24 mat-expansion-panel-header');
    await removeAttributeVariable0.evaluate(node => node.removeAttribute('aria-disabled'));
    await threeDotsEditVariablesPanelOption0.click();
    await expect(threeDotsInsertButton).toBeVisible();
    await expect(threeDotsCopyButton).toBeVisible();
    await expect(threeDotsDeleteButton).toBeVisible();
    await page.locator('.cdk-overlay-backdrop').click();
    await searchField.fill('');
    await expect(editVariablePanelTest100testVariable).toBeVisible();
    await expect(editVariablePanelListTextVariable).toBeVisible();
    await expect(editVariablePanelInputTextVariable).toBeVisible();
    await expect(editVariablePanelListMultipleChoiceRadioVariable).toBeVisible();
    await searchField.type('zazazaza');
    await expect(editVariablesPanelNoVariablesText).toBeVisible();
    await expect(editVariablesPanelNoVariablesText).toHaveText(' There is no variable with such name/content ');
    await newTemplate.editVariablePanelClose();
    await page.waitForTimeout(1500);
    await searchField.type('test100test');
    await expect(variablePanelTest100testVariableAfterSearch).toBeVisible();
    await expect(variablePanelListTextVariable).toBeHidden();
    await expect(variablePanelInputTextVariable).toBeHidden();
    await expect(variablePanelListMultipleChoiceRadioVariable).toBeHidden();
    await threeDotsEditVariablesPanelOption0.click();
    await expect(threeDotsInsertButton).toBeVisible();
    await expect(threeDotsEditButton).toBeVisible();
    await expect(threeDotsCopyButton).toBeVisible();
    await expect(threeDotsDeleteButton).toBeVisible();
    await page.locator('.cdk-overlay-backdrop').click();
    await searchField.fill('');
    await expect(variablePanelTest100testVariable).toBeVisible();
    await expect(variablePanelListTextVariable).toBeVisible();
    await expect(variablePanelInputTextVariable).toBeVisible();
    await expect(variablePanelListMultipleChoiceRadioVariable).toBeVisible();
    await searchField.type('zazazaza');
    await expect(editVariablesPanelNoVariablesText).toBeVisible();
    await expect(editVariablesPanelNoVariablesText).toHaveText(' There is no variable with such name/content ');
});

test('displayingThePaytractsPanel @regClickTractsHigh @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const payTractsPanel = page.locator('app-contract-template-details-paytracts');
    console.log('addEditTemplate Displaying The Paytracts Panel');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanel).toBeVisible();
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanel).toBeHidden();
});

test('displaying/ValidationThePaytractsPanelToggle @regClickTractsHigh @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const payTractsPanel = page.locator('app-contract-template-details-paytracts');
    const payTractsPanelToggle = page.locator('#form-control-is_paytracts input');
    const payTractsPanelPaymentProductsList = page.locator('.payment-products__list');
    const payTractsContractFeeText = page.locator("//div[contains(@class,'flx-col flx-end')]");
    const payTractsUpdatePlanButton = page.locator('#template-detail-update-plan');
    console.log('addEditTemplate Displaying/Validation The Paytracts Panel Toggle');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanelToggle).toBeVisible();
    await expect(payTractsPanelToggle).not.toBeChecked();
    await expect(payTractsPanelToggle).not.toBeDisabled();
    await newTemplate.paytractsToggleClick();
    await expect(payTractsPanelPaymentProductsList).toBeVisible();
    await expect(payTractsContractFeeText).toBeVisible();
    await page.goto('');
    await userBar.logOutAction();
    await users.AANoPaytracts();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanel).toBeVisible();
    await expect(payTractsPanelToggle).toBeVisible();
    await expect(payTractsPanelToggle).not.toBeChecked();
    await expect(payTractsPanelToggle).toBeDisabled();
    await expect(payTractsUpdatePlanButton).toBeVisible();
    await expect(payTractsPanel).toContainText('Your subscription does not currently inlcude the PayTracts feature. Please upgrade to a package that inclludes PayTracts to allow your clients to sign and pay for the ClickTracts contracts within the ContractsRx system. You can get help by using the Intercom button below.');
    await newTemplate.paytractsToggleForErrorClick();
    await expect(payTractsPanelPaymentProductsList).toBeHidden();
    await expect(payTractsContractFeeText).toBeHidden();
});

test('displayingIiconForPaytractsPanel @regClickTractsMedium @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const paytractsPanelIicon = page.locator('#template-detail-paytracts-info');
    const paytractsPanelIiconTooltip = page.locator('app-contract-template-details-paytracts .popup-informer__content');
    console.log('addEditTemplate Displaying Iicon For Paytracts Panel');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(paytractsPanelIicon).toBeVisible();
    await paytractsPanelIicon.click();
    await expect(paytractsPanelIiconTooltip).toBeVisible();
    await expect(paytractsPanelIiconTooltip).toHaveText('PayTracts allows your clients to pay for ClickTracts contracts with your company all in one place. \n You can track payments and signatures statuses within the ClickTracts system.');
});

test('checkingDisablingThePaytractsToggle @regClickTractsHigh @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const tooltip = page.locator('.mat-tooltip');
    const payTractsPanel = page.locator('app-contract-template-details-paytracts');
    const payTractsPanelToggle = page.locator('#form-control-is_paytracts input');
    const payTractsPanelHover = page.locator('#paytracts-toggle');
    const payTractsPanelPaymentProductsList = page.locator('.payment-products__list');
    const payTractsContractFeeText = page.locator("//div[contains(@class,'flx-col flx-end')]");
    console.log('addEditTemplate Checking Disabling The Paytracts Toggle');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.multipartyToggleClick();
    await expect(payTractsPanel).toBeVisible();
    await expect(payTractsPanelToggle).toBeVisible();
    await expect(payTractsPanelToggle).not.toBeChecked();
    await expect(payTractsPanelToggle).toBeDisabled();
    await payTractsPanelHover.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Paytracts cannot be turned on because multiparty signatures are enabled');
    await newTemplate.paytractsToggleForErrorClick();
    await expect(payTractsPanelPaymentProductsList).toBeHidden();
    await expect(payTractsContractFeeText).toBeHidden();
});

test('checkingTheRefreshIcon @regClickTractsLow @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const payTractsPanelPaymentProductsList = page.locator('.payment-products__list');
    const refreshIcon = page.locator('#template-detail-paytracts-refresh-icon');
    const refreshCircle = page.locator('app-contract-template-details-paytracts mat-spinner');
    console.log('addEditTemplate Checking The Refresh Icon');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.paytractsToggleClick();
    await expect(refreshIcon).toBeVisible();
    await refreshIcon.click();
    await expect(refreshCircle).toBeVisible();
    await refreshCircle.isHidden();
    await expect(payTractsPanelPaymentProductsList).toBeVisible();
});

test('displayingTheListOfStripe/InfoOfProductsForPaytractsPanel @regClickTractsLow @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const product0 = page.locator('.payment-products__item >> nth=0');
    const product0Number = page.locator('.payment-products__item .number-column >> nth=0');
    const product0Price = page.locator('.payment-products__item .left-column >> nth=0');
    const product0Name = page.locator('.payment-products__item .right-column >> nth=0');
    const product1 = page.locator('.payment-products__item >> nth=1');
    const product1Number = page.locator('.payment-products__item .number-column >> nth=1');
    const product1Price = page.locator('.payment-products__item .left-column >> nth=1');
    const product1Name = page.locator('.payment-products__item .right-column >> nth=1');
    console.log('addEditTemplate Displaying The List Of Stripe/Info Of Products For Paytracts Panel');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.paytractsToggleClick()
    await expect(product0).toBeVisible();
    await expect(product0Number).toBeVisible();
    await expect(product0Number).toHaveText('1. ');
    await expect(product0Price).toBeVisible();
    await expect(product0Price).toHaveText(' 150 usd Recurring 1 month');
    await expect(product0Name).toBeVisible();
    await expect(product0Name).toHaveText(' (Test_2) ');
    await expect(product1).toBeVisible();
    await expect(product1Number).toBeVisible();
    await expect(product1Number).toHaveText('2. ');
    await expect(product1Price).toBeVisible();
    await expect(product1Price).toHaveText(' 100 eur Recurring 1 month');
    await expect(product1Name).toBeVisible();
    await expect(product1Name).toHaveText(' (WW Product 4_ test test test 4 Test...) ');
});

test('validationOfTheInsertVariableButton @regClickTractsHigh @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateBodyPaytractsVariable0 = page.locator('[name="paytracts-contract-fee"] >> nth=0');
    const templateBodyPaytractsVariable1 = page.locator('[name="paytracts-contract-fee"] >> nth=1');
    const templateBodyPaytractsVariable2 = page.locator('[name="paytracts-contract-fee"] >> nth=2');
    console.log('addEditTemplate Validation Of The Insert Variable Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.textEditorField.click();
    await newTemplate.textEditorField.type('test100testAutotest\n \n \n ');
    await newTemplate.paytractsToggleClick();
    await newTemplate.paytractsInsertButtonClick();
    await expect(templateBodyPaytractsVariable0).toBeVisible();
    await newTemplate.paytractsInsertButtonClick();
    await expect(templateBodyPaytractsVariable0).toBeVisible();
    await expect(templateBodyPaytractsVariable1).toBeVisible();
    await newTemplate.paytractsInsertButtonClick();
    await expect(templateBodyPaytractsVariable0).toBeVisible();
    await expect(templateBodyPaytractsVariable1).toBeVisible();
    await expect(templateBodyPaytractsVariable2).toBeVisible();
    await newTemplate.paytractsToggleClick();
    await expect(templateBodyPaytractsVariable0).toBeHidden();
    await expect(templateBodyPaytractsVariable1).toBeHidden();
    await expect(templateBodyPaytractsVariable2).toBeHidden();
});

test('validationOfTheAddButton @regClickTractsMedium @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const addButton = page.locator('#template-detail-paytracts-add2');
    console.log('addEditTemplate Validation Of The Add Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.paytractsToggleClick();
    await addButton.click();
    const [page2] = await Promise.all([
        page.waitForEvent('popup'),
    ]);
    await page2.waitForLoadState();
    await expect(page2).toHaveURL('https://dashboard.stripe.com/login?redirect=%2Fproducts');
});

test('checkingTheContractFeeText @regClickTractsMedium @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const payTractsContractFeeText = page.locator("//div[contains(@class,'flx-col flx-end')]");
    console.log('addEditTemplate Checking The Contract Fee Text');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.paytractsToggleClick();
    await expect(payTractsContractFeeText).toBeVisible();
    await newTemplate.paytractsToggleForErrorClick();
    await expect(payTractsContractFeeText).toBeHidden();
});

test('checkingWhenClientDoesNotHavePaytrcatsAccess @regClickTractsMedium @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const payTractsPanel = page.locator('app-contract-template-details-paytracts');
    const payTractsPanelToggle = page.locator('#form-control-is_paytracts input');
    const payTractsUpdatePlanButton = page.locator('#template-detail-update-plan');
    console.log('addEditTemplate Checking When Client Does Not Have Paytrcats Access');
    await users.AANoPaytracts();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanelToggle).toBeDisabled();
    await expect(payTractsUpdatePlanButton).toBeVisible();
    await expect(payTractsPanel).toContainText('Your subscription does not currently inlcude the PayTracts feature. Please upgrade to a package that inclludes PayTracts to allow your clients to sign and pay for the ClickTracts contracts within the ContractsRx system. You can get help by using the Intercom button below.');
    await newTemplate.paytractsToggleForErrorClick();
    await expect(payTractsPanelToggle).toBeDisabled();
    await expect(payTractsPanelToggle).not.toBeChecked();
});



test('checkingWhenClientWithPaytractsDoesNotHaveConnectedStripe @regClickTractsMedium @addEditTemplate @payTractsPanel', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const payTractsPanel = page.locator('app-contract-template-details-paytracts');
    const payTractsPanelToggle = page.locator('#form-control-is_paytracts input');
    const connectButton = page.locator('#template-detail-paytracts-connect');
    const connectStripePopup = page.locator('connect-paytracts');
    console.log('addEditTemplate Checking When Client With Paytracts Does Not Have Connected Stripe');
    await users.AA4();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await expect(payTractsPanel).toBeVisible();
    await expect(payTractsPanelToggle).toBeDisabled();
    await expect(connectButton).toBeVisible();
    await expect(payTractsPanel).toContainText('No Stripe account connected');
    await newTemplate.paytractsToggleForErrorClick();
    await expect(payTractsPanelToggle).toBeDisabled();
    await expect(payTractsPanelToggle).not.toBeChecked();
    await connectButton.click();
    await expect(connectStripePopup).toBeVisible();
    await page.goto('/contract-template/edit/904');
    await expect(payTractsPanel).toBeVisible();
    await expect(payTractsPanelToggle).not.toBeDisabled();
    await expect(payTractsPanelToggle).toBeChecked();
    await expect(payTractsPanel).toContainText('No Stripe account connected');
    await expect(connectButton).toBeVisible();
    await newTemplate.createContractButtonClick();
    await expect(page).toHaveURL('/contract/create/904');
});



test.afterEach(async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const editTemplate = new NewEditCopyTemplatePage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const changeStatusPopup = page.locator('.modal-header >> text=You must first change the Template status');
    await page.goto('');
    if (await page.locator('#login-sign-in').isVisible())
    {
        await users.AA();
        await signIn.signInButton();
        await page.waitForURL('/dashboard');
    }
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValueSA = await templateName.innerText();
        if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }
        else if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }
        else if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }          
});