import { test , expect } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { TemplatesPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'

test.beforeEach(async ({ page }) => {
    await page.goto('');
}); 

test('buttonsOf3dotsMenuDraftStatus @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const editButton = page.locator('.context-menu-edit');
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const shareAccessButton = page.locator('.context-menu-share-access');
    const createContractButton = page.locator('.context-menu-create-contract');
    const deleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Buttons Of 3dots Menu Draft Status');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeVisible();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
});

test('buttonsOf3dotsMenuPublishedStatus @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editButton = page.locator('.context-menu-edit');
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const shareAccessButton = page.locator('.context-menu-share-access');
    const createContractButton = page.locator('.context-menu-create-contract');
    const deleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Buttons Of 3dots Menu Published Status');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeHidden();
    await expect(saveAsNewButton).toBeHidden();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.shareAccessButtonClick();
    await newTemplate.shareAccessPopupSearchFieldFill();
    await page.click('.mat-checkbox >> nth=1');
    await newTemplate.shareAccessPopupAddButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeHidden();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('editButton3dotsMenu @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    console.log('template3dotsMenu Edit Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/contract-template/edit/');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/contract-template/edit/');
});

test.skip('saveAsNewButton3dotsMenu @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const copiedTemplateName = page.locator('.template-name-column-link >> nth=0'); //[formcontrolname="title"]
    console.log('template3dotsMenu Save As New Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    await page.waitForSelector('[formcontrolname="title"]');
    expect(page.url()).toContain('/contract-template/clone/');
    await page.waitForTimeout(1000);
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(copiedTemplateName).toContainText('Copy of');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    await page.waitForSelector('[formcontrolname="title"]');
    expect(page.url()).toContain('/contract-template/clone/');
    await page.waitForTimeout(1000);
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(copiedTemplateName).toContainText('Copy of');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

    //to be refactored
test('templateWithSetUpVisibilityOnly @regClickTractsHigh @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newEditTemplate = new NewEditCopyTemplatePage(page);
    const createdTemplate = page.locator('.template-name-column-link >> nth=0');
    console.log('template3dotsMenu Template With Set Up Visibility Only 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newEditTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newEditTemplate.notesFieldFill(Helpers.generateRandomString());
    await newEditTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newEditTemplate.publishToggleClick();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.permissionVisibilityOnlyAAValueChoose();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.permissionVisibilityOnlyMeValueChoose();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.draftToggleClick();
    await newEditTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('SACanSaveAsNewTemplateCreatedByAA @regClickTractsLow @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    console.log('template3dotsMenu SA Can Save As New Template Created By AA 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(saveAsNewButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    expect(page.url()).toContain('/contract-template/clone/');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(saveAsNewButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    expect(page.url()).toContain('/contract-template/clone/');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('deletePopupForPublishedTemplates3dotsMenu @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const shareAccessButton = page.locator('.context-menu-share-access');
    console.log('template3dotsMenu Delete Popup For Published Templates 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await page.waitForTimeout(1500);
});

test('SACanShareTemplatesCreatedByAA @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const shareAccessButton = page.locator('.context-menu-share-access');
    const shareAccesPopup = page.locator('.mat-dialog-container');
    const shareAccesPopupHeaderText = page.locator('.modal-header');
    console.log('template3dotsMenu SA Can Share Templates Created by AA 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuShareAccessButtonClcik();
    await expect(shareAccesPopup).toBeVisible();
    await expect(shareAccesPopupHeaderText).toHaveText('Share access');
    await page.click('#modal-share-access-close');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('createContractButton3dotsMenu @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const createContractButton = page.locator('.context-menu-create-contract');
    console.log('template3dotsMenu Create Contract Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuCreateContractButtonClick();
    expect(page.url()).toContain('/contract/create/');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuCreateContractButtonClick();
    expect(page.url()).toContain('/contract/create/');
});

test('solutionAdminCanSeeAllTemplates3dotsMenu @regClickTractsHigh @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const createdTemplate = page.locator('.mat-column-templateName >> nth=1');
    console.log('template3dotsMenu Solution Admin Can See All Templates 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toBeVisible();
    await expect(createdTemplate).toContainText('autotest');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await expect(createdTemplate).toBeVisible();
    await expect(createdTemplate).toContainText('autotest');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('accountAdminsOfOneClientCanManageTemplates @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const displayingEditButton = page.locator('.context-menu-edit');
    const displayingSaveAsNewButton = page.locator('.context-menu-save-as-new');
    const displayingCreateContractButton = page.locator('.context-menu-create-contract');
    const displayingDeleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Account Admins Of One Client Can Manage Templates 3dots Menu');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingEditButton).toBeVisible();
    await expect(displayingSaveAsNewButton).toBeVisible();
    await expect(displayingCreateContractButton).toBeVisible();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingEditButton).toBeVisible();
    await expect(displayingSaveAsNewButton).toBeVisible();
    await expect(displayingDeleteButton).toBeVisible();
});

test('deleteButton3dotsMenu @regClickTractsMedium @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const displayingDeleteButton = page.locator('.context-menu-delete');
    const deletedTemplate = page.locator('.mat-column-templateName >> nth=1');
    console.log('template3dotsMenu Delete Button 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.notesFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.waitForTimeout(1000);
    await page.locator('.mat-button >> text=Delete').click();
    await page.waitForTimeout(2000);
    await expect(deletedTemplate).not.toContainText('autotest');
});

test('deletePopupForPublishedTemplates3dotsMenu @regClickTractsLow @template3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const deletePopupPublishTemplate = page.locator('.mat-dialog-container');
    const deletePopupPublishTemplateText = page.locator('.modal-header');
    console.log('template3dotsMenu Delete Popup For Published Templates 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopupPublishTemplate).toBeVisible();
    await expect(deletePopupPublishTemplateText).toBeVisible();
    await expect(deletePopupPublishTemplateText).toContainText('You must first change the Template status');
    await page.locator('.mat-button >> text=Cancel').click();
    await expect(deletePopupPublishTemplate).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-created_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopupPublishTemplate).toBeVisible();
    await expect(deletePopupPublishTemplateText).toBeVisible();
    await expect(deletePopupPublishTemplateText).toContainText('You must first change the Template status');
    await page.locator('.mat-button >> text=Cancel').click();
    await expect(deletePopupPublishTemplate).toBeHidden();
});