import { test , expect } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { SignInPage } from '../../framework'
import { Pagination } from '../../framework'
import { ManageDisplay } from '../../framework'
import { TemplatesPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'

// test.describe.parallel("templatesPage", () => {


    // 20 failed
    // [webkit] › specs/reg/templates.spec.ts:16:1 › visibilityTheTemplateCreatedBySAForAA/AU @regClickTractsMedium @templates 
    // [webkit] › specs/reg/templates.spec.ts:131:1 › displayingHoverWithNotesOnTemplateName @regClickTractsMedium @templates 
    // [webkit] › specs/reg/templates.spec.ts:164:1 › sizeOfNotesHoverOnTemplateName @regClickTractsLow @templates 
    // [webkit] › specs/reg/templates.spec.ts:196:1 › displayingEditIconInFrontOfTemplateName @regClickTractsLow @templates 
    // [webkit] › specs/reg/templates.spec.ts:274:1 › displayingVisibilityIcon @regClickTractsMedium @templates 
    // [webkit] › specs/reg/templates.spec.ts:353:1 › displayingTheAccordingInfoInPermissionsColumn @regClickTractsLow @templates 
    // [webkit] › specs/reg/templates.spec.ts:449:1 › sortingOnTheListOfTemplatesPage @regClickTractsLow @templates 
    // [webkit] › specs/reg/templates.spec.ts:871:1 › displayingInfoInTheConfirmBackgroundExportPopup @regClickTractsLow @templates @templatesExport 
    // [webkit] › specs/reg/templates.spec.ts:1403:1 › SACanSaveAsNewTemplateCreatedByAA @regClickTractsLow @templates @templates3dotsMenu 
    // [webkit] › specs/reg/templates.spec.ts:1608:1 › SACanShareTemplatesCreatedByAA @regClickTractsMedium @templates @templates3dotsMenu 
    // [webkit] › specs/reg/templates.spec.ts:1839:1 › deleteButton3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu 
    // [webkit] › specs/reg/templates.spec.ts:1910:1 › displaying/NotDisplayingDeleteTemplatesButton @regClickTractsLow @templates @templatesDeleteTemplates 
    // [chrome] › specs/reg/templates.spec.ts:131:1 › displayingHoverWithNotesOnTemplateName @regClickTractsMedium @templates 
    // [chrome] › specs/reg/templates.spec.ts:164:1 › sizeOfNotesHoverOnTemplateName @regClickTractsLow @templates 
    // [chrome] › specs/reg/templates.spec.ts:196:1 › displayingEditIconInFrontOfTemplateName @regClickTractsLow @templates 
    // [chrome] › specs/reg/templates.spec.ts:371:1 › displaying/ValidationModelColumn @regClickTractsLow @templates 
    // [chrome] › specs/reg/templates.spec.ts:997:1 › gettingEmailWithCSVFile @regClickTractsMedium @templates @templatesExport 
    // [chrome] › specs/reg/templates.spec.ts:1276:1 › templateWithSetUpVisibilityOnly @regClickTractsHigh @templates @templates3dotsMenu 
    // [chrome] › specs/reg/templates.spec.ts:1475:1 › deletePopupForPublishedTemplates3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu 
    // [chrome] › specs/reg/templates.spec.ts:2006:1 › validationDeleteButtonDoUReallyWantToDeletePopup @regClickTractsLow @templates @templatesDeleteTemplates 




test.beforeEach(async ({ page }) => {
    await page.goto('');
});

test('visibilityTheTemplateCreatedBySAForAA/AU @regClickTractsMedium @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateColumn = page.locator('.mat-column-templateName .td__link >> nth=0');
    console.log('templates Visibility The Template Created By SA For AA/AU');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.shareAccessButtonClick();
    await newTemplate.shareAccessPopupSearchFieldFill();
    await page.click('.mat-checkbox >> nth=1');
    await newTemplate.shareAccessPopupAddButtonClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const temlateColumnText = await templateColumn.textContent();
    await expect(temlateColumnText).not.toContain('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const temlateColumnText1 = await templateColumn.textContent();
    await expect(temlateColumnText1).not.toContain('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const temlateColumnText2 = await templateColumn.textContent();
    await expect(temlateColumnText2).toContain('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const temlateColumnText3 = await templateColumn.textContent();
    await expect(temlateColumnText3).toContain('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('openingViewTemplatePageTappingOnTemplateName @regClickTractsLow @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateColumn = page.locator('.mat-column-templateName >> nth=1');
    const pageTitle = page.locator('.section__title');
    const editTemplateButton = page.locator('#template-view-edit-template');
    console.log('templates Opening View Template Page Tapping On Template Name');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateColumn.click();
    await expect(page.url()).toContain('/contract-template/');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('View Template');
    await expect(editTemplateButton).toBeVisible();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('displayingHoverWithNotesOnTemplateName @regClickTractsMedium @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateColumn = page.locator('.mat-column-templateName >> nth=1');
    const templateNameHover = page.locator('.popup-informer__content');
    console.log('templates Displaying Hover With Notes On Template Name');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateColumn.hover();
    await page.waitForTimeout(500);
    await expect(templateNameHover).toBeHidden();
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateColumn.hover();
    await page.waitForTimeout(500);
    await expect(templateNameHover).toBeVisible();
    await expect(templateNameHover).toContainText('autotest');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('sizeOfNotesHoverOnTemplateName @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const templateColumn = page.locator('.mat-column-templateName >> nth=1');
    const templateNameHover = page.locator('.popup-informer__content');
    console.log('templates Size Of Notes Hover On Template Name');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateColumn.hover();
    await expect(templateNameHover).toHaveCSS('width', '292px');
    await expect(templateNameHover).toHaveCSS('height', '15px');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templateColumn.hover();
    await expect(templateNameHover).toHaveCSS('width', '292px');
    await expect(templateNameHover).toHaveCSS('height', '150px');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('displayingEditIconInFrontOfTemplateName @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editTemplateColumn = page.locator('.mat-column-checkEdited >> nth=0');
    const editTemplateIcon = page.locator('.check-edited-circle >> nth=0');
    const editTemplateIconNotVisible = page.locator('.check-edited-circle >> nth=2');
    console.log('templates displayingEditIconInFrontOfTemplateName');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(editTemplateColumn).toBeVisible();
    await expect(editTemplateIcon).toBeVisible();
    await expect(editTemplateIconNotVisible).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(editTemplateColumn).toBeVisible();
    await expect(editTemplateIcon).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(editTemplateColumn).toBeVisible();
    await expect(editTemplateIcon).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(editTemplateColumn).toBeVisible();
    await expect(editTemplateIcon).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(editTemplateColumn).toBeVisible();
    await expect(editTemplateIcon).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
});

test('displayingVisibilityIcon @regClickTractsMedium @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const visibilityColumn = page.locator('.mat-column-visibility >> nth=0');
    const visibilityOnlyMeIcon = page.locator('.visibility-only-account-me >> nth=0');
    const visibilityOnlyAAIcon = page.locator('.visibility-only-account-admin >> nth=0');
    const visibilityAllIcon = page.locator('.visibility-everyone >> nth=0');
    const tooltip = page.locator('.mat-tooltip');
    console.log('templates Displaying Visibility Icon');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(visibilityColumn).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(visibilityColumn).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.AA4();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.visibilityFilterClick();
    await expect(visibilityColumn).toBeVisible();
    await expect(visibilityOnlyMeIcon).toBeVisible();
    await visibilityOnlyMeIcon.hover();
    await page.waitForTimeout(500);
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Only Me');
    await expect(visibilityOnlyAAIcon).toBeVisible();
    await visibilityOnlyAAIcon.hover();
    await page.waitForTimeout(500);
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Admin');
    await expect(visibilityAllIcon).toBeVisible();
    await visibilityAllIcon.hover();
    await page.waitForTimeout(500);
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Everyone');
});

test('displayingPermissionsColumn @regClickTractsMedium @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const permissionsColumn = page.locator('.mat-column-is_securx >> nth=0');
    console.log('templates Displaying Permissions Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(permissionsColumn).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(permissionsColumn).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(permissionsColumn).toBeVisible();
});

test('displayingTheAccordingInfoInPermissionsColumn @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const permissionsColumnValue = page.locator('.mat-column-is_securx >> nth=1');
    console.log('templates Displaying The According Info In Permissions Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.permissionsFilterClick();
    await expect(permissionsColumnValue).toBeVisible();
    await expect(permissionsColumnValue).toHaveText('Active');
    await templatesPage.permissionsFilterClick();
    await expect(permissionsColumnValue).toBeVisible();
    await expect(permissionsColumnValue).toHaveText('-');
});

test('displaying/ValidationModelColumn @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const modelColumnValue = page.locator('.mat-column-model >> nth=1');
    const modelLinkActive = page.locator('.model-column-link >> nth=0');
    const modelLinkArchive = page.locator('.model-column-link >> nth=2');
    const tooltip = page.locator('.mat-tooltip');
    console.log('templates Displaying/Validation Model Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.modelFilterClick();
    await expect(modelLinkActive).toBeVisible();
    await expect(modelLinkActive).toHaveAttribute('href', '/models/757/terms');
    await expect(modelLinkActive).toHaveCSS('color', 'rgb(69, 119, 210)');
    await modelLinkActive.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Model Active');
    await expect(modelLinkArchive).toBeVisible();
    await expect(modelLinkArchive).toHaveAttribute('href', '/models/826/terms');
    await expect(modelLinkArchive).toHaveCSS('color', 'rgb(128, 136, 146)');
    await templatesPage.modelFilterClick();
    await templatesPage.modelFilterClick();
    await modelLinkArchive.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Model Archived');
    await templatesPage.modelFilterClick();
    await expect(modelColumnValue).toHaveText('-');
});

test('displayingClientColumn @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const pageTitle = page.locator('.section__title');
    const clientColumn = page.locator('.mat-column-ownerAccount >> nth=0');
    const clientColumnValue = page.locator('.mat-column-ownerAccount .td__link >> nth=0');
    const tooltip = page.locator('.popup-informer__content >> nth=0');
    console.log('templates Displaying Client Column');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(clientColumn).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(clientColumn).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(clientColumn).toBeVisible();
    await templatesPage.clientFilterClick();
    await templatesPage.clientFilterClick();
    await expect(clientColumnValue).toBeVisible();
    await expect(clientColumnValue).toHaveText('Client 1HT(test...');
    await expect(clientColumnValue).toHaveAttribute('href', '/clients/265');
    await expect(clientColumnValue).toHaveCSS('color', 'rgb(69, 119, 210)');
    await clientColumnValue.hover();
    await expect(tooltip).toBeVisible();
    await expect(tooltip).toHaveText('Name: Client 1HT(test)Email: iryna.nema+1111@mobindustry.netStatus: Active');
    await clientColumnValue.click();
    await expect(page).toHaveURL('/clients/265');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Client 1HT(test)');
});

test('sortingOnTheListOfTemplatesPage @regClickTractsLow @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const row0 = page.locator('.mat-row >> nth=0');
    const row4 = page.locator('.mat-row >> nth=4');
    const row9 = page.locator('.mat-row >> nth=9');
    const clientColumn = page.locator('.mat-column-ownerAccount >> nth=0');
    const statusColumn = page.locator('.mat-column-status >> nth=1');
    const paytractsColumn = page.locator('.mat-column-is_paytracts >> nth=1');
    console.log('templates Sorting On The List Of Templates Page');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(row0).toBeVisible();
    await expect(row4).toBeVisible();
    await expect(row9).toBeVisible();
    await expect(clientColumn).toBeHidden();
    await templatesPage.tamplateNameFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-title');
    await templatesPage.tamplateNameFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=title');
    await templatesPage.modelFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-model.name');
    await templatesPage.modelFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=model.name');
    await templatesPage.visibilityFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-visibility_status');
    await templatesPage.visibilityFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=visibility_status');
    await templatesPage.permissionsFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-is_securx');
    await templatesPage.permissionsFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=is_securx');
    await templatesPage.statusFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-status');
    await expect(statusColumn).toHaveClass('status one-line cell-sm mat-cell cdk-column-status mat-column-status active ng-star-inserted');
    await templatesPage.statusFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=status');
    await expect(statusColumn).toHaveClass('status one-line cell-sm mat-cell cdk-column-status mat-column-status draft ng-star-inserted');
    await templatesPage.payTractsFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-is_paytracts');
    await expect(paytractsColumn).toHaveClass('status one-line cell-sm mat-cell cdk-column-is_paytracts mat-column-is_paytracts active ng-star-inserted');
    await templatesPage.payTractsFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=is_paytracts');
    await expect(paytractsColumn).toHaveClass('status one-line cell-sm mat-cell cdk-column-is_paytracts mat-column-is_paytracts ng-star-inserted');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=updated_at');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.clientFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-title');
    await templatesPage.clientFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=title');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=updated_at');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(clientColumn).toBeHidden();
    await templatesPage.tamplateNameFilterClick();
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=updated_at');
});

test('displayingAddTemplateButton @regClickTractsHigh @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const addTemplateButton = page.locator('#templates-list-add-template');
    console.log('templates Displaying Add Template Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(addTemplateButton).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(addTemplateButton).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(addTemplateButton).toBeHidden();
});

test('displayingModalWindowAfterTappingAddTemplateButton @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const pageTitle = page.locator('.section__title');
    const addTemplatePopup = page.locator('.mat-dialog-container');
    const addTemplatePopupText = page.locator('.modal-header');
    const addTemplatePopupCooseATemplateButton = page.locator('#create-template-choose-template');
    const addTemplatePopupNewTemplateButton = page.locator('#create-template-new-template');
    const addTemplatePopupCancelButton = page.locator('#create-template-cancel');
    const addTemplateButton = page.locator('#templates-list-add-template');
    const nextButton = page.locator('.btn >> text=Next');
    const createContractButton = page.locator('#template-detail-create-contract');
    console.log('templates Displaying Modal Window After Tapping Add Template Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await expect(addTemplatePopup).toBeVisible();
    await expect(addTemplatePopupText).toBeVisible();
    await expect(addTemplatePopupText).toHaveText(' Would you like to use an existing template?');
    await expect(addTemplatePopupCooseATemplateButton).toBeVisible();
    await expect(addTemplatePopupNewTemplateButton).toBeVisible();
    await expect(addTemplatePopupCancelButton).toBeVisible();
    await templatesPage.addTemplatePopupCancelButtonClick();
    await expect(addTemplatePopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
    await expect(addTemplateButton).toBeVisible();
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupChooseTemplateButtonClick();
    await expect(page).toHaveURL('/contract-template/select');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText(' Existing Templates ');
    await expect(nextButton).toBeVisible();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await expect(page).toHaveURL('/contract-template/create');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('New Template');
    await expect(createContractButton).toBeVisible();
});

test('displayingErrorNoTemplates @regClickTractsLow @templates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const emptyTemplatePage = page.locator('.no-results');
    const emptyTemplatePageSearchIcon = page.locator('.search-ic');
    console.log('templates Displaying Error No Templates');
    await users.AAClear();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(emptyTemplatePage).toBeVisible();
    await expect(emptyTemplatePageSearchIcon).toBeVisible();
    await expect(emptyTemplatePage).toHaveText(' There are no contract templates yet.  You can add new one here ');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AUClear();
    await signIn.signInButton();
    await page.waitForURL('/clients/399');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(emptyTemplatePage).toBeVisible();
    await expect(emptyTemplatePage).toHaveText(' There are no templates yet.  Please ask your Account Administrator to create contract templates ');
});

test('paytractsColumn @regClickTractsHigh @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const paytractsColumn = page.locator('.mat-column-is_paytracts >> nth=0');
    const paytractsColumnValue = page.locator('.mat-column-is_paytracts .ng-star-inserted >> nth=0');
    const tooltip = page.locator('.mat-tooltip');
    console.log('templates Paytracts Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeVisible();
    await templatesPage.payTractsFilterClick();
    await expect(paytractsColumnValue).toHaveCSS('color', 'rgb(92, 168, 8)');
    await paytractsColumnValue.hover();
    await expect(tooltip).toHaveText('Active');
    await templatesPage.payTractsFilterClick();
    await expect(paytractsColumnValue).toHaveCSS('color', 'rgb(20, 35, 54)');
    await paytractsColumnValue.hover();
    await expect(tooltip).toHaveText('Nonactive');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AANoPaytracts();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AUNoPaytracts();
    await signIn.signInButton();
    await page.waitForURL('/clients/274');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeHidden();
});

test('editedColumn @regClickTractsLow @templates', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const paytractsColumn = page.locator('.mat-column-is_paytracts >> nth=0');
    console.log('templates Edited Column');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(paytractsColumn).toBeVisible();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await templatesPage.editedFilterClick();
    await expect(page).toHaveURL('/contract-templates/list?&sort=updated_at');
});

test('activationExportButton @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const exportButton = page.locator('#templates-list-export');
    console.log('templatesExport Activation Export Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(exportButton).toHaveAttribute('disabled', 'true');
    await templatesPage.checkboxSelectAllClick();
    await expect(exportButton).not.toHaveAttribute('disabled', 'true');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(exportButton).toHaveAttribute('disabled', 'true');
    await templatesPage.checkboxSelectAllClick();
    await expect(exportButton).not.toHaveAttribute('disabled', 'true');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(exportButton).toHaveAttribute('disabled', 'true');
    await templatesPage.checkboxSelectAllClick();
    await expect(exportButton).not.toHaveAttribute('disabled', 'true');
});

test('check/UncheckTheTemplatesAllPages @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const pagination = new Pagination(page);
    const checkbox0 = page.locator('.templates-list-select >> nth=0');
    const checkbox1 = page.locator('.templates-list-select >> nth=4');
    console.log('templatesExport Check/Uncheck The Templates All Pages');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await checkbox0.click();
    await expect(checkbox0).toHaveClass('templates-list-select mat-checkbox mat-primary mat-checkbox-checked');
    await pagination.paginationPage2Click();
    await page.waitForTimeout(1000);
    await checkbox1.click();
    await expect(checkbox1).toHaveClass('templates-list-select mat-checkbox mat-primary mat-checkbox-checked');
});

test('selectDeselectCheckboxAll @regClickTractsLow @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const checkboxAll = page.locator('#templates-list-select-all');
    const checkbox0 = page.locator('.templates-list-select >> nth=0');
    const checkbox1 = page.locator('.templates-list-select >> nth=4');
    console.log('templatesExport Select Deselect Checkbox All');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await expect(checkboxAll).toHaveClass('mat-checkbox mat-primary mat-checkbox-checked');
    await expect(checkbox0).toHaveClass('templates-list-select mat-checkbox mat-primary mat-checkbox-checked');
    await expect(checkbox1).toHaveClass('templates-list-select mat-checkbox mat-primary mat-checkbox-checked');
    await templatesPage.checkboxSelectAllClick();
    await expect(checkboxAll).toHaveClass('mat-checkbox mat-primary');
    await expect(checkbox0).toHaveClass('templates-list-select mat-checkbox mat-primary');
    await expect(checkbox1).toHaveClass('templates-list-select mat-checkbox mat-primary');
});

test('validationExportButtonCheckboxesManuallyChecked @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const checkbox0 = page.locator('.templates-list-select >> nth=0');
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.mat-dialog-container header');
    console.log('templatesExport Validation Export Button Checkboxes Manually Checked');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await checkbox0.click();
    const [ download ] = await Promise.all([
        page.waitForEvent('download'),
    await templatesPage.exportButtonClick(),
    await expect(exportPopup).toBeHidden(),
    await expect(exportPopupText).toBeHidden()
    ]);
    await expect(await download.suggestedFilename()).toContain('Templates_');
    await download.delete();
});

test('validationExportButtonSelectAllApplied @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.mat-dialog-container header');
    console.log('templatesExport Validation Export Button Select All Applied');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
});

test('displayingConfirmBackgroundExportPopup @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const pagination = new Pagination(page);
    const templatesPage = new TemplatesPage(page);
    const checkbox0 = page.locator('.templates-list-select >> nth=0');
    const checkbox1 = page.locator('.templates-list-select >> nth=4');
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.mat-dialog-container header');
    console.log('templatesExport Displaying Confirm Background Export Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await templatesPage.exportPopupXButtonClick();
    await checkbox0.click();
    await templatesPage.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await templatesPage.exportPopupXButtonClick();
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.checkboxSelectAllClick();
    await checkbox0.click();
    await checkbox1.click();
    await pagination.paginationPage2Click();
    await page.waitForTimeout(1000);
    await checkbox0.click();
    await checkbox1.click();
    await templatesPage.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
});

test('displayingInfoInTheConfirmBackgroundExportPopup @regClickTractsLow @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const pageTitle = page.locator('.section__title');
    const exportPopup = page.locator('.mat-dialog-container');
    const exportPopupText = page.locator('.mat-dialog-container header');
    const exportPopupXButton = page.locator('#export-templates-cancel-cross');
    const exportPopupExportAllRadioButton = page.locator('.mat-radio-label >> nth=0');
    const exportPopupExportSelectedRadioButton = page.locator('.mat-radio-label >> nth=1');
    const exportPopupCancelButton = page.locator('#export-templates-cancel');
    const exportPopupExportButton = page.locator('#export-templates-export');
    console.log('templatesExport Displaying Info In The Confirm Background Export Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await expect(exportPopup).toBeVisible();
    await expect(exportPopupText).toBeVisible();
    await expect(exportPopupText).toHaveText(' Do you want to export the list of all templates of Client 1HT(test)? ');
    await expect(exportPopupXButton).toBeVisible();
    await expect(exportPopupExportAllRadioButton).toBeVisible();
    await expect(exportPopupExportAllRadioButton).toHaveText('Export All selected templates (background batch - *.csv file send to email)');
    await expect(exportPopupExportSelectedRadioButton).toBeVisible();
    await expect(exportPopupExportSelectedRadioButton).toHaveText('Export only selected templates from current page (*.csv file download now)');
    await expect(exportPopupCancelButton).toBeVisible();
    await expect(exportPopupExportButton).toBeVisible();
    await templatesPage.exportPopupXButtonClick();
    await expect(exportPopup).toBeHidden();
    await expect(exportPopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupCancelButtonClick();
    await expect(exportPopup).toBeHidden();
    await expect(exportPopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
});

test('validationExportButtonExportAllSelected @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const emailPopup = page.locator('.mat-dialog-container');
    const emailPopupText = page.locator('.modal-header');
    const emailPopupXButton = page.locator('.close-ic');
    const emailPopupCancelButton = page.locator('.mat-button >> text=Done');
    console.log('templatesExport Validation Export Button Export All Selected');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportAllRadioButtonClick();
    await templatesPage.exportPopupExportButtonClick();
    await expect(emailPopup).toBeVisible();
    await expect(emailPopupText).toBeVisible();
    await expect(emailPopupText).toHaveText('We will send you an email to iryna.nema+1111@mobindustry.net with the CSV file requested.Depending on the number of templates it might take some time.');
    await expect(emailPopupXButton).toBeVisible();
    await expect(emailPopupCancelButton).toBeVisible();
});

test('validationExportButtonExportOnlySelected @regClickTractsMedium @templates @templatesExport', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const emailPopup = page.locator('.mat-dialog-container');
    const emailPopupText = page.locator('.modal-header');
    console.log('templatesExport Validation Export Button Export Only Selected');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportSelectedRadioButtonClick();
    const [ download ] = await Promise.all([
        page.waitForEvent('download'),
    await templatesPage.exportPopupExportButtonClick(),
    await expect(emailPopup).toBeHidden(),
    await expect(emailPopupText).toBeHidden()
    ]);
    await expect(await download.suggestedFilename()).toContain('Templates_');
    await download.delete();
});

test('displayingInfoInTheEmailSentPopup @regClickTractsLow @templates @templatesExport', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const emailPopup = page.locator('.mat-dialog-container');
    const emailPopupText = page.locator('.modal-header');
    const emailPopupXButton = page.locator('.close-ic');
    const emailPopupCancelButton = page.locator('.mat-button >> text=Done');
    console.log('templatesExport Displaying Info In The Email Sent Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportAllRadioButtonClick();
    await templatesPage.exportPopupExportButtonClick();
    await expect(emailPopup).toBeVisible();
    await expect(emailPopupText).toBeVisible();
    await expect(emailPopupText).toHaveText('We will send you an email to iryna.nema+1111@mobindustry.net with the CSV file requested.Depending on the number of templates it might take some time.');
    await expect(emailPopupXButton).toBeVisible();
    await expect(emailPopupCancelButton).toBeVisible();
    await templatesPage.exportEmailPopupXButtonClick();
    await expect(emailPopup).toBeHidden();
    await expect(emailPopupText).toBeHidden();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportAllRadioButtonClick();
    await templatesPage.exportPopupExportButtonClick();
    await templatesPage.exportEmailPopupCancelButtonClick();
    await expect(emailPopup).toBeHidden();
    await expect(emailPopupText).toBeHidden();
});

test('gettingEmailWithCSVFile @regClickTractsMedium @templates @templatesExport', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const iframeHeader = page.frameLocator('.messagedata-iframe').locator('.header');
    const iframeResetLogo = page.frameLocator('.messagedata-iframe').locator('.logo');
    const iframeResetBody = page.frameLocator('.messagedata-iframe').locator('.content');
    const iframeResetFooter = page.frameLocator('.messagedata-iframe').locator('.footer');
    const csvFile = page.locator('.aSH');
    console.log('templatesExport Getting Email With CSV File');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportAllRadioButtonClick();
    await templatesPage.exportPopupExportButtonClick();
    await templatesPage.exportEmailPopupCancelButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await page.waitForSelector('#login-sign-in');
    await signIn.email.fill('alexey.banshykov@mobindustry.net');
    await signIn.password.fill('Qwerty123!');
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.exportButtonClick();
    await templatesPage.exportPopupExportAllRadioButtonClick();
    await templatesPage.exportPopupExportButtonClick();
    await templatesPage.exportEmailPopupCancelButtonClick();
    await page.waitForTimeout(20000);
    await page.goto('https://accounts.google.com/signin/v2/identifier?continue=https%3A%2F%2Fmail.google.com%2Fmail%2F&service=mail&sacu=1&rip=1&flowName=GlifWebSignIn&flowEntry=ServiceLogin');
    await page.waitForSelector('input[type="email"]');
    await page.type('input[type="email"]', "alexey.banshykov@mobindustry.net");
    await page.click("#identifierNext");
    await page.waitForSelector('input[type="password"]');
    await page.type('input[type="password"]', "69563863ban");
    await page.waitForSelector("#passwordNext");
    await page.click("#passwordNext");
    await page.locator('text=MARQUP robot >> nth=1').click();
    await expect(csvFile).toBeVisible();
    await page.goto('https://maildrop.cc/inbox/accountadmin4');
    await page.locator('.messagelist-row-link >> nth=0').click();
    await expect(iframeHeader).toBeVisible();
    await expect(iframeHeader).toHaveText('Export all templates');
    await expect(iframeResetLogo).toBeVisible();
    await expect(iframeResetBody).toBeVisible();
    await expect(iframeResetBody).toContainText('Hello AccountAdimnThird,');
    await expect(iframeResetBody).toContainText('Please find the list of exported ContractsRx templates in the attachment.');
    await expect(iframeResetFooter).toBeVisible();
    await expect(iframeResetFooter).toContainText(' If you have questions, please visit ');
    await expect(iframeResetFooter).toContainText('www.marqup.noredlines.com');
});

test('buttonsOf3dotsMenuDraftStatus @regClickTractsMedium @templates @templates3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const editButton = page.locator('.context-menu-edit');
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const shareAccessButton = page.locator('.context-menu-share-access');
    const createContractButton = page.locator('.context-menu-create-contract');
    const deleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Buttons Of 3dots Menu Draft Status');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeVisible();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
});

test('buttonsOf3dotsMenuPublishedStatus @regClickTractsMedium @templates @templates3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const editButton = page.locator('.context-menu-edit');
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const shareAccessButton = page.locator('.context-menu-share-access');
    const createContractButton = page.locator('.context-menu-create-contract');
    const deleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Buttons Of 3dots Menu Published Status');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeHidden();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeVisible();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeHidden();
    await expect(saveAsNewButton).toBeHidden();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeHidden();
});

test('editButton3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    console.log('template3dotsMenu Edit Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/contract-template/edit/');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await expect(page.url()).toContain('/contract-template/edit/');
});

test('editButtonWhenTemplateIsSharedBySa @regClickTractsLow @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const editButton = page.locator('.context-menu-edit');
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    const shareAccessButton = page.locator('.context-menu-share-access');
    const createContractButton = page.locator('.context-menu-create-contract');
    const deleteButton = page.locator('.context-menu-delete');
    console.log('Edit Button When Template Is Shared By Sa 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.shareAccessButtonClick();
    await newTemplate.shareAccessPopupSearchFieldFill();
    await page.click('.mat-checkbox >> nth=1');
    await newTemplate.shareAccessPopupAddButtonClick();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(editButton).toBeHidden();
    await expect(saveAsNewButton).toBeVisible();
    await expect(shareAccessButton).toBeHidden();
    await expect(createContractButton).toBeVisible();
    await expect(deleteButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test.skip('saveAsNewButton3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const copiedTemplateName = page.locator('.template-name-column-link >> nth=0'); //[formcontrolname="title"]
    console.log('template3dotsMenu Save As New Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    await page.waitForSelector('[formcontrolname="title"]');
    expect(page.url()).toContain('/contract-template/clone/');
    await page.waitForTimeout(1000);
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(copiedTemplateName).toContainText('Copy of');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    await page.waitForSelector('[formcontrolname="title"]');
    expect(page.url()).toContain('/contract-template/clone/');
    await page.waitForTimeout(1000);
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(copiedTemplateName).toContainText('Copy of');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

    //to be refactored
test('templateWithSetUpVisibilityOnly @regClickTractsHigh @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newEditTemplate = new NewEditCopyTemplatePage(page);
    const createdTemplate = page.locator('.template-name-column-link >> nth=0');
    console.log('template3dotsMenu Template With Set Up Visibility Only 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newEditTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newEditTemplate.selectCategoryName();
    await newEditTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newEditTemplate.publishToggleClick();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.permissionVisibilityOnlyAAValueChoose();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.permissionVisibilityOnlyMeValueChoose();
    await newEditTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).not.toContainText('autotest');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newEditTemplate.draftToggleClick();
    await newEditTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('SACanSaveAsNewTemplateCreatedByAA @regClickTractsLow @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const saveAsNewButton = page.locator('.context-menu-save-as-new');
    console.log('template3dotsMenu SA Can Save As New Template Created By AA 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(saveAsNewButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    expect(page.url()).toContain('/contract-template/clone/');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(saveAsNewButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuSaveAsNewButtonClick();
    expect(page.url()).toContain('/contract-template/clone/');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('deletePopupForPublishedTemplates3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const shareAccessButton = page.locator('.context-menu-share-access');
    console.log('template3dotsMenu Delete Popup For Published Templates 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await page.waitForTimeout(1500);
});

test('SACanShareTemplatesCreatedByAA @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const shareAccessButton = page.locator('.context-menu-share-access');
    const shareAccesPopup = page.locator('.mat-dialog-container');
    const shareAccesPopupHeaderText = page.locator('.modal-header');
    console.log('template3dotsMenu SA Can Share Templates Created by AA 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await templatesPage.threeDotsMenuEditButton.click();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeHidden();
    await templatesPage.threeDotsMenuSaveAsNewButton.click();
    await page.waitForTimeout(1500);
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await templatesPage.threeDotsMenuEditButton.click();
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(shareAccessButton).toBeVisible();
    await templatesPage.threeDotsMenuShareAccessButton.click();
    await expect(shareAccesPopup).toBeVisible();
    await expect(shareAccesPopupHeaderText).toHaveText('Share access');
    await page.click('#modal-share-access-close');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
    await page.waitForTimeout(1000);
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await templatesPage.deletePopupDeleteButtonClick();
    await page.waitForTimeout(1000);
});

test('createContractButton3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const createContractButton = page.locator('.context-menu-create-contract');
    console.log('template3dotsMenu Create Contract Button 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuCreateContractButtonClick();
    expect(page.url()).toContain('/contract/create/');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeHidden();
    await page.click('.cdk-overlay-backdrop');
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AU();
    await signIn.signInButton();
    await page.waitForURL('/clients/265');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuButtonClick();
    await expect(createContractButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.threeDotsMenuCreateContractButtonClick();
    expect(page.url()).toContain('/contract/create/');
});

test('deactivationTheCreateContractButton @regClickTractsHigh @templates @templates3dotsMenu', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const deactiavationCreateContractPopup = page.locator('.mat-dialog-container');
    const deactiavationCreateContractPopupText = page.locator('.modal-header');
    const deactiavationCreateContractPopupButtonOk = page.locator('.btn >> text=OK');
    console.log('deactivation The Create Contract Button 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.modelFilterClick();
    await templatesPage.threeDotsMenuButton1CreateContractButtonClick();
    await expect(deactiavationCreateContractPopup).toBeVisible();
    await expect(deactiavationCreateContractPopupText).toHaveText(' This Template is connected to a Model that is not active (archived). Please activate the Model or edit the Template to remove the inactive Model');
    await expect(deactiavationCreateContractPopupButtonOk).toBeVisible();
    await page.locator('.btn >> text=OK').click();
    await expect(deactiavationCreateContractPopup).toBeHidden();
});

test('solutionAdminCanSeeAllTemplates3dotsMenu @regClickTractsHigh @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const createdTemplate = page.locator('.mat-column-templateName >> nth=1');
    console.log('template3dotsMenu Solution Admin Can See All Templates 3dots Menu');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toBeVisible();
    await expect(createdTemplate).toContainText('autotest');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.publishToggleClick();
    await newTemplate.saveButtonClick();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await expect(createdTemplate).toBeVisible();
    await expect(createdTemplate).toContainText('autotest');
    await templatesPage.threeDotsMenuEditButtonClick();
    await newTemplate.draftToggleClick();
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.click('.mat-button >> text=Delete');
    await page.waitForTimeout(1500);
});

test('accountAdminsOfOneClientCanManageTemplates @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const displayingEditButton = page.locator('.context-menu-edit');
    const displayingSaveAsNewButton = page.locator('.context-menu-save-as-new');
    const displayingCreateContractButton = page.locator('.context-menu-create-contract');
    const displayingDeleteButton = page.locator('.context-menu-delete');
    console.log('template3dotsMenu Account Admins Of One Client Can Manage Templates 3dots Menu');
    await users.AA2();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingEditButton).toBeVisible();
    await expect(displayingSaveAsNewButton).toBeVisible();
    await expect(displayingCreateContractButton).toBeVisible();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingEditButton).toBeVisible();
    await expect(displayingSaveAsNewButton).toBeVisible();
    await expect(displayingDeleteButton).toBeVisible();
});

test('deleteButton3dotsMenu @regClickTractsMedium @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const displayingDeleteButton = page.locator('.context-menu-delete');
    const deletedTemplate = page.locator('.mat-column-templateName >> nth=1');
    console.log('template3dotsMenu Delete Button 3dots Menu');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuButtonClick();
    await expect(displayingDeleteButton).toBeVisible();
    await page.click('.cdk-overlay-backdrop');
    await templatesPage.addTemplateButtonClcik();
    await templatesPage.addTemplatePopupNewTemplateButtonClick();
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await page.waitForTimeout(1000);
    await templatesPage.deletePopupDeleteButtonClick();
    await page.waitForTimeout(2000);
    await expect(deletedTemplate).not.toContainText('autotest');
});

test('deletePopupForPublishedTemplates3dotsMenu @regClickTractsLow @templates @templates3dotsMenu', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const deletePopupPublishTemplate = page.locator('.mat-dialog-container');
    const deletePopupPublishTemplateText = page.locator('.modal-header');
    console.log('template3dotsMenu Delete Popup For Published Templates 3dots Menu');
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopupPublishTemplate).toBeVisible();
    await expect(deletePopupPublishTemplateText).toBeVisible();
    await expect(deletePopupPublishTemplateText).toContainText('You must first change the Template status');
    await page.locator('.mat-button >> text=Cancel').click();
    await expect(deletePopupPublishTemplate).toBeHidden();
    await userBar.userInfoButtonClick();
    await userBar.signOutButtonClick();
    await page.waitForSelector('#login-sign-in');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.statusFilterClick();
    await templatesPage.threeDotsMenuDeleteButtonClick();
    await expect(deletePopupPublishTemplate).toBeVisible();
    await expect(deletePopupPublishTemplateText).toBeVisible();
    await expect(deletePopupPublishTemplateText).toContainText('You must first change the Template status');
    await page.locator('.mat-button >> text=Cancel').click();
    await expect(deletePopupPublishTemplate).toBeHidden();
});

test('displaying/NotDisplayingDeleteTemplatesButton @regClickTractsLow @templates @templatesDeleteTemplates', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const checkbox0 = page.locator('.templates-list-select >> nth=0');
    const deleteTemplateButton = page.locator('#templates-list-delete-templates');
    console.log('templatesDeleteTemplates Displaying Delete TemplatesButton');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await expect(deleteTemplateButton).toBeVisible();
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.statusFilterClick();
    await checkbox0.click();
    await expect(deleteTemplateButton).toBeHidden();
    await templatesPage.statusFilterClick();
    await checkbox0.click();
    await expect(deleteTemplateButton).toBeVisible();
});

test('validationOfDeleteTemplateButton @regClickTractsLow @templates @templatesDeleteTemplates', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const pageTitle = page.locator('.section__title');
    const deleteTemplatesPopup = page.locator('.mat-dialog-container');
    const deleteTemplatesPopupText = page.locator('.modal-header');
    const deleteTemplatesPopupXButton = page.locator('#modal-delete-templates-cancel-cross');
    const deleteTemplatesPopupOnlySelectedRadioButton = page.locator('.mat-radio-label >> nth=0');
    const deleteTemplatesPopupAllSelectedRadioButton = page.locator('.mat-radio-label >> nth=1');
    const deleteTemplatesPopupCancelButton = page.locator('#modal-delete-templates-cancel');
    const deleteTemplatesPopupDeleteButton = page.locator('#modal-delete-templates-delete');
    console.log('templatesDeleteTemplates Validation Of Delete Template Button');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.deleteTemplateButtonClick();
    await expect(deleteTemplatesPopup).toBeVisible();
    await expect(deleteTemplatesPopupText).toBeVisible();
    await expect(deleteTemplatesPopupText).toHaveText(' Only Draft templates can be deleted ');
    await expect(deleteTemplatesPopupXButton).toBeVisible();
    await expect(deleteTemplatesPopupOnlySelectedRadioButton).toBeVisible();
    await expect(deleteTemplatesPopupAllSelectedRadioButton).toBeVisible();
    await expect(deleteTemplatesPopupCancelButton).toBeVisible();
    await expect(deleteTemplatesPopupDeleteButton).toBeVisible();
    await templatesPage.deleteTemplatPopupXButtonClick();
    await expect(deleteTemplatesPopup).toBeHidden();
    await expect(deleteTemplatesPopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
    await templatesPage.deleteTemplateButtonClick();
    await templatesPage.deleteTemplatPopupCancelButtonClick();
    await expect(deleteTemplatesPopup).toBeHidden();
    await expect(deleteTemplatesPopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
});

test('validationDeleteButtonDeleteTemplatesPopup @regClickTractsLow @templates @templatesDeleteTemplates', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const pageTitle = page.locator('.section__title');
    const doUreallyWantDeletePopup = page.locator('.mat-dialog-container');
    const doUreallyWantDeletePopupText = page.locator('.modal-header');
    const doUreallyWantDeletePopupCancelButton = page.locator('#confirm-modal-cancel');
    const doUreallyWantDeletePopupDeleteButton = page.locator('#confirm-modal-delete');
    console.log('templatesDeleteTemplates Validation Delete Button Delete Templates Popup');
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.deleteTemplateButtonClick();
    await templatesPage.deleteTemplatPopupDeleteButtonClick();
    await expect(doUreallyWantDeletePopup).toBeVisible();
    await expect(doUreallyWantDeletePopupText).toBeVisible();
    await expect(doUreallyWantDeletePopupText).toHaveText(' Do you really want to delete selected Draft templates?');
    await expect(doUreallyWantDeletePopupCancelButton).toBeVisible();
    await expect(doUreallyWantDeletePopupDeleteButton).toBeVisible();
    await templatesPage.doURealyWantToDeletePopupCancelButtonClick();
    await expect(doUreallyWantDeletePopup).toBeHidden();
    await expect(doUreallyWantDeletePopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(pageTitle).toBeVisible();
    await expect(pageTitle).toHaveText('Templates');
});

test('validationDeleteButtonDoUReallyWantToDeletePopup @regClickTractsLow @templates @templatesDeleteTemplates', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const templatesPage = new TemplatesPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const doUreallyWantDeletePopup = page.locator('.mat-dialog-container');
    const doUreallyWantDeletePopupText = page.locator('.modal-header');
    const row0 = page.locator('.mat-row >> nth=0');
    const row1 = page.locator('.mat-row >> nth=1');
    const row2 = page.locator('.mat-row >> nth=2');
    const templateNameValue = page.locator('.mat-column-templateName >> nth=1');
    console.log('templatesDeleteTemplates Validation Delete Button Do U Really Want To Delete Popup');
    await users.AA3();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.deleteTemplateButtonClick();
    await templatesPage.deleteTemplatePopupOnlySelectedRadioButtonClick();
    await templatesPage.deleteTemplatPopupDeleteButtonClick();
    await templatesPage.doURealyWantToDeletePopupDeleteButtonClick();
    await expect(doUreallyWantDeletePopup).toBeHidden();
    await expect(doUreallyWantDeletePopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(row0).toBeVisible();
    await expect(row1).toBeHidden();
    await expect(row2).toBeHidden();
    await expect(templateNameValue).toContainText('test100testTemplateDoNotRemove');
    await expect(templateNameValue).not.toContainText('autotest');
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-template/create');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.textEditorFieldRandomFill(Helpers.generateRandomString());
    await newTemplate.saveButtonClick();
    await page.goto('/contract-templates/list?&sort=-updated_at');
    await templatesPage.checkboxSelectAllClick();
    await templatesPage.deleteTemplateButtonClick();
    await templatesPage.deleteTemplateAllSelectedRadioButtonClick();
    await templatesPage.deleteTemplatPopupDeleteButtonClick();
    await templatesPage.doURealyWantToDeletePopupDeleteButtonClick();
    await expect(doUreallyWantDeletePopup).toBeHidden();
    await expect(doUreallyWantDeletePopupText).toBeHidden();
    await expect(page).toHaveURL('/contract-templates/list?&sort=-updated_at');
    await expect(row0).toBeVisible();
    await expect(row1).toBeHidden();
    await expect(row2).toBeHidden();
    await expect(templateNameValue).toContainText('test100testTemplateDoNotRemove');
    await expect(templateNameValue).not.toContainText('autotest');
});

// });