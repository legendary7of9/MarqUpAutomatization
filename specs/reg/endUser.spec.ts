import { test , expect, webkit, chromium, Browser, BrowserContext, Page } from '@playwright/test'
import { UserBar, Users } from '../../framework'
import { Search } from '../../framework'
import { SignInPage } from '../../framework'
import { SideBar } from '../../framework'
import { TemplatesPage } from '../../framework'
import { NewEditCopyTemplatePage } from '../../framework'
import { ViewTemplatePage } from '../../framework'
import { ContractsPage } from '../../framework'
import { NewEditContractPage } from '../../framework'
import { ViewContract } from '../../framework'
import { EndUserPage } from '../../framework'
import { Helpers } from '../../lib/helpers/randomCharactersAndDigits.preload'


// 7 failed
// [webkit] › specs/reg/endUser.spec.ts:1521:1 › displayingThe404PageBackToDraftContract @regClickTractsHigh @endUser @endUserPage1 @expiring/PermanentLink 
// [webkit] › specs/reg/endUser.spec.ts:1762:1 › notDisplayingSignaturesBlockSignaturesDisabled @regClickTractsMedium @endUser @endUserPage1 @expiring/PermanentLink 
// [webkit] › specs/reg/endUser.spec.ts:2139:1 › checkingThatOneCompanyIsAbleToSignContractOnlyOneTime @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:2548:1 › signingContractWithNotRegisteredEmailOnBehalfOfRegisteredCompany @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:3280:1 › displyingTheErrorContractWithVissibilityRestrictions @regClickTractsHigh @endUser @endUserPage1 @signedUser 
// [chrome] › specs/reg/endUser.spec.ts:710:1 › checkingSigningContractWithCheckboxMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @variables 
// [chrome] › specs/reg/endUser.spec.ts:1114:1 › displayingTheSignerVariablesMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @signerVariables 
// 21 flaky
// [webkit] › specs/reg/endUser.spec.ts:23:1 › displayingAllInfoWhichWereAppliedInContract @regClickTractsHigh @endUser @endUserPage1 
// [webkit] › specs/reg/endUser.spec.ts:231:1 › displayingTheUrlOptionOnTheEndUserpage @regClickTractsLow @endUser @endUserPage1 
// [webkit] › specs/reg/endUser.spec.ts:320:1 › displaying/validationOfTheDownloadPdfButton @regClickTractsHigh @endUser @endUserPage1 
// [webkit] › specs/reg/endUser.spec.ts:372:1 › displayingCorrectSuccessfullMessageAfterSigninOfContract @regClickTractsLow @endUser @endUserPage1 
// [webkit] › specs/reg/endUser.spec.ts:1339:1 › choosingTheOptionsInTheText/Date/Number/UrlContentTypes @regClickTractsHigh @endUser @endUserPage1 @signerVariables 
// [webkit] › specs/reg/endUser.spec.ts:1930:1 › validationOfTheTitleFieldNotSignedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField 
// [webkit] › specs/reg/endUser.spec.ts:2278:1 › validationForTheLegalEntityPopup/LowerAndUpperCases @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:2610:1 › notSigningContractIfUserUsesExistingEmailAndLegalEntity @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:2656:1 › notSigningContractIfUserUsesExistingEmailAndLegalEntityOtherExistingClient @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:2861:1 › signingContractByNotLoggedUserEntityPopup/ValidationOfSelectAndNoUseButtons @regClickTractsHigh @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:3127:1 › checkingEnteringLegalEntityWithSpacesAtTheEndOrInTheBeggining @regClickTractsMedium @endUser @endUserPage1 @legalEntity 
// [webkit] › specs/reg/endUser.spec.ts:3238:1 › checkingThatLoggedAACanSignTheContract @regClickTractsHigh @endUser @endUserPage1 @signedUser 
// [webkit] › specs/reg/endUser.spec.ts:3413:1 › openingSignedSuccessfullyPageAlreadySignedContract @regClickTractsMedium @endUser @endUserPage1 @signedUser 
// [webkit] › specs/reg/endUser.spec.ts:3450:1 › loggedAU/SACanNotSignTheContract @regClickTractsHigh @endUser @endUserPage1 @signedUser 
// [webkit] › specs/reg/endUser.spec.ts:3545:1 › displayingTheWatermarkOfTheTMPLAndContract @regClickTractsLow @endUser @endUserPage1 @signedUser 
// [webkit] › specs/reg/endUser.spec.ts:3619:1 › displayingTheContractRxLogo @regClickTractsLow @endUser @endUserPage1 @notSignedUser 
// [webkit] › specs/reg/endUser.spec.ts:3653:1 › checkingTheLogInButton @regClickTractsHigh @endUser @endUserPage1 @notSignedUser 
// [webkit] › specs/reg/endUser.spec.ts:3851:1 › validationOfTheBackButton @regClickTractsLow @endUser @endUserPage1 @notSignedUserLoginScreen 
// [webkit] › specs/reg/endUser.spec.ts:3938:1 › validationOfTheSignInButton @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen 
// [webkit] › specs/reg/endUser.spec.ts:4195:1 › displayingDisableSignaturesTextForDisabledSignaturesTemplate @regClickTractsMedium @endUser @endUserPage2 
// [chrome] › specs/reg/endUser.spec.ts:372:1 › displayingCorrectSuccessfullMessageAfterSigninOfContract @regClickTractsLow @endUser @endUserPage1 



    //tests for fix
// checkingSigningContractWithCheckboxMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @variables
// displayingTheSignerVariablesMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @signerVariables
// checkingSigningTheContractWithMultipartyGroups @regClickTractsHigh @endUser @endUserPage1 @legalEntity


test.beforeEach(async ({ page }, testInfo) => {
    await page.goto('');
});

test('displayingAllInfoWhichWereAppliedInContract @regClickTractsHigh @endUser @endUserPage1', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const bodyText = page.locator('.content >> nth=0');
    const table0 = page.locator('table >> nth=0');
    const inputTextVariableEnduser = page.locator('[name="elementName_1"] >> nth=0');
    const inputNumberVariableEnduser = page.locator('[name="elementName_3"] >> nth=0');
    const listTextVariableEnduser = page.locator('[name="elementName_7"] >> nth=0');
    const listDateVariableEnduser = page.locator('[name="elementName_8"] >> nth=0');
    const listNumberVariableEnduser = page.locator('[name="elementName_9"] >> nth=0');
    const inputUrlVariableEnduser = page.locator('[name="elementName_4"] >> nth=0');
    const signersInputDateEnduser = page.locator('input[name="elementName_15"] >> nth=0');
    const signersListUrlEnduser = page.locator('select[name="elementName_21"] >> nth=0');
    const image = page.locator('img >> nth=2');
    const listUrlVariableEnduser = page.locator('[name="elementName_10"] >> nth=0');
    const inputCheckboxEnduser = page.locator('#elementName_5');
    const inputCheckboxTextEnduser = page.locator('[for="elementName_5"]');
    const inputCheckboxWithNestedEnduser = page.locator('#elementName_22');
    const inputCheckboxWithNestedTextEnduser = page.locator('[for="elementName_5"]');
    const multipleChoiceRadioEnduser = page.locator('.multiple-choice-radio >> nth=0');
    const multipleChoiceRadioNoneEnduser = page.locator('#elementName_12-none');
    const multipleChoiceRadioNoneTextEnduser = page.locator('[for="elementName_12-none"]');
    const multipleChoiceRadioButton0Enduser = page.locator('#elementName_12-0');
    const multipleChoiceRadioButton0TextEnduser = page.locator('[for="elementName_12-0"]');
    const multipleChoiceRadioButton1Enduser = page.locator('#elementName_12-1');
    const multipleChoiceRadioButton1TextEnduser = page.locator('[for="elementName_12-1"]');
    const multipleChoiceRadioButton2Enduser = page.locator('#elementName_12-2');
    const multipleChoiceRadioButton2TextEnduser = page.locator('[for="elementName_12-2"]');
    const multipleChoiceCheckboxEnduser = page.locator('.multiple-choice-radio >> nth=1');
    const multipleChoiceCheckbox2Button0TextEnduser = page.locator('[for="elementName_13-0"]');
    const multipleChoiceCheckbox2Button1TextEnduser = page.locator('[for="elementName_13-1"]');
    const multipleChoiceCheckbox2Button2TextEnduser = page.locator('[for="elementName_13-2"]');
    const table1 = page.locator('table >> nth=1');
    const signerInputTextEnduser = page.locator('input[name="elementName_14"] >> nth=0');
    const signerInputNumberEnduser = page.locator('input[name="elementName_16"] >> nth=0');
    const signerInputUrlEnduser = page.locator('input[name="elementName_17"] >> nth=0');
    const signerListTextEnduser = page.locator('select[name="elementName_18"] >> nth=0');
    const signerListDateEnduser = page.locator('select[name="elementName_19"] >> nth=0');
    const signerListNumberEnduser = page.locator('select[name="elementName_20"] >> nth=0');
    const multipleChoiceWithNestedEnduser = page.locator('.multiple-choice-radio >> nth=1');
    const multipleChoiceWithNestedNoneEnduser = page.locator('#elementName_24-none');
    const multipleChoiceWithNestedNoneTextEnduser = page.locator('[for="elementName_24-none"]');
    const multipleChoiceWithNestedButton0Enduser = page.locator('#elementName_24-0');
    const multipleChoiceWithNestedButton0TextEnduser = page.locator('[for="elementName_24-0"]');
    const multipleChoiceWithNestedButton1Enduser = page.locator('#elementName_24-1');
    const multipleChoiceWithNestedButton1TextEnduser = page.locator('[for="elementName_24-1"]');
    const multipleChoiceWithNestedButton2Enduser = page.locator('#elementName_24-2');
    const multipleChoiceWithNestedButton2TextEnduser = page.locator('[for="elementName_24-2"]');
    const paytracts0 = page.locator('[name="paytracts-contract-fee"]');
    const paytracts1 = page.locator('b >> nth=0');
    console.log('endUser Displaying All Info Which Were Applied In Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.contractFeeValueChoose();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(bodyText).toContainText('Currently on the add/edit Template page variables field has limited area to be edited. To expand that area and to make UX easier adding/editing variables must be performed in the Edit Variables panel.')
    await expect(table0).toBeVisible();
    await expect(inputTextVariableEnduser).toBeVisible();
    await expect(inputTextVariableEnduser).toContainText('test100test');
    await expect(inputNumberVariableEnduser).toBeVisible();
    await expect(inputNumberVariableEnduser).toContainText('2,963,145');
    await expect(listTextVariableEnduser).toBeVisible();
    await expect(listTextVariableEnduser).toContainText('Kevin');
    await expect(listNumberVariableEnduser).toBeVisible();
    await expect(listNumberVariableEnduser).toContainText('56,544,566');
    await expect(listDateVariableEnduser).toBeVisible();
    await expect(listDateVariableEnduser).toContainText('08/22/2023');
    await expect(bodyText).toContainText('Req.EditVariables.Panel.30. Validation for all fields on the focus change, TAB key press and when the user clicks on the Save/Create Contract button.')
    await expect(inputUrlVariableEnduser).toBeVisible();
    await expect(inputUrlVariableEnduser).toContainText('youtube.com');
    await expect(bodyText).toContainText('Req.EditVariables.Panel.60. When the user expands already inserted variable in the Edit Variable panel, Template body must be scrolled to the expanded variable placement.')
    await expect(signersInputDateEnduser).toBeVisible();
    await expect(signersInputDateEnduser).toHaveAttribute('data-type', 'date');
    await expect(signersInputDateEnduser).toHaveAttribute('placeholder', 'signerInputDate');
    await expect(signersListUrlEnduser).toBeVisible();
    await expect(signersListUrlEnduser).toHaveText('signerListUrllinkedin.commaildrop.cctwitch.tv');
    await expect(image).toBeVisible();
    await expect(image).toHaveAttribute('src', 'https://upload.wikimedia.org/wikipedia/commons/thumb/b/b6/Image_created_with_a_mobile_phone.png/800px-Image_created_with_a_mobile_phone.png');
    await expect(bodyText).toContainText('Requirements URL variables.');
    await expect(listUrlVariableEnduser).toBeVisible();
    await expect(listUrlVariableEnduser).toContainText('google.com');
    await expect(inputCheckboxEnduser).toBeVisible();
    await expect(inputCheckboxEnduser).toHaveAttribute('type', 'checkbox');
    await expect(inputCheckboxTextEnduser).toContainText('Hi lets try to use variables');
    await expect(inputCheckboxWithNestedEnduser).toBeVisible();
    await expect(inputCheckboxWithNestedEnduser).toHaveAttribute('type', 'checkbox');
    await expect(inputCheckboxWithNestedTextEnduser).toContainText('Hi lets try to use variables');
    await expect(bodyText).toContainText('Req.Number.Variable.30. If the user enters a point symbol before the number, the “zero” is added automatically when saving the template (after the user presses the Save button).');
    await expect(multipleChoiceRadioEnduser).toBeVisible();
    await expect(multipleChoiceRadioNoneEnduser).toBeVisible();
    await expect(multipleChoiceRadioNoneTextEnduser).toContainText('None');
    await expect(multipleChoiceRadioButton0Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton0TextEnduser).toContainText('radio button 1');
    await expect(multipleChoiceRadioButton1Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton1TextEnduser).toContainText('radio button 2');
    await expect(multipleChoiceRadioButton2Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton2TextEnduser).toContainText('radio button 3');
    await expect(multipleChoiceCheckboxEnduser).toBeVisible();
    await expect(multipleChoiceCheckbox2Button0TextEnduser).toContainText('checkbox 1');
    await expect(multipleChoiceCheckbox2Button1TextEnduser).toContainText('checkbox 2');
    await expect(multipleChoiceCheckbox2Button2TextEnduser).toContainText('checkbox 3');
    await expect(bodyText).toContainText('Req.Number.Variable.50. The variables of the Content Type Number (both Input and List) should automatically place commas every three digits before the point divider.');
    await expect(table1).toBeVisible();
    await expect(signerInputTextEnduser).toBeVisible();
    await expect(signerInputTextEnduser).toHaveAttribute('data-type', 'text');
    await expect(signerInputTextEnduser).toHaveAttribute('placeholder', 'signerInputText');
    await expect(signerInputNumberEnduser).toBeVisible();
    await expect(signerInputNumberEnduser).toHaveAttribute('data-type', 'number');
    await expect(signerInputNumberEnduser).toHaveAttribute('placeholder', 'signerInputNumber');
    await expect(signerInputUrlEnduser).toBeVisible();
    await expect(signerInputUrlEnduser).toHaveAttribute('data-type', 'url');
    await expect(signerInputUrlEnduser).toHaveAttribute('placeholder', 'signerInputUrl');
    await expect(signerListTextEnduser).toBeVisible();
    await expect(signerListTextEnduser).toContainText('signerListTextHiYesNo');
    await expect(signerListDateEnduser).toBeVisible();
    await expect(signerListDateEnduser).toContainText('signerListDate09/11/201311/16/202605/28/1998');
    await expect(signerListNumberEnduser).toBeVisible();
    await expect(signerListNumberEnduser).toContainText('signerListNumber2,131,23234,324,324456,456,456');
    await expect(bodyText).toContainText('If the cursor was in-between the text, the existing template text will be broken with a new checkbox variable as a new paragraph line');
    await expect(bodyText).toContainText('On the Edit Variables panel the variable title matching the search criteria should be displayed. Variables matching the search criteria are collapsed. ');
    await expect(multipleChoiceWithNestedEnduser).toBeVisible();
    await expect(multipleChoiceWithNestedNoneEnduser).toBeVisible();
    await expect(multipleChoiceWithNestedNoneEnduser).toHaveAttribute('disabled', '');
    await expect(multipleChoiceWithNestedNoneTextEnduser).toContainText('None');
    await expect(multipleChoiceWithNestedButton0Enduser).toBeVisible();
    await expect(multipleChoiceWithNestedButton0TextEnduser).toContainText('Option1 ‌ 08/22/2023‌ ‌ signerListDate09/11/201311/16/202605/28/1998‌ ')
    await expect(multipleChoiceWithNestedButton1Enduser).toBeVisible();
    await expect(multipleChoiceWithNestedButton1TextEnduser).toContainText('Option 2 2,963,145‌ 56,544,566‌ ‌ ');
    await expect(multipleChoiceWithNestedButton2Enduser).toBeVisible();
    await expect(multipleChoiceWithNestedButton2TextEnduser).toContainText('Option 3 test100test‌ youtube.com‌ Kevin‌ google.com‌ signerListTextHiYesNo‌ signerListUrllinkedin.commaildrop.cctwitch.tv‌ ');
    await expect(paytracts0).toBeVisible();
    await expect(paytracts1).toContainText('Contract Fee: 99 USD One time');
    await expect(paytracts1).toBeVisible();
    await expect(paytracts1).toContainText('Contract Fee: 99 USD One time');
});


test('displayingTheUrlOptionOnTheEndUserpage @regClickTractsLow @endUser @endUserPage1', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const inputUrlVariableEnduser = page.locator('[name="elementName_4"] >> nth=0');
    const listUrlVariableEnduser = page.locator('[name="elementName_10"] >> nth=0');
    console.log('endUser Displaying The Url Option On The End User page');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.contractFeeValueChoose();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(inputUrlVariableEnduser).toBeVisible();
    await expect(inputUrlVariableEnduser).toContainText('youtube.com');
    await expect(inputUrlVariableEnduser).toHaveCSS('color', 'rgb(51, 51, 51)');
    await expect(listUrlVariableEnduser).toBeVisible();
    await expect(listUrlVariableEnduser).toContainText('google.com');
    await expect(listUrlVariableEnduser).toHaveCSS('color', 'rgb(51, 51, 51)');
});

test('displaying/validationOfTheDownloadPdfButton @regClickTractsHigh @endUser @endUserPage1', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    console.log('endUser Displaying/Validation Of The Download Pdf Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3589');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await endUser.downloadPdfButtonClick();
    const [page2] = await Promise.all([
        page.waitForEvent('popup'),
    ]);
    await page2.waitForLoadState();
    await expect(page2.url()).toContain('/contract/');
    await expect(page2.url()).toContain('/pdf/');
    await expect(page2.url()).toContain('.pdf');
    await page2.close();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await endUser.downloadPdfButtonClick();
    const [page3] = await Promise.all([
        page.waitForEvent('popup'),
    ]);
    await page3.waitForLoadState();
    await expect(page3.url()).toContain('/contract/');
    await expect(page3.url()).toContain('/pdf/');
    await expect(page3.url()).toContain('.pdf');
    await page3.close();
});

test('validationForSignButton @regClickTractsHigh @endUser @endUserPage1', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const signaturesFieldFirstNameTextError = page.locator('.field-contractsignform-first_name .help-block');
    const signaturesFieldLastNameTextError = page.locator('.field-contractsignform-last_name .help-block');
    const signaturesFieldEntityTextError = page.locator('.field-contractsignform-company_name .help-block');
    const signaturesFieldEmailTextError = page.locator('.field-contractsignform-email .help-block');
    const signaturesFieldConfirmEmailTextError = page.locator('.field-contractsignform-confirm_email .help-block');
    const signaturesFieldSignatureTextError = page.locator('.field-contractsignform-signature .help-block');
    const payContractFeeButton = page.locator('#checkout-button');
    const endUserSignedSignaturesTable0 = page.locator('.table >> nth=0');
    console.log('endUser Validation For Sign Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4041');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldFirstNameTextError).toBeVisible();
    await expect(signaturesFieldLastNameTextError).toBeVisible();
    await expect(signaturesFieldEntityTextError).toBeVisible();
    await expect(signaturesFieldEmailTextError).toBeVisible();
    await expect(signaturesFieldConfirmEmailTextError).toBeVisible();
    await expect(signaturesFieldSignatureTextError).toBeVisible();
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() +'@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable0).toBeVisible();
    await expect(payContractFeeButton).toBeVisible();
});

test('validationForSignButtonWhenSignerVariablesAreInserted @regClickTractsHigh @endUser @endUserPage1', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const groupName0 = page.locator('#variables-list-form-control-value-0');
    const groupChooseVariables0 = page.locator('[name=signer_variables_input] >> nth=0');
    const groupName1 = page.locator('#variables-list-form-control-value-1');
    const groupChooseVariables1 = page.locator('[name=signer_variables_input] >> nth=1');
    const groupName2 = page.locator('#variables-list-form-control-value-2');
    const groupChooseVariables2 = page.locator('[name=signer_variables_input] >> nth=2');
    const groupName3 = page.locator('#variables-list-form-control-value-3');
    const groupChooseVariables3 = page.locator('[name=signer_variables_input] >> nth=3');
    const variableGroupOption0 = page.locator('.variable-group-option >> nth=0');
    const variableGroupOption1 = page.locator('.variable-group-option >> nth=1');
    const copyLinkGroup1 = page.locator('.btn-action--copylink div >> nth=1');
    const endUserSignerNumberInputVariable = page.locator('[name=elementName_3] input');
    const endUserSignerUrlInputVariable = page.locator('[name=elementName_4] input');
    const endUserSignerNumberInputVariableSigned = page.locator('[name=elementName_3]');
    const endUserSignerUrlInputVariableSigned = page.locator('[name=elementName_4] a');
    console.log('endUser Validation For Sign Button When Signer Variables Are Inserted');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4033');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorAddGroupButtonClick();
    await groupName0.fill('group0');
    await groupChooseVariables0.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName1.fill('group1');
    await groupChooseVariables1.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName2.fill('group2');
    await groupChooseVariables2.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName3.fill('group3');
    await groupChooseVariables3.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const getGroup1PermanentLink = await copyLinkGroup1.getAttribute('data-link');
    await page.goto(getGroup1PermanentLink);
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForErorrClick();
    await expect(endUserSignerNumberInputVariable).toHaveCSS('border-color', 'rgb(255, 0, 0)');
    await expect(endUserSignerUrlInputVariable).toHaveCSS('border-color', 'rgb(255, 0, 0)');
    await endUserSignerNumberInputVariable.type('5435345');
    await endUserSignerUrlInputVariable.type('google.com');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signButtonClick();
    await expect(endUserSignerNumberInputVariableSigned).toBeVisible();
    await expect(endUserSignerNumberInputVariableSigned).toHaveText('5,435,345');
    await expect(endUserSignerUrlInputVariableSigned).toBeVisible();
    await expect(endUserSignerUrlInputVariableSigned).toHaveText('google.com');
    await expect(endUserSignerUrlInputVariableSigned).toHaveAttribute('href', '//google.com');
});

test('displayingCorrectSuccessfullMessageAfterSigninOfContract @regClickTractsLow @endUser @endUserPage1', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const viewContract = new ViewContract(page);
    const templatesPage = new TemplatesPage(page);
    const endUser = new EndUserPage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const successfullMessage = page.locator('.alert-success');
    console.log('endUser Displaying Correct Successfull Message After Signin Of Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3589');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successfullMessage).toBeVisible();
    await expect(successfullMessage).toContainText('Signed successfully. Please check your email to download a PDF copy of the contract');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue4 = await templateName.innerText();
    if (templateNameValue4.includes('autotest'))
    {
        await templateName.click();
        await viewTemplate.editTemplateButtonClick();
        await page.reload();
        await page.waitForTimeout(2000);
        await newTemplate.draftToggleClick();
        await newTemplate.saveButtonClick();
        await page.goto('/contract-templates/list?&sort=-updated_at');
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('triggeredTextVariableWasChoosenOnlyActualTextAppears @regClickTractsHigh @endUser @endUserPage1 @variables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const listTriggeredTextVariableEnduser = page.locator('p >> text=Hi world!');
    console.log('endUser Triggered Text Variable Was Choosen Only Actual Text Appears');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.contractFeeValueChoose();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(listTriggeredTextVariableEnduser).toBeVisible();
    await expect(listTriggeredTextVariableEnduser).toHaveText('Hi world!');
    await expect(listTriggeredTextVariableEnduser).not.toHaveText('trigger1');
    await expect(listTriggeredTextVariableEnduser).not.toHaveText('trigger2');
    await expect(listTriggeredTextVariableEnduser).not.toHaveText('trigger3');
    await expect(listTriggeredTextVariableEnduser).not.toHaveText('Hide');
});

test('notDisplayingAnyTriggeredWordIfHideSelected/EmptyRows @regClickTractsHigh @endUser @endUserPage1 @variables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=0'); //1
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const listTriggeredTextVariableEnduser = page.locator('p >> text=Hide');
    const listTriggeredTextVariableDropDownEnduser = page.locator('.mat-select-content');
    const pText0 = page.locator('p >> text=The user may place a point anywhere in the number. All commas after the point should be deleted automatically');
    console.log('endUser Not Displaying Any Triggered Word If Hide Selected/Empty Rows');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.contractFeeValueChoose();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(listTriggeredTextVariableEnduser).toBeHidden();
    await expect(listTriggeredTextVariableDropDownEnduser).toBeHidden();
    await expect(pText0).toBeVisible();
});

test('displayingTheCheckboxVariable/SigningTheContract @regClickTractsHigh @endUser @endUserPage1 @variables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1'); //1
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const inputCheckboxEnduser = page.locator('#elementName_5');
    const inputCheckboxTextEnduser = page.locator('[for="elementName_5"]');
    const inputCheckboxWithNestedEnduser = page.locator('#elementName_22');
    const iAgreeCheckbox = page.locator('#contractsignform-agree');
    const sucessAlert = page.locator('.alert-success');
    const checkboxSignedScreen = page.locator('.checkbox-variable img >> nth=0');
    const checkboxWithNestedSignedScreen = page.locator('.checkbox-variable img >> nth=1');
    console.log('endUser Displaying The Checkbox Variable/Signing The Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3716');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(inputCheckboxEnduser).not.toBeChecked();
    await expect(inputCheckboxEnduser).toBeVisible();
    await expect(inputCheckboxTextEnduser).toBeVisible();
    await expect(inputCheckboxTextEnduser).toHaveText('*Hi lets try to use variables');
    await expect(iAgreeCheckbox).toHaveAttribute('disabled', 'disabled');
    await expect(iAgreeCheckbox).not.toBeChecked();
    await inputCheckboxEnduser.click();
    await expect(inputCheckboxEnduser).toBeChecked();
    await expect(iAgreeCheckbox).toHaveAttribute('disabled', 'disabled');
    await expect(iAgreeCheckbox).not.toBeChecked();
    await expect(inputCheckboxWithNestedEnduser).not.toBeChecked();
    await inputCheckboxWithNestedEnduser.click();
    await expect(iAgreeCheckbox).not.toHaveAttribute('disabled', 'disabled');
    await expect(iAgreeCheckbox).not.toBeChecked();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await expect(iAgreeCheckbox).toBeChecked();
    await endUser.signButtonClick();
    await expect(sucessAlert).toBeVisible();
    await expect(checkboxSignedScreen).toBeVisible();
    await expect(checkboxSignedScreen).toHaveAttribute('src', '/img/bigcheckbox-checked.png');
    await expect(checkboxWithNestedSignedScreen).toBeVisible();
    await expect(checkboxWithNestedSignedScreen).toHaveAttribute('src', '/img/bigcheckbox-checked.png');
});

test('checkingSigningContractWithCheckboxMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @variables', async ({ page }) => {
    const inputCheckboxEnduser = page.locator('#elementName_5');
    const inputCheckboxTextEnduser = page.locator('[for="elementName_5"]');
    const inputCheckboxWithNestedEnduser = page.locator('#elementName_22');
    const iAgreeCheckbox = page.locator('#contractsignform-agree');
    const sucessAlert = page.locator('.alert-success');
    const checkboxSignedScreen = page.locator('.checkbox-variable img >> nth=0');
    console.log('endUser Checking Signing Contract With Checkbox Multiparty On');
    await page.goto('https://terms.test.noredlines.com/contract/6479/multiparty/ysstub/test100testContractEnduserMultipartyOnNoInputDateDontRemove');
    await expect(sucessAlert).toBeVisible();
    await expect(checkboxSignedScreen).toBeVisible();
    await expect(checkboxSignedScreen).toHaveAttribute('src', '/img/bigcheckbox-checked.png');
    await page.goto('https://terms.test.noredlines.com/contract/6479/multiparty/qgtesw/test100testContractEnduserMultipartyOnNoInputDateDontRemove');
    await expect(inputCheckboxEnduser).toBeVisible();
    await expect(inputCheckboxTextEnduser).toBeVisible();
    await expect(inputCheckboxTextEnduser).toHaveText('*Hi lets try to use variables');
    await expect(iAgreeCheckbox).toHaveAttribute('disabled', 'disabled');
    await inputCheckboxEnduser.click();
    await expect(iAgreeCheckbox).toHaveAttribute('disabled', 'disabled');
    await inputCheckboxWithNestedEnduser.click();
    await expect(iAgreeCheckbox).not.toHaveAttribute('disabled', 'disabled');
});

test('displayingTheMultipleChoiceVariable/SigningTheContract @regClickTractsHigh @endUser @endUserPage1 @variables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1'); //1
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const checkbox = page.locator('#elementName_5');
    const checkboxNested = page.locator('#elementName_22');
    const multipleChoiceRadioEnduser = page.locator('.multiple-choice-radio >> nth=0');
    const multipleChoiceRadioNoneEnduser = page.locator('#elementName_12-none');
    const multipleChoiceRadioNoneTextEnduser = page.locator('[for="elementName_12-none"]');
    const multipleChoiceRadioNoneSignedEnduser = page.locator('.multiple-choice-radio .radio-checkbox img >> nth=0');
    const multipleChoiceRadioButton0Enduser = page.locator('#elementName_12-0');
    const multipleChoiceRadioButton0TextEnduser = page.locator('[for="elementName_12-0"]');
    const multipleChoiceRadioButton0SignedEnduser = page.locator('.multiple-choice-radio .radio-checkbox img >> nth=1');
    const multipleChoiceRadioButton1Enduser = page.locator('#elementName_12-1');
    const multipleChoiceRadioButton1TextEnduser = page.locator('[for="elementName_12-1"]');
    const multipleChoiceRadioButton1SignedEnduser = page.locator('.multiple-choice-radio .radio-checkbox img >> nth=2');
    const multipleChoiceRadioButton2Enduser = page.locator('#elementName_12-2');
    const multipleChoiceRadioButton2TextEnduser = page.locator('[for="elementName_12-2"]');
    const multipleChoiceRadioButton2SignedEnduser = page.locator('.multiple-choice-radio .radio-checkbox img >> nth=3');
    const multipleChoiceCheckboxEnduser = page.locator('.multiple-choice-checkbox');
    const multipleChoiceCheckbox0Enduser = page.locator('#elementName_13-0');
    const multipleChoiceCheckbox0TextEnduser = page.locator('[for="elementName_13-0"]');
    const multipleChoiceCheckbox0SignedEnduser = page.locator('.multiple-choice-checkbox .radio-checkbox img >> nth=0');
    const multipleChoiceCheckbox1Enduser = page.locator('#elementName_13-1');
    const multipleChoiceCheckbox1TextEnduser = page.locator('[for="elementName_13-1"]');
    const multipleChoiceCheckbox1SignedEnduser = page.locator('.multiple-choice-checkbox .radio-checkbox img >> nth=1');
    const multipleChoiceCheckbox2Enduser = page.locator('#elementName_13-2');
    const multipleChoiceCheckbox2TextEnduser = page.locator('[for="elementName_13-2"]');
    const multipleChoiceCheckbox2SignedEnduser = page.locator('.multiple-choice-checkbox .radio-checkbox img >> nth=2');
    console.log('endUser Displaying The Multiple Choice Variable/Signing The Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3716');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(multipleChoiceRadioEnduser).toBeVisible();
    await expect(multipleChoiceRadioNoneEnduser).toBeVisible();
    await expect(multipleChoiceRadioNoneEnduser).toBeChecked();
    await expect(multipleChoiceRadioNoneTextEnduser).toBeVisible();
    await expect(multipleChoiceRadioNoneTextEnduser).toHaveText('None');
    await expect(multipleChoiceRadioButton0Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton0Enduser).not.toBeChecked();
    await expect(multipleChoiceRadioButton0TextEnduser).toBeVisible();
    await expect(multipleChoiceRadioButton0TextEnduser).toHaveText('radio button 1');
    await expect(multipleChoiceRadioButton1Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton1Enduser).not.toBeChecked();
    await expect(multipleChoiceRadioButton1TextEnduser).toBeVisible();
    await expect(multipleChoiceRadioButton1TextEnduser).toHaveText('radio button 2');
    await expect(multipleChoiceRadioButton2Enduser).toBeVisible();
    await expect(multipleChoiceRadioButton2Enduser).not.toBeChecked();
    await expect(multipleChoiceRadioButton2TextEnduser).toBeVisible();
    await expect(multipleChoiceRadioButton2TextEnduser).toHaveText('radio button 3');
    await expect(multipleChoiceCheckboxEnduser).toBeVisible();
    await expect(multipleChoiceCheckbox0Enduser).toBeVisible();
    await expect(multipleChoiceCheckbox0Enduser).not.toBeChecked();
    await expect(multipleChoiceCheckbox0TextEnduser).toBeVisible();
    await expect(multipleChoiceCheckbox0TextEnduser).toHaveText('checkbox 1');
    await expect(multipleChoiceCheckbox1Enduser).toBeVisible();
    await expect(multipleChoiceCheckbox1Enduser).not.toBeChecked();
    await expect(multipleChoiceCheckbox1TextEnduser).toBeVisible();
    await expect(multipleChoiceCheckbox1TextEnduser).toHaveText('checkbox 2');
    await expect(multipleChoiceCheckbox2Enduser).toBeVisible();
    await expect(multipleChoiceCheckbox2Enduser).not.toBeChecked();
    await expect(multipleChoiceCheckbox2TextEnduser).toBeVisible();
    await expect(multipleChoiceCheckbox2TextEnduser).toHaveText('checkbox 3');
    await multipleChoiceCheckbox0Enduser.click();
    await multipleChoiceCheckbox2Enduser.click();
    await expect(multipleChoiceCheckbox0Enduser).toBeChecked();
    await expect(multipleChoiceCheckbox2Enduser).toBeChecked();
    await expect(multipleChoiceCheckbox1Enduser).not.toBeChecked();
    await multipleChoiceRadioButton1Enduser.click();
    await expect(multipleChoiceRadioButton1Enduser).toBeChecked();
    await expect(multipleChoiceRadioNoneEnduser).not.toBeChecked();
    await checkbox.click();
    await checkboxNested.click();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(multipleChoiceRadioNoneSignedEnduser).toHaveAttribute('src', '/img/big-radio-unchecked.png');
    await expect(multipleChoiceRadioButton0SignedEnduser).toHaveAttribute('src', '/img/big-radio-unchecked.png');
    await expect(multipleChoiceRadioButton1SignedEnduser).toHaveAttribute('src', '/img/big-radio-checked.png');
    await expect(multipleChoiceRadioButton2SignedEnduser).toHaveAttribute('src', '/img/big-radio-unchecked.png');
    await expect(multipleChoiceCheckbox0SignedEnduser).toHaveAttribute('src', '/img/bigcheckbox-checked.png');
    await expect(multipleChoiceCheckbox1SignedEnduser).toHaveAttribute('src', '/img/bigcheckbox-unchecked.png');
    await expect(multipleChoiceCheckbox2SignedEnduser).toHaveAttribute('src', '/img/bigcheckbox-checked.png');
});

test('displayingTheNestedVariable @regClickTractsMedium @endUser @endUserPage1 @variables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const checkboxNested = page.locator('.checkbox-variable >> nth=1');
    console.log('endUser Displaying The Nested Variable');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3716');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    const getCheckboxNsetedHtml = await checkboxNested.innerHTML();
    await expect(getCheckboxNsetedHtml).toContain('name="elementName_7"');
    await expect(getCheckboxNsetedHtml).toContain('Kevin');
    await expect(getCheckboxNsetedHtml).toContain('name="elementName_4"');
    await expect(getCheckboxNsetedHtml).toContain('href="//youtube.com"');
    await expect(getCheckboxNsetedHtml).toContain('youtube.com');
    await expect(getCheckboxNsetedHtml).toContain("Checkbox with nested variables it is very important feature, so let's try it!");
});

test('displayingTheSigner @regClickTractsMedium @endUser @endUserPage1 @signerVariables', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputDateVariable = page.locator('#configurator-variable-elementName_2');
    const inputDateVaraiableInputField = page.locator('#variables-list-form-control-value-elementName_2');
    const inputDateVariableInputFieldCalendar = page.locator('mat-calendar');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signerInputTextEnduser = page.locator('input[name="elementName_14"] >> nth=0');
    const signerInputDateEnduser = page.locator('input[name="elementName_15"] >> nth=0');
    const signerInputNumberEnduser = page.locator('input[name="elementName_16"] >> nth=0');
    const signerInputUrlEnduser = page.locator('input[name="elementName_17"] >> nth=0');
    const signerListTextEnduser = page.locator('select[name="elementName_18"] >> nth=0');
    const signerListDateEnduser = page.locator('select[name="elementName_19"] >> nth=0');
    const signerListNumberEnduser = page.locator('select[name="elementName_20"] >> nth=0');
    const signerListUrlEnduser = page.locator('select[name="elementName_21"] >> nth=0');
    console.log('endUser Displaying The Signer');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3500');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await inputDateVariable.click();
    await inputDateVaraiableInputField.click();
    await expect(inputDateVariableInputFieldCalendar).toBeVisible();
    await page.locator('.mat-calendar-period-button').click();
    await page.locator('.mat-calendar-body-cell-content >> text=2039').click();
    await page.locator('.mat-calendar-body-cell-content >> text=JUN').click();
    await page.locator('.mat-calendar-body-cell-content >> text=15').click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await expect(signerInputTextEnduser).toBeVisible();
    await expect(signerInputTextEnduser).toHaveAttribute('type', 'text');
    await expect(signerInputTextEnduser).toHaveAttribute('data-type', 'text');
    await expect(signerInputTextEnduser).toHaveAttribute('placeholder', 'signerInputText');
    await expect(signerInputDateEnduser).toBeVisible();
    await expect(signerInputDateEnduser).toHaveAttribute('type', 'date');
    await expect(signerInputDateEnduser).toHaveAttribute('data-type', 'date');
    await expect(signerInputDateEnduser).toHaveAttribute('placeholder', 'signerInputDate');
    await expect(signerInputNumberEnduser).toBeVisible();
    await expect(signerInputNumberEnduser).toHaveAttribute('type', 'tel');
    await expect(signerInputNumberEnduser).toHaveAttribute('data-type', 'number');
    await expect(signerInputNumberEnduser).toHaveAttribute('placeholder', 'signerInputNumber');
    await expect(signerInputUrlEnduser).toBeVisible();
    await expect(signerInputUrlEnduser).toHaveAttribute('type', 'url');
    await expect(signerInputUrlEnduser).toHaveAttribute('data-type', 'url');
    await expect(signerInputUrlEnduser).toHaveAttribute('placeholder', 'signerInputUrl');
    const signerListTextGetHtml = await signerListTextEnduser.innerHTML();
    await expect(signerListTextGetHtml).toContain('signerListText');
    await expect(signerListTextGetHtml).toContain('Hi');
    await expect(signerListTextGetHtml).toContain('Yes');
    await expect(signerListTextGetHtml).toContain('No');
    const signerListDateGetHtml = await signerListDateEnduser.innerHTML();
    await expect(signerListDateGetHtml).toContain('signerListDate');
    await expect(signerListDateGetHtml).toContain('09/11/2013');
    await expect(signerListDateGetHtml).toContain('11/16/2026');
    await expect(signerListDateGetHtml).toContain('05/28/1998');
    const signerListNumberGetHtml = await signerListNumberEnduser.innerHTML();
    await expect(signerListNumberGetHtml).toContain('signerListNumber');
    await expect(signerListNumberGetHtml).toContain('2,131,232');
    await expect(signerListNumberGetHtml).toContain('34,324,324');
    await expect(signerListNumberGetHtml).toContain('456,456,456');
    const signerListUrlGetHtml = await signerListUrlEnduser.innerHTML();
    await expect(signerListUrlGetHtml).toContain('signerListUrl');
    await expect(signerListUrlGetHtml).toContain('linkedin.com');
    await expect(signerListUrlGetHtml).toContain('maildrop.cc');
    await expect(signerListUrlGetHtml).toContain('twitch.tv');
});

test('displayingTheSignerVariablesMultipartyOn @regClickTractsHigh @endUser @endUserPage1 @signerVariables', async ({ page }) => {
    const signerInputTextSigned = page.locator('[name="elementName_14"] >> nth=0');
    const signerInputDateSigned = page.locator('[name="elementName_15"] >> nth=0');
    const signerInputNumberSigned = page.locator('[name="elementName_16"] >> nth=0');
    const signerInputUrlSigned = page.locator('[name="elementName_17"] >> nth=0');
    const signerInputUrlValueSigned = page.locator('input[name="elementName_17"] >> nth=0');
    const signerListTextSigned = page.locator('[name="elementName_18"] >> nth=0');
    const signerListDateSigned = page.locator('[name="elementName_19"] >> nth=0');
    const signerListNumberSigned = page.locator('[name="elementName_20"] >> nth=0');
    const signerListUrlSigned = page.locator('[name="elementName_21"] >> nth=0');
    console.log('endUser Displaying The Signer Variables Multiparty On');
    await page.goto('https://terms.test.noredlines.com/contract/6479/multiparty/ysstub/test100testContractEnduserMultipartyOnNoInputDateDontRemove');
    await expect(signerInputTextSigned).toHaveText('test100test');
    await expect(signerInputDateSigned).toHaveClass('signer-variable not-available');
    await expect(signerInputNumberSigned).toHaveText('567,675');
    await expect(signerInputUrlSigned).toHaveClass('signer-variable not-available');
    await expect(signerListTextSigned).toHaveClass('signer-variable not-available');
    await expect(signerListDateSigned).toHaveClass('signer-variable not-available');
    await expect(signerListNumberSigned).toHaveClass('signer-variable not-available');
    await expect(signerListUrlSigned).toHaveClass('signer-variable not-available');
    await page.goto('https://terms.test.noredlines.com/contract/6479/multiparty/qgtesw/test100testContractEnduserMultipartyOnNoInputDateDontRemove');
    await expect(signerInputTextSigned).toHaveText('test100test');
    await expect(signerInputDateSigned).toHaveClass('signer-variable not-available');
    await expect(signerInputNumberSigned).toHaveText('567,675');
    await expect(signerInputUrlSigned).toHaveClass('signer-variable');
    await expect(signerListTextSigned).toHaveClass('signer-variable not-available');
    await expect(signerListDateSigned).toHaveClass('signer-variable not-available');
    await expect(signerListNumberSigned).toHaveClass('signer-variable not-available');
    await signerInputUrlValueSigned.type('youtube.com');
    await expect(signerInputUrlValueSigned).toHaveValue('youtube.com');
});

test('checkingTheTextInputContentType @regClickTractsHigh @endUser @endUserPage1 @signerVariables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signerInputTextEnduser = page.locator('input[name="elementName_14"] >> nth=0');
    const checkbox = page.locator('#elementName_5');
    const checkboxNested = page.locator('#elementName_22');
    console.log('endUser Checking The Text Input Content Type');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await checkbox.click();
    await checkboxNested.click();
    await signerInputTextEnduser.type("test100test@!'@&<");
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForErorrClick();
    await expect(signerInputTextEnduser).toHaveCSS('border-color', 'rgb(204, 204, 204)');
    await expect(signerInputTextEnduser).not.toHaveCSS('border-color', 'rgb(255, 0, 0)');
});



test('checkingTheNumberInputContentType @regClickTractsHigh @endUser @endUserPage1 @signerVariables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signerInputNumberEnduser = page.locator('input[name="elementName_16"] >> nth=0');
    console.log('endUser Checking The Number Input Content Type');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await page.waitForTimeout(1000);
    await signerInputNumberEnduser.type('test');
    await expect(signerInputNumberEnduser).toHaveValue('');
    await signerInputNumberEnduser.type('1234');
    await expect(signerInputNumberEnduser).toHaveValue('1,234');
    await signerInputNumberEnduser.type('5');
    await expect(signerInputNumberEnduser).toHaveValue('12,345');
    await signerInputNumberEnduser.type('6');
    await expect(signerInputNumberEnduser).toHaveValue('123,456');
    await signerInputNumberEnduser.type('7');
    await expect(signerInputNumberEnduser).toHaveValue('1,234,567');
    await signerInputNumberEnduser.fill('');
    await signerInputNumberEnduser.type('12.3467');
    await expect(signerInputNumberEnduser).toHaveValue('12.3467');
    await signerInputNumberEnduser.fill('');
    await signerInputNumberEnduser.type('.1234567');
    await expect(signerInputNumberEnduser).toHaveValue('0.1234567');
});

test('choosingTheOptionsInTheText/Date/Number/UrlContentTypes @regClickTractsHigh @endUser @endUserPage1 @signerVariables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signerListTextEnduser = page.locator('select[name="elementName_18"] >> nth=0');
    const signerListDateEnduser = page.locator('select[name="elementName_19"] >> nth=0');
    const signerListNumberEnduser = page.locator('select[name="elementName_20"] >> nth=0');
    const signerListUrlEnduser = page.locator('select[name="elementName_21"] >> nth=0');
    console.log('endUser Choosing The Options In The Text/Date/Number/Url Content Types');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await signerListTextEnduser.selectOption('1');
    await expect(signerListTextEnduser).toHaveValue('1');
    await signerListDateEnduser.selectOption('2');
    await expect(signerListDateEnduser).toHaveValue('2');
    await signerListNumberEnduser.selectOption('0');
    await expect(signerListNumberEnduser).toHaveValue('0');
    await signerListUrlEnduser.selectOption('1');
    await expect(signerListUrlEnduser).toHaveValue('1');
});

test('behaviorVariableInsertedTwoTimes @regClickTractsLow @endUser @endUserPage1 @signerVariables', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const inputTextVariable = page.locator('#configurator-variable-elementName_1');
    const inputTextVariableTextField = page.locator('#variables-list-form-control-value-elementName_1');
    const listTextVariable = page.locator('#configurator-variable-elementName_7');
    const listTextVariableSelect = page.locator('#variables-list-form-control-value-elementName_7');
    const listTextVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listDateVariable = page.locator('#configurator-variable-elementName_8');
    const listDateVariableSelect = page.locator('#variables-list-form-control-value-elementName_8');
    const listDateVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputNumberVariable = page.locator('#configurator-variable-elementName_3');
    const inputNumberVariableTextField = page.locator('#variables-list-form-control-value-elementName_3');
    const listNumberVariable = page.locator('#configurator-variable-elementName_9');
    const listNumberVariableSelect = page.locator('#variables-list-form-control-value-elementName_9');
    const listNumberVariableSelectOption = page.locator('.mat-option >> nth=1');
    const inputUrlVariable = page.locator('#configurator-variable-elementName_4');
    const inputUrlVariableTextField = page.locator('#variables-list-form-control-value-elementName_4');
    const listUrlVariable = page.locator('#configurator-variable-elementName_10');
    const listUrlVariableSelect = page.locator('#variables-list-form-control-value-elementName_10');
    const listUrlVariableSelectOption = page.locator('.mat-option >> nth=2');
    const inputTextareaVariable = page.locator('#configurator-variable-elementName_6');
    const listTriggeredVariable = page.locator('#configurator-variable-elementName_11');
    const listTriggeredVariableSelect = page.locator('#variables-list-form-control-value-elementName_11');
    const listTriggeredVariableSelectOption = page.locator('.mat-option >> nth=1');
    const listTriggeredVariableWithNested = page.locator('#configurator-variable-elementName_23');
    const listTriggeredVariableWithNestedSelect = page.locator('#variables-list-form-control-value-elementName_23');
    const listTriggeredVariableSelectWithNestedOption = page.locator('.mat-option >> nth=2');
    const textEditor = page.locator('.cke_enable_context_menu >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signerListTextEnduser = page.locator('select[name="elementName_18"] >> nth=0');
    const signerListTextEnduser1 = page.locator('select[name="elementName_18"] >> nth=1');
    const signerListTextEnduser2 = page.locator('select[name="elementName_18"] >> nth=2');
    console.log('endUser Choosing Behavior Variable Inserted Two Times');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3508');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await inputTextVariable.click();
    await inputTextVariableTextField.type('test100test');
    await listTextVariable.click();
    await listTextVariableSelect.click();
    await listTextVariableSelectOption.click();
    await listDateVariable.click();
    await listDateVariableSelect.click();
    await listDateVariableSelectOption.click();
    await inputNumberVariable.click();
    await inputNumberVariableTextField.type('2963145');
    await listNumberVariable.click();
    await listNumberVariableSelect.click();
    await listNumberVariableSelectOption.click();
    await inputUrlVariable.click();
    await inputUrlVariableTextField.type('youtube.com');
    await listUrlVariable.click();
    await listUrlVariableSelect.click();
    await listUrlVariableSelectOption.click();
    await inputTextareaVariable.click();
    await textEditor.type('test100test');
    await listTriggeredVariable.click();
    await listTriggeredVariableSelect.click();
    await listTriggeredVariableSelectOption.click();
    await listTriggeredVariableWithNested.click();
    await listTriggeredVariableWithNestedSelect.click();
    await listTriggeredVariableSelectWithNestedOption.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue);
    await page.waitForTimeout(1000);
    await signerListTextEnduser.selectOption('1');
    await expect(signerListTextEnduser).toHaveValue('1');
    await expect(signerListTextEnduser1).toHaveValue('1');
    await expect(signerListTextEnduser2).toHaveValue('1');
});

test('displayingThe404PageBackToDraftContract @regClickTractsHigh @endUser @endUserPage1 @expiring/PermanentLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewTemplate = new ViewTemplatePage(page);
    const viewContract = new ViewContract(page);
    const contracts = new ContractsPage(page);
    const templatesPage = new TemplatesPage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const expiryLinkValue = page.locator('#copy-link-expiring-link input');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const notFoundText = page.locator('h1');
    const notFoundError = page.locator('.alert-danger');
    const contractNameText = page.locator('h1');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    console.log('endUser Displaying The 404 Page Back To Draft Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleField.fill('test100testTemplate404page');
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleField.fill('test100testContract404page' + Helpers.generateRandomString());
    await newContract.contractDescriptionTitleField.fill('test100testContract404page');
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    const expiryLinkGetValue0 = await expiryLinkValue.inputValue();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await viewContract.backToDraftButtonClick();
    await newContract.saveButtonClick();
    await page.goto(expiryLinkGetValue0);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto(permanentLinkGetValue0);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue0 = await contractName.innerText();
    if (contractNameValue0.includes('test100testContract404page'))
    {
        await contractName.click();
    }
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await page.goto(expiryLinkGetValue0);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto(permanentLinkGetValue0);
    await expect(contractNameText).toBeVisible();
    await expect(contractNameText).toContainText('test100testContract404page');
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeVisible();
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue1 = await contractName.innerText();
    if (contractNameValue1.includes('test100testContract404page'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await userBar.logOutAction();
    await users.AUForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/clients/411');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue0 = await templateName.innerText();
    if (templateNameValue0.includes('test100testTemplate404page'))
    {
        await templateName.click();
        await viewTemplate.createContractButtonClick();
    }
    await newContract.contractTitleField.fill('test100testContract404page' + Helpers.generateRandomString());
    await newContract.contractDescriptionTitleField.fill('test100testContract404page');
    await newContract.publishToggleClick();
    await newContract.saveAndSubmitButtonClick();
    const getUrl1 = await page.url();
    await userBar.logOutAction();
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(getUrl1);
    await viewContract.approveButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    const expiryLinkGetValue1 = await expiryLinkValue.inputValue();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue1 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await viewContract.backToDraftButtonClick();
    await newContract.saveButtonClick();
    await page.goto(expiryLinkGetValue1);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto(permanentLinkGetValue1);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto('');
    await userBar.logOutAction();
    await users.AUForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/clients/411');
    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue2 = await contractName.innerText();
    if (contractNameValue2.includes('test100testContract404page'))
    {
        await contractName.click();
    }
    await newContract.publishToggleClick();
    await newContract.saveAndSubmitButtonClick();
    const getUrl2 = await page.url();
    await userBar.logOutAction();
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(getUrl2);
    await viewContract.approveButtonClick();
    await page.goto(expiryLinkGetValue1);
    await expect(notFoundText).toBeVisible();
    await expect(notFoundText).toContainText('Not Found (#404)');
    await expect(notFoundError).toBeVisible();
    await expect(notFoundError).toContainText('The requested page does not exist.');
    await page.goto(permanentLinkGetValue1);
    await expect(contractNameText).toBeVisible();
    await expect(contractNameText).toContainText('test100testContract404page');
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeVisible();

    await page.goto('/contracts/list?&sort=-created_at');
    const contractNameValue3 = await contractName.innerText();
    if (contractNameValue3.includes('test100testContract404page'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDeleteButtonClick();
        await contracts.threeDotsMenuDeletePopupDeleteButtonClick();
    }
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValue1 = await templateName.innerText();
    if (templateNameValue1.includes('test100testTemplate404page'))
    {
        await templateName.click();
        await viewTemplate.editTemplateButtonClick();
        await page.reload();
        await page.waitForTimeout(2000);
        await newTemplate.draftToggleClick();
        await newTemplate.saveButtonClick();
        await page.goto('/contract-templates/list?&sort=-updated_at');
        await templatesPage.threeDotsMenuDeleteButtonClick();
        await templatesPage.deletePopupDeleteButtonClick();
    }
});

test('noLimitOfTheSignTheExparyLinkContract @regClickTractsMedium @endUser @endUserPage1 @expiring/PermanentLink', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const expiryLinkValue = page.locator('#copy-link-expiring-link input');
    const notFoundError = page.locator('.alert-danger');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser No Limit Of The Sign The Expary Link Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    const expiryLinkGetValue0 = await expiryLinkValue.inputValue();
    await page.goto(expiryLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(notFoundError).toBeHidden();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(expiryLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(notFoundError).toBeHidden();
    await page.goto('');
    await page.goto(expiryLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(notFoundError).toBeHidden();
});

test('notDisplayingSignaturesBlockSignaturesDisabled @regClickTractsMedium @endUser @endUserPage1 @expiring/PermanentLink', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const expiryLinkValue = page.locator('#copy-link-expiring-link input');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    const noSignaturesText = page.locator('.no-signatures');
    console.log('endUser Not Displaying Signatures Block Signatures Disabled');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3772');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    const expiryLinkGetValue0 = await expiryLinkValue.inputValue();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(expiryLinkGetValue0);
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(noSignaturesText).toBeVisible();
    await expect(noSignaturesText).toHaveText('No signatures for this contract');
    await page.goto(permanentLinkGetValue0);
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(noSignaturesText).toBeVisible();
    await expect(noSignaturesText).toHaveText('No signatures for this contract');
});

test('prefillingAndDisablingSignatureFieldsLoggedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldFirstName = page.locator('#contractsignform-first_name');
    const signaturesFieldLastName = page.locator('#contractsignform-last_name');
    const signaturesFieldEntityName = page.locator('#contractsignform-company_name');
    const signaturesFieldTitle = page.locator('#contractsignform-title');
    const signaturesFieldEmail = page.locator('#contractsignform-email');
    const signaturesFieldConfirmEmail = page.locator('#contractsignform-confirm_email');
    const signaturesFieldSignature = page.locator('#contractsignform-signature');
    console.log('endUser Prefilling And Disabling Signature Fields Logged User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(signaturesFieldFirstName).toBeVisible();
    await expect(signaturesFieldFirstName).toHaveAttribute('readonly', '');
    await expect(signaturesFieldFirstName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldLastName).toBeVisible();
    await expect(signaturesFieldLastName).toHaveAttribute('readonly', '');
    await expect(signaturesFieldLastName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldEntityName).toBeVisible();
    await expect(signaturesFieldEntityName).toHaveAttribute('readonly', '');
    await expect(signaturesFieldEntityName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldTitle).toBeVisible();
    await expect(signaturesFieldTitle).toHaveValue('');
    await expect(signaturesFieldEmail).toBeVisible();
    await expect(signaturesFieldEmail).toHaveAttribute('readonly', '');
    await expect(signaturesFieldEmail).toHaveValue('aaforenduser@maildrop.cc');
    await expect(signaturesFieldConfirmEmail).toBeVisible();
    await expect(signaturesFieldConfirmEmail).toHaveAttribute('readonly', '');
    await expect(signaturesFieldConfirmEmail).toHaveValue('aaforenduser@maildrop.cc');
    await expect(signaturesFieldSignature).toBeVisible();
    await expect(signaturesFieldSignature).toHaveValue('');
});

test('validationForTheFirst/LastNameFieldsNotSignedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldFirstName = page.locator('#contractsignform-first_name');
    const signaturesFieldFirstNameLabelError = page.locator('.field-contractsignform-first_name .control-label');
    const signaturesFieldFirstNameTextError = page.locator('.field-contractsignform-first_name .help-block');
    const signaturesFieldLastName = page.locator('#contractsignform-last_name');
    const signaturesFieldLastNameLabelError = page.locator('.field-contractsignform-last_name .control-label');
    const signaturesFieldLastNameTextError = page.locator('.field-contractsignform-last_name .help-block');
    console.log('endUser Validation For The First/Last Name Fields Not SignedUser');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.iAgreeCheckboxClick();
    await expect(signaturesFieldFirstName).toBeVisible();
    await expect(signaturesFieldFirstName).toHaveAttribute('maxlength', '50');
    await expect(signaturesFieldFirstName).toHaveValue('');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldFirstName).toHaveCSS('border-color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldFirstNameLabelError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldFirstNameTextError).toBeVisible();
    await expect(signaturesFieldFirstNameTextError).toHaveText('Mandatory field.');
    await expect(signaturesFieldFirstNameTextError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await endUser.firstNameField.fill('test100test%$@£%');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldFirstNameTextError).toBeVisible();
    await expect(signaturesFieldFirstNameTextError).toHaveText('Only letters are allowed.');
    await endUser.firstNameField.fill('t');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldFirstNameTextError).toBeHidden();
    await expect(signaturesFieldLastName).toBeVisible();
    await expect(signaturesFieldLastName).toHaveAttribute('maxlength', '50');
    await expect(signaturesFieldLastName).toHaveValue('');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldLastName).toHaveCSS('border-color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldLastNameLabelError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldLastNameTextError).toBeVisible();
    await expect(signaturesFieldLastNameTextError).toHaveText('Mandatory field.');
    await expect(signaturesFieldLastNameTextError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await endUser.lastNameField.fill('test100test%$@£%');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldLastNameTextError).toBeVisible();
    await expect(signaturesFieldLastNameTextError).toHaveText('Only letters are allowed.');
    await endUser.lastNameField.fill('t');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldLastNameTextError).toBeVisible();
    await expect(signaturesFieldLastNameTextError).toHaveText('Last Name should contain at least 2 characters.');
});

test('validationOfTheTitleFieldNotSignedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldTitle = page.locator('#contractsignform-title');
    const signaturesFieldTitleLabelError = page.locator('.field-contractsignform-title .control-label');
    const signaturesFieldTitleTextError = page.locator('.field-contractsignform-title .help-block');
    console.log('endUser Validation Of The Title Field Not Signed User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.iAgreeCheckboxClick();
    await expect(signaturesFieldTitle).toBeVisible();
    await expect(signaturesFieldTitle).toHaveAttribute('maxlength', '60');
    await expect(signaturesFieldTitle).not.toHaveAttribute('aria-required', 'true');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldTitle).toHaveCSS('border-color', 'rgb(60, 118, 61)');
    await expect(signaturesFieldTitleLabelError).toHaveCSS('color', 'rgb(60, 118, 61)');
    await expect(signaturesFieldTitleTextError).toBeHidden();
});

test('validationForTheEmail/ConfirmEmialFieldNotSignedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField', async ({ page, browserName }) => {
    test.skip(browserName === 'webkit');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldEmail = page.locator('#contractsignform-email');
    const signaturesFieldEmailLabelError = page.locator('.field-contractsignform-email .control-label');
    const signaturesFieldEmailTextError = page.locator('.field-contractsignform-email .help-block');
    const signaturesFieldConfirmEmail = page.locator('#contractsignform-confirm_email');
    const signaturesFieldConfirmEmailLabelError = page.locator('.field-contractsignform-confirm_email .control-label');
    const signaturesFieldConfirmEmailTextError = page.locator('.field-contractsignform-confirm_email .help-block');
    console.log('endUser Validation For The Email/Confirm Emial Field Not Signed User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.iAgreeCheckboxClick();
    await expect(signaturesFieldEmail).toBeVisible();
    await expect(signaturesFieldEmail).toHaveAttribute('aria-required', 'true');
    await expect(signaturesFieldEmail).toHaveAttribute('maxlength', '70');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldEmail).toHaveCSS('border-color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldEmailLabelError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldEmailTextError).toBeVisible();
    await expect(signaturesFieldEmailTextError).toHaveText('Mandatory field.');
    await expect(signaturesFieldEmailTextError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await signaturesFieldEmail.type('test100test');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldEmailTextError).toBeVisible();
    await expect(signaturesFieldEmailTextError).toHaveText('Wrong email format. Please check.');
    await signaturesFieldEmail.type('test100test@maildrop.cc');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldEmailTextError).toBeHidden();
    await expect(signaturesFieldConfirmEmail).toBeVisible();
    await expect(signaturesFieldConfirmEmail).toHaveAttribute('aria-required', 'true');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldConfirmEmail).toHaveCSS('border-color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldConfirmEmailLabelError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldConfirmEmailTextError).toBeVisible();
    await expect(signaturesFieldConfirmEmailTextError).toHaveText('Mandatory field.');
    await expect(signaturesFieldConfirmEmailTextError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await signaturesFieldConfirmEmail.type('test100test');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldConfirmEmailTextError).toBeVisible();
    await expect(signaturesFieldConfirmEmailTextError).toHaveText('Wrong email format. Please check.');
    await signaturesFieldConfirmEmail.type('test100test@maildrop.cc');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldConfirmEmailTextError).toBeHidden();
    await signaturesFieldConfirmEmail.fill('');
    await signaturesFieldConfirmEmail.type('test100test11@maildrop.cc');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldConfirmEmailTextError).toBeVisible();
    await expect(signaturesFieldConfirmEmailTextError).toHaveText('The email address must match in the Email and Confirm Email boxes.');
});

test('validationForTheSignatureNotSignedUser @regClickTractsMedium @endUser @endUserPage1 @signatureField', async ({ page, browserName }) => {
    test.skip(browserName === 'chromium');
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldSignature = page.locator('#contractsignform-signature');
    const signaturesFieldSignatureLabelError = page.locator('.field-contractsignform-signature .control-label');
    const signaturesFieldSignatureTextError = page.locator('.field-contractsignform-signature .help-block');
    console.log('endUser Validation For The Signature Field Not Signed User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.iAgreeCheckboxClick();
    await expect(signaturesFieldSignature).toBeVisible();
    await expect(signaturesFieldSignature).toHaveAttribute('aria-required', 'true');
    await expect(signaturesFieldSignature).toHaveAttribute('maxlength', '50');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldSignature).toHaveCSS('border-color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldSignatureLabelError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await expect(signaturesFieldSignatureTextError).toBeVisible();
    await expect(signaturesFieldSignatureTextError).toHaveText('Mandatory field.');
    await expect(signaturesFieldSignatureTextError).toHaveCSS('color', 'rgb(169, 68, 66)');
    await signaturesFieldSignature.type('test100test%£@$&^%$');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldSignatureTextError).toBeVisible();
    await expect(signaturesFieldSignatureTextError).toHaveText('Only letters and space allowed');
    await signaturesFieldSignature.fill('');
    await signaturesFieldSignature.type('test');
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldSignatureTextError).toBeHidden();
    await expect(signaturesFieldSignature).toHaveCSS('text-transform', 'uppercase');
});

test('validationForActivating/NotActivatingIAgreeCheckbox @regClickTractsHigh @endUser @endUserPage1 @signatureField', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signButton = page.locator('#sign-btn');
    console.log('endUser Validation For Activating/Not Activating I Agree Checkbox');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(signButton).toBeDisabled();
    await endUser.iAgreeCheckboxClick();
    await expect(signButton).toBeEditable();
    await endUser.iAgreeCheckboxClick();
    await expect(signButton).toBeDisabled();
});

test('checkingThatOneCompanyIsAbleToSignContractOnlyOneTime @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const expiryLinkValue = page.locator('#copy-link-expiring-link input');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Displaying Privacy Box/Openning Privacy Page/Validation Clsoe Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkClick();
    const expiryLinkGetValue0 = await expiryLinkValue.inputValue();
    await page.goto(expiryLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await page.goto('');
    await page.goto(expiryLinkGetValue0);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('checkingSigningTheContractWithMultipartyGroups @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const groupName0 = page.locator('#variables-list-form-control-value-0');
    const groupChooseVariables0 = page.locator('[name=signer_variables_input] >> nth=0');
    const groupName1 = page.locator('#variables-list-form-control-value-1');
    const groupChooseVariables1 = page.locator('[name=signer_variables_input] >> nth=1');
    const groupName2 = page.locator('#variables-list-form-control-value-2');
    const groupChooseVariables2 = page.locator('[name=signer_variables_input] >> nth=2');
    const groupName3 = page.locator('#variables-list-form-control-value-3');
    const groupChooseVariables3 = page.locator('[name=signer_variables_input] >> nth=3');
    const variableGroupOption0 = page.locator('.variable-group-option >> nth=0');
    const variableGroupOption1 = page.locator('.variable-group-option >> nth=1');
    const copyLinkGroup0 = page.locator('.btn-action--copylink div >> nth=0');
    const copyLinkGroup1 = page.locator('.btn-action--copylink div >> nth=1');
    const copyLinkGroup2 = page.locator('.btn-action--copylink div >> nth=2');
    const copyLinkGroup3 = page.locator('.btn-action--copylink div >> nth=3');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const signButton = page.locator('#sign-btn');
    const endUserSignedSignaturesTable = page.locator('.table');
    const endUserSignerNumberInputVariable = page.locator('[name=elementName_3] input');
    const endUserSignerUrlInputVariable = page.locator('[name=elementName_4] input');
    console.log('endUser Checking Signing The Contract With Multiparty Groups');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4033');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorAddGroupButtonClick();
    await groupName0.fill('group0');
    await groupChooseVariables0.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName1.fill('group1');
    await groupChooseVariables1.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName2.fill('group2');
    await groupChooseVariables2.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName3.fill('group3');
    await groupChooseVariables3.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupExpiryGetLinkMultipartyClick();
    const getGroup0ExpiryLink = await copyLinkGroup0.getAttribute('data-link');
    const getGroup1ExpiryLink = await copyLinkGroup1.getAttribute('data-link');
    const getGroup2ExpiryLink = await copyLinkGroup2.getAttribute('data-link');
    const getGroup3ExpiryLink = await copyLinkGroup3.getAttribute('data-link');
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const getGroup0PermanentLink = await copyLinkGroup0.getAttribute('data-link');
    const getGroup1PermanentLink = await copyLinkGroup1.getAttribute('data-link');
    const getGroup2PermanentLink = await copyLinkGroup2.getAttribute('data-link');
    const getGroup3PermanentLink = await copyLinkGroup3.getAttribute('data-link');
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(getGroup1PermanentLink);
    await endUserSignerNumberInputVariable.type('4324235');
    await endUserSignerUrlInputVariable.type('google.com');
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await page.goto('');
    await page.goto(getGroup1PermanentLink);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeHidden();
    await page.goto(getGroup0PermanentLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
    await page.goto(getGroup2PermanentLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
    await page.goto(getGroup3PermanentLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
    await page.goto('');
    await page.goto(getGroup1ExpiryLink);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await page.goto(getGroup0ExpiryLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
    await page.goto(getGroup2ExpiryLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
    await page.goto(getGroup3ExpiryLink);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable).toContainText(getEmailValue1);
    await expect(signButton).toBeVisible();
});

test('validationOfTheLegalEntityField @regClickTractsMedium @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldEntityName = page.locator('#contractsignform-company_name');
    const signaturesFieldTitleTextError = page.locator('.field-contractsignform-title .help-block');
    console.log('endUser Displaying Privacy Box/Openning Privacy Page/Validation Clsoe Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(signaturesFieldEntityName).toHaveAttribute('aria-required', 'true');
    await expect(signaturesFieldEntityName).toHaveAttribute('maxlength', '70');
    await signaturesFieldEntityName.type('test100test@£$@£%^');
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForErorrClick();
    await expect(signaturesFieldTitleTextError).toBeHidden();
});

test('checkingNotDisplayingTheConfirmLegalEntityPopupForSignedUser @regClickTractsMedium @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const legalEntityPopup = page.locator('#relative-company-modal');
    console.log('endUser Checking Not Displaying The Confirm Legal Entity Popup For SignedUser');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(legalEntityPopup).toBeHidden();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('validationForTheLegalEntityPopup/LowerAndUpperCases @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const legalEntityPopup = page.locator('#relative-company-modal');
    console.log('endUser Validation For The Legal Entity Popup/Lower And Upper Cases');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForEn');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforenduser@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforenduser@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await page.reload();
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAFOREN');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforenduser@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforenduser@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await page.reload();
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('aaforen');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforenduser@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforenduser@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
});

test('checkingAbillityToSignTheContractForNotLoggedUser @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Checking Abillity To Sign The Contract For Not Logged User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForEnduser');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('checkingNotRegisterCompanyAbleToSignNotLimitedContractsDifferentEmail @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Checking Not Registered Company Able Sign Not Limited Contracts Different Email');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill(getLegalEntityValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill(getLegalEntityValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue2 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue2);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('signingTheContractByNotExistingEmailFromTwoDifferentCompanies @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Signing The Contract By Not Existing Email From Two Different Companies');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/2479');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue1 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue1);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill(getLegalEntityValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(getEmailValue1);
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('signingContractWithNotRegisteredEmailOnBehalfOfRegisteredCompany @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const signaturesInboudRow0 = page.locator('.mat-row >> nth=0');
    const signaturesInboudContractCreatorName0 = page.locator('.contract-creator-column-link >> nth=0');
    const timelineDealTitle = page.locator('.timeline__deal-title');
    const timelineDealName = page.locator('.deal-name >> nth=0');
    const timelineDealDate = page.locator('.mat-column-signed_date >> nth=0');
    console.log('endUser Signing Contract With Not Registered Email On Behalf Of Registered Company');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForSignaturesInbound');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await users.AAForSignaturesInbound();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/signed-users/my-list?&sort=-created_at');
    await expect(signaturesInboudRow0).toBeVisible();
    await expect(signaturesInboudContractCreatorName0).toHaveText('AAForEnduser');
    await signaturesInboudContractCreatorName0.click();
    await expect(timelineDealTitle).toBeVisible();
    await timelineDealTitle.click();
    await page.waitForSelector('.mat-dialog-container');
    await expect(timelineDealName).toContainText('autotest');
    await expect(timelineDealDate).toHaveText(Helpers.currentDateForSignatures());
});

test('notSigningContractIfUserUsesExistingEmailAndLegalEntity @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const existingUserAlert = page.locator('.alert-danger >> nth=0');
    console.log('endUser Signing Not Signing Contract If User Uses Existing Email And Legal Entity');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForEnduser');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforenduser@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforenduser@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityErrorClick();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(existingUserAlert).toBeVisible();
    await expect(existingUserAlert).toContainText('You are trying to sign a contract on behalf ot the existing ContractsRx user. Please Log In to sign it');
});

test('notSigningContractIfUserUsesExistingEmailAndLegalEntityOtherExistingClient @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const existingUserAlert = page.locator('.alert-danger >> nth=0');
    console.log('endUser Signing Not Signing Contract If User Uses Existing Email And Legal Entity Other Existing Client');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForSignaturesInbound');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforsignaturesinbound@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforsignaturesinbound@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityErrorClick();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(existingUserAlert).toBeVisible();
    await expect(existingUserAlert).toContainText('You are trying to sign a contract on behalf ot the existing ContractsRx user. Please Log In to sign it');
});

test('notSigningContractIfUserUsesExistingEmailAndNotExistingLegalEntity @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const existingUserAlert = page.locator('.alert-danger >> nth=0');
    console.log('endUser Signing Not Signing Contract If User Uses Existing Email And Not Existing Legal Entity');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforsignaturesinbound@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforsignaturesinbound@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityErrorClick();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(existingUserAlert).toBeVisible();
    await expect(existingUserAlert).toContainText('You are trying to sign a contract on behalf ot the existing ContractsRx user. Please Log In to sign it');
});

test('notSigningContractIfUserUsesExistingEmailAndExistingLegalEntitySignedByOtherClient @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const existingUserAlert = page.locator('.alert-danger >> nth=0');
    console.log('endUser Signing Not Signing Contract If User Uses Existing Email And Not Existing Legal Entity Signed By Other Client');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForSignaturesInbound');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforsignaturesinbound@maildrop.cc');
    await page.locator('#contractsignform-confirm_email').fill('aaforsignaturesinbound@maildrop.cc');
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityErrorClick();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(existingUserAlert).toBeVisible();
    await expect(existingUserAlert).toContainText('You are trying to sign a contract on behalf ot the existing ContractsRx user. Please Log In to sign it');
});

test('notSigningHaveAlreadySignedContractBySameNotExistingUser @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const signaturesFieldEmailTextError = page.locator('.field-contractsignform-email .help-block');
    console.log('endUser Not Signing Have Already Signed Contract By Same Not Existing User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill(getLegalEntityValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(getEmailValue1);
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForErorrClick();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(signaturesFieldEmailTextError).toBeVisible();
    await expect(signaturesFieldEmailTextError).toHaveText('This contract has already been signed by you');
});

test('signingContractByNotLoggedUserEntityPopup/ValidationOfSelectAndNoUseButtons @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const endUserSignedSignaturesTable = page.locator('.table');
    const legalEntityPopup = page.locator('#relative-company-modal');
    const legalEntityPopupSelectButton = page.locator('.select-relative-company .btn >> nth=0');
    const legalEntityPopupNoUseButton = page.locator('#no-use-this-company-button');
    console.log('endUser Signing Contract By Not Logged User Entity Popup/Validation Of Select And No Use Buttons');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    const legalEntityPopupGetLegalValue0 = await page.locator('#relative-company-0').textContent();
    await legalEntityPopupSelectButton.click();
    await page.waitForSelector('.alert-success');
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(legalEntityPopupGetLegalValue0);
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue2 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue2);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await legalEntityPopupNoUseButton.click();
    await page.waitForSelector('.alert-success');
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText(getLegalEntityValue0);
});

test('notSigningContractNotLoggedUserLegalEntityPopupExistingEmail @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const legalEntityPopup = page.locator('#relative-company-modal');
    const legalEntityPopupSelectButton = page.locator('.select-relative-company .btn >> nth=0');
    const existingUserAlert = page.locator('.alert-danger >> nth=0');
    console.log('endUser Not Signing Contract Not Logged User Legal Entity Popup Existing Email');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill('aaforenduser@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await legalEntityPopupSelectButton.click();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(existingUserAlert).toBeVisible();
    await expect(existingUserAlert).toContainText('You are trying to sign a contract on behalf ot the existing ContractsRx user. Please Log In to sign it');
});

test('notSigningContractNotLoggedUserLegalEntityPopupAlreadySignedContractSameEmailAndLegal @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const signaturesFieldEmailTextError = page.locator('.field-contractsignform-email .help-block');
    const legalEntityPopup = page.locator('#relative-company-modal');
    const legalEntityPopupSelectButton = page.locator('.select-relative-company .btn >> nth=0');
    console.log('endUser Not Signing Contract Not Logged User Legal Entity Popup Already Signed Contract Same Email And Legal');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await legalEntityPopupSelectButton.click();
    await page.waitForSelector('.alert-success');
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(getEmailValue1);
    const getEmailValue2 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue2);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await legalEntityPopupSelectButton.click();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await expect(signaturesFieldEmailTextError).toBeVisible();
    await expect(signaturesFieldEmailTextError).toHaveText('This contract has already been signed by you');
});

test('validationWhenTheLegalEntityPopupIsNotAppearedNotLoggedUser @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const legalEntityPopup = page.locator('#relative-company-modal');
    console.log('endUser Validation When The Legal Entity Popup Is Not Appeared Not Logged User');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(legalEntityPopup).toBeHidden();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('AAForEnduser');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(legalEntityPopup).toBeHidden();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('checkingEnteringLegalEntityWithSpacesAtTheEndOrInTheBeggining @regClickTractsMedium @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const legalEntityPopup = page.locator('#relative-company-modal');
    console.log('endUser Checking Entering Legal Entity With Spaces At The End Or In The Beggining');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('    ' + 'autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest' + '    ');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue1);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
});

test('displayingItemsOnTheLegalEntityPopup @regClickTractsLow @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const legalEntityPopup = page.locator('#relative-company-modal');
    const legalEntityPopupText = page.locator('#exampleModalLabel');
    const legalEntityPopupSelectButton = page.locator('.select-relative-company .btn >> nth=0');
    const legalEntityPopupNoUseButton = page.locator('#no-use-this-company-button');
    console.log('endUser Displaying Items On The Legal Entity Popup');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameField.fill('autotest');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonForLegalEntityClick();
    await expect(legalEntityPopup).toBeVisible();
    await expect(legalEntityPopupText).toBeVisible();
    await expect(legalEntityPopupText).toHaveText('Confirm Legal entity name (or signer’s name if signing as an individual)');
    await expect(legalEntityPopupSelectButton).toBeVisible();
    await expect(legalEntityPopupNoUseButton).toBeVisible();
});

test('checkingThatLoggedAACanSignTheContract @regClickTractsHigh @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Checking That Logged AA Can Sign The Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3757');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkGetValue0);
    await expect(contractSignersFields).toBeVisible();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(contractSignersFields).toBeHidden();
    await expect(successAlert).toBeVisible();
});

test('displyingTheErrorContractWithVissibilityRestrictions @regClickTractsHigh @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    const noPermissionsAlert = page.locator('.alert-danger');
    console.log('endUser Displying The Error Contract With Vissibility Restrictions');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3819');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await users.AA2ForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkGetValue0);
    await expect(noPermissionsAlert).toBeVisible();
    await expect(noPermissionsAlert).toContainText('Sorry, you do not have permission to access the contract.');
    await expect(contractContent).toBeHidden();
    await expect(contractSignersFields).toBeHidden();
});

test('displayingValidationOfTheLogoInTheHeaderOfPage @regClickTractsLow @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    const contractRXlogo = page.locator('.navbar-brand-link');
    const manageAccountButton = page.locator('#dashboard-manage-account');
    console.log('endUser Displaying Validation Of The Logo In The Header Of Page');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3819');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await page.on('dialog', (dialog) => {
        expect(dialog).toBeTruthy();
        dialog.accept();
    })
    await contractRXlogo.click();
    await expect(contractContent).toBeHidden();
    await expect(contractSignersFields).toBeHidden();
    await expect(page).toHaveURL('/dashboard');
    await expect(manageAccountButton).toBeVisible();
});

test('displayingValiadtionProfileMenu @regClickTractsMedium @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const profileBlock = page.locator('.header-profile-block');
    const profileBlockDropDown = page.locator('.header-profile-block-menu');
    const profileBlockDropDownMyProfile = page.locator('.my-profile');
    const profileBlockDropDownConfiguration = page.locator('.configuration');
    const profileBlockDropDownSignOut = page.locator('.sign-out');
    const myProfileSelectImageButton = page.locator('.select-image');
    const signInButton = page.locator('#login-sign-in');
    console.log('endUser Displaying Valiadtion Profile Menu');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3819');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await expect(profileBlock).toBeVisible();
    await profileBlock.click();
    await expect(profileBlockDropDown).toBeVisible();
    await expect(profileBlockDropDownMyProfile).toBeVisible();
    await expect(profileBlockDropDownConfiguration).toBeVisible();
    await expect(profileBlockDropDownSignOut).toBeVisible();
    await page.on('dialog', (dialog) => {
        expect(dialog).toBeTruthy();
        dialog.accept();
    })
    await profileBlockDropDownMyProfile.click();
    await expect(page).toHaveURL('/profile/724');
    await expect(myProfileSelectImageButton).toBeVisible();
    await page.goto(permanentLinkGetValue0);
    await profileBlock.click();
    await profileBlockDropDownConfiguration.click();
    await expect(page).toHaveURL('/configuration');
    await page.goto(permanentLinkGetValue0);
    await profileBlock.click();
    await profileBlockDropDownSignOut.click();
    await expect(page).toHaveURL('/sign-in?sign-auth=true');
    await expect(signInButton).toBeVisible();
    });

test('openingSignedSuccessfullyPageAlreadySignedContract @regClickTractsMedium @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Opening Signed Successfully Page Already Signed Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await page.goto(permanentLinkGetValue0);
    await expect(contractSignersFields).toBeHidden();
    await expect(successAlert).toBeVisible();
});
    
test('loggedAU/SACanNotSignTheContract @regClickTractsHigh @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    console.log('endUser Logged AU/SA Can Not Sign The Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await users.AUForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/clients/411');
    await page.goto(permanentLinkGetValue0);
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await userBar.logOutAction();
    await users.SA();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto(permanentLinkGetValue0);
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('openingSignedSuccessfullyPageAfterLoginOnTheEndUserPage @regClickTractsHigh @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractContent = page.locator('.final-contract-view .content');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const endUserLogInButton = page.locator('#login-btn');
    console.log('endUser Opening Signed Successfully Page After Login On The End User Page');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await users.AAForEnduser();
    await signIn.signInButton();
    await expect(contractContent).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(successAlert).toBeVisible();
});

test('displayingTheWatermarkOfTheTMPLAndContract @regClickTractsLow @endUser @endUserPage1 @signedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const watermarkBlock = page.locator('.watermark');
    console.log('endUser Displaying The Watermark Of The TMPL And Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await expect(watermarkBlock).toBeVisible();
    await expect(watermarkBlock).toContainText('tmpl');
    await expect(watermarkBlock).toContainText('contract');
});

test('notLoggedAACanSignTheContract @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Not Logged AA Can Sign The Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('displayingTheContractRxLogo @regClickTractsLow @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractRXlogoNotLogged = page.locator('.navbar-brand-span');
    const contractRXlogoNotLoggedImg = page.locator('.navbar-brand-span img');
    console.log('endUser Displaying The ContractRx Logo');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(contractRXlogoNotLogged).toBeVisible();
    await expect(contractRXlogoNotLoggedImg).toBeVisible();
    await expect(contractRXlogoNotLoggedImg).toHaveAttribute('src', 'https://marqup.test.noredlines.com/assets/images/logo-sm.png');
});

test('checkingTheLogInButton @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signInButton = page.locator('#login-sign-in');
    const endUserLogInButton = page.locator('#login-btn');
    console.log('endUser Checking The Log In Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserLogInButton).toBeVisible();
    await endUserLogInButton.click();
    await expect(page).toHaveURL('/sign-in?sign-auth=true');
    await expect(signInButton).toBeVisible();
});

test('openingTheSignedContractIfNotSignedUserLogged @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const endUserLogInButton = page.locator('#login-btn');
    console.log('endUser Opening The Signed Contract If Not Signed User Logged');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await users.AAForEnduser();
    await signIn.signInButton();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('openningAndSignInTheContractVisibilityRestriction @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Openning And Sign In The Contract Visibility Restriction');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3819');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('signingTheContractForUserWithoutContractRXAccount @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Signing The Contract For User Without ContractRX Account');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
});

test('displayingEndUserPageIfNotExistUserSignContractAndLogin @regClickTractsMedium @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Displaying End User Page If Not Exist User Sign Contract And Login');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.logInButtonClick();
    await users.AAForEnduser();
    await signIn.signInButton();
    await expect(page).toHaveURL(permanentLinkGetValue0);
    await expect(successAlert).toBeHidden();
    await expect(contractSignersFields).toBeVisible();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.logInButtonClick();
    await users.AAForEnduser();
    await signIn.signInButton();
    await expect(page).toHaveURL(permanentLinkGetValue0);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('checkingEndUserPageForNotSignedUserDisableSignature @regClickTractsHigh @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const noSignaturesText = page.locator('.no-signatures');
    const endUserLogInButton = page.locator('#login-btn');
    const contentEndUserNotSigned = page.locator('.content >> nth=1');
    const endUserDownloadPdfButton = page.locator('.pdf-button .btn');
    console.log('endUser Checking End User Page For Not Signed User Disable Signature');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3772');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserLogInButton).toBeHidden();
    await expect(contractSignersFields).toBeHidden();
    await expect(contentEndUserNotSigned).toBeVisible();
    await expect(contentEndUserNotSigned).toContainText('test100testTemplateDisabledSignaturesDoNotRemove');
    await expect(endUserDownloadPdfButton).toBeVisible();
    await expect(noSignaturesText).toBeVisible();
});

test('checkingDisplayingTheWatermarkOfTheTMPLAndContract @regClickTractsLow @endUser @endUserPage1 @notSignedUser', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const watermarkBlock = page.locator('.watermark');
    console.log('endUser Checking Displaying The Watermark Of The TMPL And Contract');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(watermarkBlock).toBeVisible();
    await expect(watermarkBlock).toContainText('tmpl');
    await expect(watermarkBlock).toContainText('contract');
});

test('validationOfTheBackButton @regClickTractsLow @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const endUserLogInButton = page.locator('#login-btn');
    const endUserSignPageBackButton = page.locator('#sign-in-home');
    console.log('endUser Validation Of The Back Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await endUserSignPageBackButton.click();
    await expect(page.url()).toContain('/contract/');
    await expect(endUserLogInButton).toBeVisible();
    await expect(contractSignersFields).toBeVisible();
    await endUserLogInButton.click();
    await page.goBack();
    await expect(page.url()).toContain('/contract/');
    await expect(endUserLogInButton).toBeVisible();
    await expect(contractSignersFields).toBeVisible();
});

test('behaviorWhenUserFillsIncorrectEmailOrPassword @regClickTractsMedium @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const endUserLogInButton = page.locator('#login-btn');
    const emailFieldInput = page.locator('#auth-login input');
    const emailFieldInputError = page.locator('#auth-login mat-error');
    const passowrdFieldInput = page.locator('#auth-password input');
    const passwordFieldInputError = page.locator('#auth-password mat-error');
    console.log('endUser Behavior When User Fills Incorrect Email Or Password');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await signIn.signInButton();
    await expect(emailFieldInput).toHaveCSS('caret-color', 'rgb(244, 67, 54)');
    await expect(emailFieldInputError).toBeVisible();
    await expect(emailFieldInputError).toHaveCSS('color', 'rgb(244, 67, 54)');
    await expect(passowrdFieldInput).toHaveCSS('caret-color', 'rgb(244, 67, 54)');
    await expect(passwordFieldInputError).toBeVisible();
    await expect(passwordFieldInputError).toHaveCSS('color', 'rgb(244, 67, 54)');
    await expect(page).toHaveURL('/sign-in?sign-auth=true');
    await expect(contractSignersFields).toBeHidden();
});

test('validationOfTheSignInButton @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const endUserLogInButton = page.locator('#login-btn');
    console.log('endUser Validation Of The Sign In Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForTimeout(1500);
    await expect(page.url()).toContain('/contract/');
    await expect(contractSignersFields).toBeVisible();
});

test('openningSignedSuccessScreenAfterLogin @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const endUserLogInButton = page.locator('#login-btn');
    console.log('endUser Openning Signed Success Screen After Login');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForTimeout(1500);
    await expect(page.url()).toContain('/contract/');
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
});

test('validationOfTheForgotPasswordButton @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const endUserLogInButton = page.locator('#login-btn');
    const sendButton = page.locator('#forgot-password-send');
    console.log('endUser Validation Of The Forgot Password Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await signIn.forgotPasswordLink();
    await expect(page).toHaveURL('/forgot-password');
    await expect(sendButton).toBeVisible();
});

test('validationOfSendButtonOnTheForgotPassword @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const endUserLogInButton = page.locator('#login-btn');
    const sendButton = page.locator('#forgot-password-send');
    const forgotPasswordEmail = page.locator('#forgot-password-email input');
    const sucessSentAlert = page.locator('snack-bar-container');
    console.log('endUser Validation Of Send Button On The Forgot Password');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUserLogInButton.click();
    await signIn.forgotPasswordLink();
    await forgotPasswordEmail.type('aaforenduser@maildrop.cc');
    await sendButton.click();
    await page.waitForSelector('snack-bar-container');
    await expect(sucessSentAlert).toBeVisible();
    await expect(sucessSentAlert).toHaveText('Email has been sent successfully');
    await page.waitForTimeout(3000);
    await expect(contractSignersFields).toBeVisible();
    await expect(page.url()).toContain('/contract/');
});

test('behaviorWhenUserRefreshesPageLoggedUserOnAnotherTab @regClickTractsHigh @endUser @endUserPage1 @notSignedUserLoginScreen', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    console.log('endUser Behavior When User Refreshes Page Logged User On Another Tab');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto('/dashboard');
    await page.locator('.contract-column-link >> nth=0').click();
    const [page1] = await Promise.all([
        page.waitForEvent('popup'),
    ]);
    await userBar.logOutAction();
    await page1.goto(permanentLinkGetValue0);
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page1.reload();
    await expect(page1.url()).toContain('/contract/');
    await expect(page1.locator('#login-btn')).toBeHidden();
    await expect(page1.locator('.header-profile-block')).toBeVisible();
});

test('notDisplayingThePayContractFeeButtonDisabledPaytracts @regClickTractsHigh @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const successAlert = page.locator('.alert-success');
    const payContractFeeButton = page.locator('#checkout-button');
    console.log('endUser Not Displaying The Pay Contract Fee Button Disabled Paytracts');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(payContractFeeButton).toBeHidden();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(payContractFeeButton).toBeHidden();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(payContractFeeButton).toBeHidden();
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(payContractFeeButton).toBeHidden();
});

test('displayingDisableSignaturesTextForDisabledSignaturesTemplate @regClickTractsMedium @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const noSignaturesText = page.locator('.no-signatures');
    console.log('endUser Displaying Disable Signatures Text For Disabled Signatures Template');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3772');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(noSignaturesText).toBeVisible();
    await expect(noSignaturesText).toHaveText('No signatures for this contract');
});

test('displayingTheSignersMultipartyOnWithSigners @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const groupName0 = page.locator('#variables-list-form-control-value-0');
    const groupChooseVariables0 = page.locator('[name=signer_variables_input] >> nth=0');
    const groupName1 = page.locator('#variables-list-form-control-value-1');
    const groupChooseVariables1 = page.locator('[name=signer_variables_input] >> nth=1');
    const groupName2 = page.locator('#variables-list-form-control-value-2');
    const groupChooseVariables2 = page.locator('[name=signer_variables_input] >> nth=2');
    const groupName3 = page.locator('#variables-list-form-control-value-3');
    const groupChooseVariables3 = page.locator('[name=signer_variables_input] >> nth=3');
    const variableGroupOption0 = page.locator('.variable-group-option >> nth=0');
    const variableGroupOption1 = page.locator('.variable-group-option >> nth=1');
    const copyLinkGroup0 = page.locator('.btn-action--copylink div >> nth=0');
    const copyLinkGroup1 = page.locator('.btn-action--copylink div >> nth=1');
    const copyLinkGroup2 = page.locator('.btn-action--copylink div >> nth=2');
    const copyLinkGroup3 = page.locator('.btn-action--copylink div >> nth=3');
    const contractSignersFields = page.locator('.template-form');
    const endUserSignedSignaturesTable0 = page.locator('.table >> nth=0');
    const endUserSignedSignaturesTable1 = page.locator('.table >> nth=1');
    const endUserSignedSignaturesTable2 = page.locator('.table >> nth=2');
    const endUserSignerText0InputVariable = page.locator('[name=elementName_1] input');
    const endUserSignerText1InputVariable = page.locator('[name=elementName_2] input');
    const endUserSignerNumberInputVariable = page.locator('[name=elementName_3] input');
    const endUserSignerUrlInputVariable = page.locator('[name=elementName_4] input');
    const endUserSignerTextListVariable = page.locator('[name=elementName_5] select');
    const endUserSignerNumberListVariable = page.locator('[name=elementName_6] select');
    console.log('endUser Displaying The Signers Multiparty On With Signers');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4033');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.editVariablesConfiguratorClick();
    await newContract.configuratorAddGroupButtonClick();
    await groupName0.fill('group0');
    await groupChooseVariables0.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName1.fill('group1');
    await groupChooseVariables1.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName2.fill('group2');
    await groupChooseVariables2.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.configuratorAddGroupButtonClick();
    await groupName3.fill('group3');
    await groupChooseVariables3.click();
    await variableGroupOption0.click();
    await variableGroupOption1.click();
    await newContract.editVariablesConfiguratorClick();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const getGroup0PermanentLink = await copyLinkGroup0.getAttribute('data-link');
    const getGroup1PermanentLink = await copyLinkGroup1.getAttribute('data-link');
    const getGroup2PermanentLink = await copyLinkGroup2.getAttribute('data-link');
    const getGroup3PermanentLink = await copyLinkGroup3.getAttribute('data-link');
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(getGroup0PermanentLink);
    await endUserSignerText0InputVariable.type('test0');
    await endUserSignerText1InputVariable.type('test1');
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime0 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(getGroup1PermanentLink);
    await endUserSignerNumberInputVariable.type('2323');
    await endUserSignerUrlInputVariable.type('google.com');
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue2 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue2);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue1 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue3 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime1 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(getGroup2PermanentLink);
    await endUserSignerTextListVariable.selectOption('0');
    await endUserSignerNumberListVariable.selectOption('0');
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue4 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue4);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue2 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue5 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime2 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(getGroup3PermanentLink);
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable2).toBeVisible();
    await expect(endUserSignedSignaturesTable2).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable2).toContainText(getEmailValue1);
    await expect(endUserSignedSignaturesTable2).toContainText(getDateAndTime0);
    await expect(endUserSignedSignaturesTable1).toBeVisible();
    await expect(endUserSignedSignaturesTable1).toContainText(getLegalEntityValue1);
    await expect(endUserSignedSignaturesTable1).toContainText(getEmailValue3);
    await expect(endUserSignedSignaturesTable1).toContainText(getDateAndTime1);
    await expect(endUserSignedSignaturesTable0).toBeVisible();
    await expect(endUserSignedSignaturesTable0).toContainText(getLegalEntityValue2);
    await expect(endUserSignedSignaturesTable0).toContainText(getEmailValue5);
    await expect(endUserSignedSignaturesTable0).toContainText(getDateAndTime2);
});

test('displayingTheSignersMultipartyOnWithoutSigners @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const endUserSignedSignaturesTable0 = page.locator('.table >> nth=0');
    const endUserSignedSignaturesTable1 = page.locator('.table >> nth=1');
    const endUserSignedSignaturesTable2 = page.locator('.table >> nth=2');
    console.log('endUser Displaying The Signers Multiparty On Without Signers');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4051');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue0 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue0);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue0 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue1 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime0 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue2 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue2);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue1 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue3 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime1 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(permanentLinkGetValue0);
    await endUser.firstNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.lastNameFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.legalEntityNameFieldRandomFill(Helpers.generateRandomStringLegalEntity());
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.emailField.fill(Helpers.generateRandomStringSignatures() + '@maildrop.cc');
    const getEmailValue4 = await page.locator('#contractsignform-email').inputValue();
    await page.locator('#contractsignform-confirm_email').fill(getEmailValue4);
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    const getLegalEntityValue2 = await page.locator('#contractsignform-company_name').inputValue();
    const getEmailValue5 = await page.locator('#contractsignform-email').inputValue();
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    const getDateAndTime2 = await Helpers.currentDateAndTimeForSignedContract();
    await page.goto(permanentLinkGetValue0);
    await expect(contractSignersFields).toBeVisible();
    await expect(endUserSignedSignaturesTable2).toBeVisible();
    await expect(endUserSignedSignaturesTable2).toContainText(getLegalEntityValue0);
    await expect(endUserSignedSignaturesTable2).toContainText(getEmailValue1);
    await expect(endUserSignedSignaturesTable2).toContainText(getDateAndTime0);
    await expect(endUserSignedSignaturesTable1).toBeVisible();
    await expect(endUserSignedSignaturesTable1).toContainText(getLegalEntityValue1);
    await expect(endUserSignedSignaturesTable1).toContainText(getEmailValue3);
    await expect(endUserSignedSignaturesTable1).toContainText(getDateAndTime1);
    await expect(endUserSignedSignaturesTable0).toBeVisible();
    await expect(endUserSignedSignaturesTable0).toContainText(getLegalEntityValue2);
    await expect(endUserSignedSignaturesTable0).toContainText(getEmailValue5);
    await expect(endUserSignedSignaturesTable0).toContainText(getDateAndTime2);
});

test('displayingTheSignersMultipartyOff @regClickTractsHigh @endUser @endUserPage1 @legalEntity', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldFirstName = page.locator('#contractsignform-first_name');
    const signaturesFieldLastName = page.locator('#contractsignform-last_name');
    const signaturesFieldEntityName = page.locator('#contractsignform-company_name');
    const signaturesFieldTitle = page.locator('#contractsignform-title');
    const signaturesFieldEmail = page.locator('#contractsignform-email');
    const signaturesFieldConfirmEmail = page.locator('#contractsignform-confirm_email');
    const signaturesFieldSignature = page.locator('#contractsignform-signature');
    console.log('endUser Displaying The Signers Multiparty Off');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(signaturesFieldFirstName).toBeVisible();
    await expect(signaturesFieldFirstName).not.toBeEditable();
    await expect(signaturesFieldFirstName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldLastName).toBeVisible();
    await expect(signaturesFieldLastName).not.toBeEditable();
    await expect(signaturesFieldLastName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldEntityName).toBeVisible();
    await expect(signaturesFieldEntityName).not.toBeEditable();
    await expect(signaturesFieldEntityName).toHaveValue('AAForEnduser');
    await expect(signaturesFieldTitle).toBeVisible();
    await expect(signaturesFieldTitle).toBeEditable();
    await expect(signaturesFieldTitle).toHaveValue('');
    await expect(signaturesFieldEmail).toBeVisible();
    await expect(signaturesFieldEmail).not.toBeEditable();
    await expect(signaturesFieldEmail).toHaveValue('aaforenduser@maildrop.cc');
    await expect(signaturesFieldConfirmEmail).toBeVisible();
    await expect(signaturesFieldConfirmEmail).toHaveValue('aaforenduser@maildrop.cc');
    await expect(signaturesFieldConfirmEmail).not.toBeEditable();
    await expect(signaturesFieldSignature).toBeVisible();
    await expect(signaturesFieldSignature).toBeEditable();
    await expect(signaturesFieldSignature).toHaveValue('');
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(signaturesFieldFirstName).toBeVisible();
    await expect(signaturesFieldFirstName).toBeEditable();
    await expect(signaturesFieldFirstName).toHaveValue('');
    await expect(signaturesFieldLastName).toBeVisible();
    await expect(signaturesFieldLastName).toBeEditable();
    await expect(signaturesFieldLastName).toHaveValue('');
    await expect(signaturesFieldEntityName).toBeVisible();
    await expect(signaturesFieldEntityName).toBeEditable();
    await expect(signaturesFieldEntityName).toHaveValue('');
    await expect(signaturesFieldTitle).toBeVisible();
    await expect(signaturesFieldTitle).toBeEditable();
    await expect(signaturesFieldTitle).toHaveValue('');
    await expect(signaturesFieldEmail).toBeVisible();
    await expect(signaturesFieldEmail).toBeEditable();
    await expect(signaturesFieldEmail).toHaveValue('');
    await expect(signaturesFieldConfirmEmail).toBeVisible();
    await expect(signaturesFieldConfirmEmail).toBeEditable();
    await expect(signaturesFieldConfirmEmail).toHaveValue('');
    await expect(signaturesFieldSignature).toBeVisible();
    await expect(signaturesFieldSignature).toBeEditable();
    await expect(signaturesFieldSignature).toHaveValue('');
});

test('notDisplayingSignaturesFieldsDisableSignaturesApplied @regClickTractsHigh @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const endUser = new EndUserPage(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    console.log('endUser Not Displaying Signatures Fields Disable Signatures Applied');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3772');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(contractSignersFields).toBeHidden();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(contractSignersFields).toBeHidden();
});

test('displayingSignaturesFieldsForSignedContractDisableSignatures/CorrectNamesOfSignaturesFields @regClickTractsMedium @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const contracts = new ContractsPage(page);
    const endUser = new EndUserPage(page);
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const successAlert = page.locator('.alert-success');
    const signaturesFieldFirstNameLabel = page.locator('.field-contractsignform-first_name label');
    const signaturesFieldLastNameLabel = page.locator('.field-contractsignform-last_name label');
    const signaturesFieldEntityNameLabel = page.locator('.field-contractsignform-company_name label');
    const signaturesFieldTitleLabel= page.locator('.field-contractsignform-title label');
    const signaturesFieldEmailLabel= page.locator('.field-contractsignform-email label');
    const signaturesFieldConfirmEmailLabel = page.locator('.field-contractsignform-confirm_email label');
    const signaturesFieldSignatureLabel = page.locator('.field-contractsignform-signature label');
    const endUserSignedSignaturesTable = page.locator('.table');
    console.log('endUser Displaying Signatures Fields For Signed Contract Disable Signatures/Correct Names Of Signatures Fields');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(signaturesFieldFirstNameLabel).toHaveText('First Name');
    await expect(signaturesFieldLastNameLabel).toHaveText('Last Name');
    await expect(signaturesFieldEntityNameLabel).toHaveText("Legal entity name (or signer’s name if signing as an individual)");
    await expect(signaturesFieldTitleLabel).toHaveText('Title');
    await expect(signaturesFieldEmailLabel).toHaveText('Email');
    await expect(signaturesFieldConfirmEmailLabel).toHaveText('Confirm Email');
    await expect(signaturesFieldSignatureLabel).toHaveText('Signature');
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await page.goto('');
    await page.goto('/contracts/list?&sort=-updated_at');
    const contractNameValue0 = await contractName.innerText();
    if (contractNameValue0.includes('autotest'))
    {
        await contracts.threeDotsMenuDisableSignaturesButtonClick();
    }
    await page.goto(permanentLinkGetValue0);
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText('First Name');
    await expect(endUserSignedSignaturesTable).toContainText('Last Name');
    await expect(endUserSignedSignaturesTable).toContainText("Legal entity name (or signer’s name if signing as an individual)");
    await expect(endUserSignedSignaturesTable).toContainText('Title');
    await expect(endUserSignedSignaturesTable).toContainText('Email');
    await expect(endUserSignedSignaturesTable).toContainText('Signature');
    await expect(endUserSignedSignaturesTable).toContainText('Signed At');
});

test('checkingDisplayingSignautresFieldsCheckboxVariableSelected/NotSelected @regClickTractsHigh @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldFirstName = page.locator('#contractsignform-first_name');
    const signaturesFieldLastName = page.locator('#contractsignform-last_name');
    const signaturesFieldEntityName = page.locator('#contractsignform-company_name');
    const signaturesFieldTitle = page.locator('#contractsignform-title');
    const signaturesFieldEmail = page.locator('#contractsignform-email');
    const signaturesFieldConfirmEmail = page.locator('#contractsignform-confirm_email');
    const signaturesFieldSignature = page.locator('#contractsignform-signature');
    const endUserCheckboxVariable = page.locator('#elementName_1');
    console.log('endUser Checking Displaying Signautres Fields Checkbox Variable Selected/Not Selected');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3875');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserCheckboxVariable).not.toBeChecked();
    await expect(signaturesFieldFirstName).toBeDisabled();
    await expect(signaturesFieldLastName).toBeDisabled();
    await expect(signaturesFieldEntityName).toBeDisabled();
    await expect(signaturesFieldTitle).toBeDisabled();
    await expect(signaturesFieldEmail).toBeDisabled();
    await expect(signaturesFieldConfirmEmail).toBeDisabled();
    await expect(signaturesFieldSignature).toBeDisabled();
    await endUserCheckboxVariable.click();
    await expect(endUserCheckboxVariable).toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserCheckboxVariable).not.toBeChecked();
    await expect(signaturesFieldFirstName).toBeDisabled();
    await expect(signaturesFieldLastName).toBeDisabled();
    await expect(signaturesFieldEntityName).toBeDisabled();
    await expect(signaturesFieldTitle).toBeDisabled();
    await expect(signaturesFieldEmail).toBeDisabled();
    await expect(signaturesFieldConfirmEmail).toBeDisabled();
    await expect(signaturesFieldSignature).toBeDisabled();
    await endUserCheckboxVariable.click();
    await expect(endUserCheckboxVariable).toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
});

test('checkingDisplayingSignautresFieldsMultipleChoiceVariableSelected/NotSelected @regClickTractsMedium @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const signaturesFieldFirstName = page.locator('#contractsignform-first_name');
    const signaturesFieldLastName = page.locator('#contractsignform-last_name');
    const signaturesFieldEntityName = page.locator('#contractsignform-company_name');
    const signaturesFieldTitle = page.locator('#contractsignform-title');
    const signaturesFieldEmail = page.locator('#contractsignform-email');
    const signaturesFieldConfirmEmail = page.locator('#contractsignform-confirm_email');
    const signaturesFieldSignature = page.locator('#contractsignform-signature');
    const endUserMultipleChoiceVariable = page.locator('#elementName_1-1');
    console.log('endUser Checking Displaying Signautres Fields Multiple Choice Variable Selected/Not Selected');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3877');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserMultipleChoiceVariable).not.toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
    await endUserMultipleChoiceVariable.click();
    await expect(endUserMultipleChoiceVariable).toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
    await page.goto('');
    await userBar.logOutAction();
    await page.goto(permanentLinkGetValue0);
    await expect(endUserMultipleChoiceVariable).not.toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
    await endUserMultipleChoiceVariable.click();
    await expect(endUserMultipleChoiceVariable).toBeChecked();
    await expect(signaturesFieldFirstName).toBeEnabled();
    await expect(signaturesFieldLastName).toBeEnabled();
    await expect(signaturesFieldEntityName).toBeEnabled();
    await expect(signaturesFieldTitle).toBeEnabled();
    await expect(signaturesFieldEmail).toBeEnabled();
    await expect(signaturesFieldConfirmEmail).toBeEnabled();
    await expect(signaturesFieldSignature).toBeEnabled();
});

test('displayingPaymentWithAmountForAlreadySignedContractDisabledPaytracts @regClickTractsMedium @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const contracts = new ContractsPage(page);
    const endUser = new EndUserPage(page);
    const contractName = page.locator('.contracts-name-column-link >> nth=0');
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const contractSignersFields = page.locator('.template-form');
    const successAlert = page.locator('.alert-success');
    const payContractFeeButton = page.locator('#checkout-button');
    const endUserSignedSignaturesTable = page.locator('.table');
    console.log('endUser Displaying Payment With Amount For Already Signed Contract Disabled Paytracts');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/4041');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractFeeValueChoose();
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClickMultipartyOn();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await page.goto(permanentLinkGetValue0);
    await expect(payContractFeeButton).toBeHidden();
    await endUser.titleFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.signatureFieldRandomFill(Helpers.generateRandomStringSignatures());
    await endUser.iAgreeCheckboxClick();
    await endUser.signButtonClick();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(payContractFeeButton).toBeVisible();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText('Payment');
    await expect(endUserSignedSignaturesTable).toContainText('Pending');
    await endUser.payContractFeeButtonClick();
    await endUser.payContractFeePagePayment();
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(payContractFeeButton).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText('Payment');
    await expect(endUserSignedSignaturesTable).toContainText('Success 99 USD');
    await page.goto('/contracts/list?&sort=-updated_at');
    const contractNameValue0 = await contractName.innerText();
    if (contractNameValue0.includes('autotest'))
    {
        await contracts.rightArrowClick();
        await contracts.threeDotsMenuDisablePaytractsButtonClick();
        await contracts.threeDotsMenuDisablePaytractsPopupDoneButtonClick();
    }
    await page.goto(permanentLinkGetValue0);
    await expect(successAlert).toBeVisible();
    await expect(contractSignersFields).toBeHidden();
    await expect(payContractFeeButton).toBeHidden();
    await expect(endUserSignedSignaturesTable).toBeVisible();
    await expect(endUserSignedSignaturesTable).toContainText('Payment');
    await expect(endUserSignedSignaturesTable).toContainText('Success 99 USD');
});

test('checkingDisplayingInfoAboutConnectingIpAdress @regClickTractsHigh @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const connectingIpAdressText = page.locator('.final-contract-view');
    console.log('endUser Checking Displaying Info About Connecting Ip Adress');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(connectingIpAdressText).toContainText('We collect your computer’s IP address at the time of signature for signature capture purposes only.');
});

test('displayingPrivacyBox/OpenningPrivacyPage/ValidationClsoeButton @regClickTractsHigh @endUser @endUserPage2', async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const newTemplate = new NewEditCopyTemplatePage(page);
    const newContract = new NewEditContractPage(page);
    const viewContract = new ViewContract(page);
    const permanentLinkValue = page.locator('#permanentContractLink input');
    const privacyPolicyBlock = page.locator('.notification');
    const privacyPolicyBlockLink = page.locator("//a[contains(text(),'Privacy Policy')]");
    const privacyPolicyBlockCloseButton = page.locator('.btn-close');
    console.log('endUser Displaying Privacy Box/Openning Privacy Page/Validation Clsoe Button');
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-template/clone/3831');
    await newTemplate.templateTitleFieldFill(Helpers.generateRandomString());
    await newTemplate.selectCategoryName();
    await newTemplate.publishToggleClick();
    await newTemplate.createContractButtonClick();
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.contractDescriptionTitleFieldFillRandom(Helpers.generateRandomString());
    await newContract.publishToggleClick();
    await newContract.saveAndGenerateLinkButtonClick();
    await viewContract.copyLinkButtonClick();
    await viewContract.copyLinkPopupPermanentCheckboxButtonClick();
    const permanentLinkGetValue0 = await permanentLinkValue.inputValue();
    await viewContract.copyLinkPopupCancelButtonClick();
    await page.goto(permanentLinkGetValue0);
    await expect(privacyPolicyBlock).toBeVisible();
    await expect(privacyPolicyBlock).toHaveText('We use cookies on our site to improve site performance, including agreement signature verification, and for site analytics. For more information regarding the information we capture and how we use it, please see our Privacy Policy');
    await expect(privacyPolicyBlockLink).toHaveAttribute('href', 'https://contractsrx.com/privacy-policy/');
    await expect(privacyPolicyBlockCloseButton).toBeVisible();
    await privacyPolicyBlockLink.click();
    await expect(page).toHaveURL('https://contractsrx.com/privacy-policy/');
    await page.goto(permanentLinkGetValue0);
    await privacyPolicyBlockCloseButton.click();
    await expect(privacyPolicyBlock).toBeHidden();
});

test.afterEach(async ({ page }) => {
    const users = new Users(page);
    const signIn = new SignInPage(page);
    const userBar = new UserBar(page);
    const templatesPage = new TemplatesPage(page);
    const editTemplate = new NewEditCopyTemplatePage(page);
    const templateName = page.locator('.template-name-column-link >> nth=0');
    const changeStatusPopup = page.locator('.modal-header >> text=You must first change the Template status');
    await page.goto('');
    if (await page.locator('#login-sign-in').isVisible())
    {
        await users.AA();
        await signIn.signInButton();
        await page.waitForURL('/dashboard');
    }
    await userBar.logOutAction();
    await users.AAForEnduser();
    await signIn.signInButton();
    await page.waitForURL('/dashboard');
    await page.goto('/contract-templates/list?&sort=-updated_at');
    const templateNameValueSA = await templateName.innerText();
        if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }
        else if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }
        else if (templateNameValueSA.includes('autotest'))
        {
            await page.waitForTimeout(500);
            await templatesPage.threeDotsMenuDeleteButtonClick();
            await page.waitForTimeout(500);
                if (await changeStatusPopup.isHidden()) {
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
                else if (await changeStatusPopup.isVisible()) {
                    await page.locator('#confirm-modal-cancel').click();
                    await templatesPage.threeDotsMenuEditButtonClick();
                    await editTemplate.draftToggleClick();
                    await editTemplate.saveButtonClick();
                    await page.goto('/contract-templates/list?&sort=-updated_at');
                    await page.waitForTimeout(500);
                    await templatesPage.threeDotsMenuDeleteButtonClick();
                    await page.waitForTimeout(500);
                    await templatesPage.deletePopupDeleteButtonClick();
                }
        }          
});